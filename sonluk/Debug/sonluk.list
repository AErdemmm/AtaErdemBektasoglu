
sonluk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c9f0  0800c9f0  0001c9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceac  0800ceac  000202f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb4  0800ceb4  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ceb8  0800ceb8  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800cebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f0  2**0
                  CONTENTS
 10 .bss          00001d84  200002f0  200002f0  000202f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002074  20002074  000202f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e2e  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e3  00000000  00000000  0003514e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  000397b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e11  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a7a  00000000  00000000  000606b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da750  00000000  00000000  0007712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015187b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006078  00000000  00000000  001518cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9d8 	.word	0x0800c9d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	0800c9d8 	.word	0x0800c9d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9aa 	b.w	8000f78 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <activationFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Perceptron activation function
float activationFunction(float sum) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	ed87 0a01 	vstr	s0, [r7, #4]
    if (sum > THRESHOLD) {
 8000f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dd02      	ble.n	8000f9e <activationFunction+0x22>
        return 1.0;
 8000f98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f9c:	e001      	b.n	8000fa2 <activationFunction+0x26>
    }
    else {
        return 0.0;
 8000f9e:	f04f 0300 	mov.w	r3, #0
    }
}
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <trainPerceptron>:
void trainPerceptron(float w0, float w1) {
 8000fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fbc:	b092      	sub	sp, #72	; 0x48
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fc4:	edc7 0a00 	vstr	s1, [r7]
    // OR truth table inputs and desired outputs
    float inputs[4][NUM_INPUTS] = {{0, 0}, {0, 1}, {1, 0}, {1, 1}};
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <trainPerceptron+0x1b8>)
 8000fca:	f107 0410 	add.w	r4, r7, #16
 8000fce:	461d      	mov	r5, r3
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float weights[2] = {w0,w1};
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]




    // Perform training iterations
    int numIter = 10000;
 8000fe4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
    for (int iteri = 0; iteri < numIter; iteri++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
 8000fee:	e0af      	b.n	8001150 <trainPerceptron+0x198>
        for (int sample = 0; sample < 4; sample++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8000ff4:	e0a5      	b.n	8001142 <trainPerceptron+0x18a>
            // Calculate weighted sum
            float sum = bias;
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <trainPerceptron+0x1bc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (int i = 0; i < NUM_INPUTS; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001000:	e01b      	b.n	800103a <trainPerceptron+0x82>
                sum += inputs[sample][i] * weights[i];
 8001002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001004:	005a      	lsls	r2, r3, #1
 8001006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	3348      	adds	r3, #72	; 0x48
 800100e:	443b      	add	r3, r7
 8001010:	3b38      	subs	r3, #56	; 0x38
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	3348      	adds	r3, #72	; 0x48
 800101c:	443b      	add	r3, r7
 800101e:	3b40      	subs	r3, #64	; 0x40
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001030:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            for (int i = 0; i < NUM_INPUTS; i++) {
 8001034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001036:	3301      	adds	r3, #1
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
 800103a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103c:	2b01      	cmp	r3, #1
 800103e:	dde0      	ble.n	8001002 <trainPerceptron+0x4a>
            }

            // Apply activation function

            // Apply activation function
            output = activationFunction(sum);
 8001040:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001044:	f7ff ff9a 	bl	8000f7c <activationFunction>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <trainPerceptron+0x1c0>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
            // Calculate error
            error = desiredOutputs[sample] - output;
 8001052:	4a4a      	ldr	r2, [pc, #296]	; (800117c <trainPerceptron+0x1c4>)
 8001054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <trainPerceptron+0x1c0>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <trainPerceptron+0x1c8>)
 800106a:	edc3 7a00 	vstr	s15, [r3]



            // Calculate error
            // Update weights and bias
            for (int i = 0; i < NUM_INPUTS; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
 8001072:	e040      	b.n	80010f6 <trainPerceptron+0x13e>
                weights[i] += eta * error * inputs[sample][i];
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	3348      	adds	r3, #72	; 0x48
 800107a:	443b      	add	r3, r7
 800107c:	3b40      	subs	r3, #64	; 0x40
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa61 	bl	8000548 <__aeabi_f2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <trainPerceptron+0x1c8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa5a 	bl	8000548 <__aeabi_f2d>
 8001094:	a334      	add	r3, pc, #208	; (adr r3, 8001168 <trainPerceptron+0x1b0>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff faad 	bl	80005f8 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4690      	mov	r8, r2
 80010a4:	4699      	mov	r9, r3
 80010a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a8:	005a      	lsls	r2, r3, #1
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	3348      	adds	r3, #72	; 0x48
 80010b2:	443b      	add	r3, r7
 80010b4:	3b38      	subs	r3, #56	; 0x38
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa45 	bl	8000548 <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4640      	mov	r0, r8
 80010c4:	4649      	mov	r1, r9
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff f8db 	bl	800028c <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd45 	bl	8000b6c <__aeabi_d2f>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	3348      	adds	r3, #72	; 0x48
 80010ea:	443b      	add	r3, r7
 80010ec:	3b40      	subs	r3, #64	; 0x40
 80010ee:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < NUM_INPUTS; i++) {
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	3301      	adds	r3, #1
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	ddbb      	ble.n	8001074 <trainPerceptron+0xbc>

            }
            bias += eta * error;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <trainPerceptron+0x1bc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4604      	mov	r4, r0
 8001108:	460d      	mov	r5, r1
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <trainPerceptron+0x1c8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa1a 	bl	8000548 <__aeabi_f2d>
 8001114:	a314      	add	r3, pc, #80	; (adr r3, 8001168 <trainPerceptron+0x1b0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa6d 	bl	80005f8 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8b1 	bl	800028c <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd1b 	bl	8000b6c <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <trainPerceptron+0x1bc>)
 800113a:	6013      	str	r3, [r2, #0]
        for (int sample = 0; sample < 4; sample++) {
 800113c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113e:	3301      	adds	r3, #1
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
 8001142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001144:	2b03      	cmp	r3, #3
 8001146:	f77f af56 	ble.w	8000ff6 <trainPerceptron+0x3e>
    for (int iteri = 0; iteri < numIter; iteri++) {
 800114a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114c:	3301      	adds	r3, #1
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
 8001150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001154:	429a      	cmp	r2, r3
 8001156:	f6ff af4b 	blt.w	8000ff0 <trainPerceptron+0x38>
            }
        }
    }
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3748      	adds	r7, #72	; 0x48
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001166:	bf00      	nop
 8001168:	9999999a 	.word	0x9999999a
 800116c:	3fb99999 	.word	0x3fb99999
 8001170:	0800c9f0 	.word	0x0800c9f0
 8001174:	20000000 	.word	0x20000000
 8001178:	20000324 	.word	0x20000324
 800117c:	20000010 	.word	0x20000010
 8001180:	20000328 	.word	0x20000328

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f000 fd5e 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f000 f886 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f000 fac6 	bl	8001720 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001194:	f000 f8ec 	bl	8001370 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001198:	f000 f94e 	bl	8001438 <MX_ADC2_Init>
  MX_TIM2_Init();
 800119c:	f000 f9b0 	bl	8001500 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011a0:	f000 fa36 	bl	8001610 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80011a4:	f007 fdde 	bl	8008d64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80011a8:	4831      	ldr	r0, [pc, #196]	; (8001270 <main+0xec>)
 80011aa:	f000 fe27 	bl	8001dfc <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ae:	2104      	movs	r1, #4
 80011b0:	4830      	ldr	r0, [pc, #192]	; (8001274 <main+0xf0>)
 80011b2:	f003 fbe3 	bl	800497c <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc2);
 80011b6:	4830      	ldr	r0, [pc, #192]	; (8001278 <main+0xf4>)
 80011b8:	f000 fe20 	bl	8001dfc <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	482f      	ldr	r0, [pc, #188]	; (800127c <main+0xf8>)
 80011c0:	f003 fbdc 	bl	800497c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_ADC_Start(&hadc1);
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <main+0xec>)
 80011c6:	f000 fe19 	bl	8001dfc <HAL_ADC_Start>
	    HAL_ADC_Start(&hadc2);
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <main+0xf4>)
 80011cc:	f000 fe16 	bl	8001dfc <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, 10);
 80011d0:	210a      	movs	r1, #10
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <main+0xec>)
 80011d4:	f000 ff17 	bl	8002006 <HAL_ADC_PollForConversion>
	    HAL_ADC_PollForConversion(&hadc2, 10);
 80011d8:	210a      	movs	r1, #10
 80011da:	4827      	ldr	r0, [pc, #156]	; (8001278 <main+0xf4>)
 80011dc:	f000 ff13 	bl	8002006 <HAL_ADC_PollForConversion>
	    adc_value = HAL_ADC_GetValue(&hadc1);
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <main+0xec>)
 80011e2:	f000 ff9b 	bl	800211c <HAL_ADC_GetValue>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a25      	ldr	r2, [pc, #148]	; (8001280 <main+0xfc>)
 80011ea:	6013      	str	r3, [r2, #0]
	    Vadc= adc_value /4095;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <main+0xfc>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <main+0x100>)
 80011f2:	fba3 1302 	umull	r1, r3, r3, r2
 80011f6:	1ad2      	subs	r2, r2, r3
 80011f8:	0852      	lsrs	r2, r2, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	0adb      	lsrs	r3, r3, #11
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <main+0x104>)
 8001200:	6013      	str	r3, [r2, #0]
	    weights0 = Vadc;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <main+0x104>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <main+0x108>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
	    adc_value2 = HAL_ADC_GetValue(&hadc2);
 8001214:	4818      	ldr	r0, [pc, #96]	; (8001278 <main+0xf4>)
 8001216:	f000 ff81 	bl	800211c <HAL_ADC_GetValue>
 800121a:	4603      	mov	r3, r0
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <main+0x10c>)
 800121e:	6013      	str	r3, [r2, #0]
	    Vadc2= adc_value2 /4095;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <main+0x10c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <main+0x100>)
 8001226:	fba3 1302 	umull	r1, r3, r3, r2
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	0852      	lsrs	r2, r2, #1
 800122e:	4413      	add	r3, r2
 8001230:	0adb      	lsrs	r3, r3, #11
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <main+0x110>)
 8001234:	6013      	str	r3, [r2, #0]
	    weights1= Vadc2;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <main+0x110>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <main+0x114>)
 8001244:	edc3 7a00 	vstr	s15, [r3]

	    HAL_ADC_Stop(&hadc1);
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <main+0xec>)
 800124a:	f000 fea9 	bl	8001fa0 <HAL_ADC_Stop>
	    HAL_ADC_Stop(&hadc2);
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <main+0xf4>)
 8001250:	f000 fea6 	bl	8001fa0 <HAL_ADC_Stop>

	   trainPerceptron( weights0,weights1);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <main+0x108>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <main+0x114>)
 800125c:	ed93 7a00 	vldr	s14, [r3]
 8001260:	eef0 0a47 	vmov.f32	s1, s14
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	f7ff fea6 	bl	8000fb8 <trainPerceptron>
	    HAL_ADC_Start(&hadc1);
 800126c:	e7aa      	b.n	80011c4 <main+0x40>
 800126e:	bf00      	nop
 8001270:	2000032c 	.word	0x2000032c
 8001274:	200003bc 	.word	0x200003bc
 8001278:	20000374 	.word	0x20000374
 800127c:	20000404 	.word	0x20000404
 8001280:	2000030c 	.word	0x2000030c
 8001284:	00100101 	.word	0x00100101
 8001288:	20000314 	.word	0x20000314
 800128c:	2000031c 	.word	0x2000031c
 8001290:	20000310 	.word	0x20000310
 8001294:	20000318 	.word	0x20000318
 8001298:	20000320 	.word	0x20000320

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	2230      	movs	r2, #48	; 0x30
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f008 faee 	bl	800988c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <SystemClock_Config+0xcc>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <SystemClock_Config+0xcc>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <SystemClock_Config+0xd0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <SystemClock_Config+0xd0>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800130c:	2319      	movs	r3, #25
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001310:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001316:	2302      	movs	r3, #2
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800131a:	2307      	movs	r3, #7
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fe52 	bl	8003fcc <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800132e:	f000 fa1f 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800133e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2105      	movs	r1, #5
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f8b3 	bl	80044bc <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800135c:	f000 fa08 	bl	8001770 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_ADC1_Init+0xb8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <MX_ADC1_Init+0xb8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_ADC1_Init+0xb8>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_ADC1_Init+0xbc>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_ADC1_Init+0xc0>)
 80013a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_ADC1_Init+0xbc>)
 80013a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_ADC1_Init+0xbc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_ADC1_Init+0xbc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_ADC1_Init+0xbc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_ADC1_Init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_ADC1_Init+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_ADC1_Init+0xbc>)
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <MX_ADC1_Init+0xc4>)
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_ADC1_Init+0xbc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_ADC1_Init+0xbc>)
 80013dc:	2201      	movs	r2, #1
 80013de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_ADC1_Init+0xbc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_ADC1_Init+0xbc>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <MX_ADC1_Init+0xbc>)
 80013f0:	f000 fcc0 	bl	8001d74 <HAL_ADC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013fa:	f000 f9b9 	bl	8001770 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_ADC1_Init+0xbc>)
 8001412:	f000 fe91 	bl	8002138 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800141c:	f000 f9a8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	2000032c 	.word	0x2000032c
 8001430:	40012000 	.word	0x40012000
 8001434:	0f000001 	.word	0x0f000001

08001438 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
	__HAL_RCC_ADC2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_ADC2_Init+0xb8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <MX_ADC2_Init+0xb8>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_ADC2_Init+0xb8>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_ADC2_Init+0xbc>)
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <MX_ADC2_Init+0xc0>)
 800146c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_ADC2_Init+0xbc>)
 8001470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001474:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_ADC2_Init+0xbc>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_ADC2_Init+0xbc>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_ADC2_Init+0xbc>)
 8001484:	2201      	movs	r2, #1
 8001486:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_ADC2_Init+0xbc>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_ADC2_Init+0xbc>)
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_ADC2_Init+0xbc>)
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <MX_ADC2_Init+0xc4>)
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_ADC2_Init+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_ADC2_Init+0xbc>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_ADC2_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_ADC2_Init+0xbc>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014b6:	480f      	ldr	r0, [pc, #60]	; (80014f4 <MX_ADC2_Init+0xbc>)
 80014b8:	f000 fc5c 	bl	8001d74 <HAL_ADC_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80014c2:	f000 f955 	bl	8001770 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014c6:	2305      	movs	r3, #5
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_ADC2_Init+0xbc>)
 80014da:	f000 fe2d 	bl	8002138 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80014e4:	f000 f944 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	20000374 	.word	0x20000374
 80014f8:	40012100 	.word	0x40012100
 80014fc:	0f000001 	.word	0x0f000001

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <MX_TIM2_Init+0x100>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a3c      	ldr	r2, [pc, #240]	; (8001600 <MX_TIM2_Init+0x100>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <MX_TIM2_Init+0x100>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <MX_TIM2_Init+0x104>)
 800154e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <MX_TIM2_Init+0x104>)
 8001556:	2264      	movs	r2, #100	; 0x64
 8001558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <MX_TIM2_Init+0x104>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2099999;
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <MX_TIM2_Init+0x104>)
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <MX_TIM2_Init+0x108>)
 8001564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <MX_TIM2_Init+0x104>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MX_TIM2_Init+0x104>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001572:	4824      	ldr	r0, [pc, #144]	; (8001604 <MX_TIM2_Init+0x104>)
 8001574:	f003 f95a 	bl	800482c <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800157e:	f000 f8f7 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	481d      	ldr	r0, [pc, #116]	; (8001604 <MX_TIM2_Init+0x104>)
 8001590:	f003 fb7e 	bl	8004c90 <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800159a:	f000 f8e9 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800159e:	4819      	ldr	r0, [pc, #100]	; (8001604 <MX_TIM2_Init+0x104>)
 80015a0:	f003 f99d 	bl	80048de <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80015aa:	f000 f8e1 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_TIM2_Init+0x104>)
 80015be:	f003 ff3f 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80015c8:	f000 f8d2 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1049999;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_TIM2_Init+0x10c>)
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_TIM2_Init+0x104>)
 80015e4:	f003 fa92 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80015ee:	f000 f8bf 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_TIM2_Init+0x104>)
 80015f4:	f000 f994 	bl	8001920 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	200003bc 	.word	0x200003bc
 8001608:	00200b1f 	.word	0x00200b1f
 800160c:	0010058f 	.word	0x0010058f

08001610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <MX_TIM3_Init+0x104>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <MX_TIM3_Init+0x104>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <MX_TIM3_Init+0x104>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <MX_TIM3_Init+0x108>)
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <MX_TIM3_Init+0x10c>)
 8001660:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_TIM3_Init+0x108>)
 8001664:	f242 7210 	movw	r2, #10000	; 0x2710
 8001668:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <MX_TIM3_Init+0x108>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20999;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <MX_TIM3_Init+0x108>)
 8001672:	f245 2207 	movw	r2, #20999	; 0x5207
 8001676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <MX_TIM3_Init+0x108>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_TIM3_Init+0x108>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <MX_TIM3_Init+0x108>)
 8001686:	f003 f8d1 	bl	800482c <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001690:	f000 f86e 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	4619      	mov	r1, r3
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <MX_TIM3_Init+0x108>)
 80016a2:	f003 faf5 	bl	8004c90 <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80016ac:	f000 f860 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b0:	4819      	ldr	r0, [pc, #100]	; (8001718 <MX_TIM3_Init+0x108>)
 80016b2:	f003 f914 	bl	80048de <HAL_TIM_PWM_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016bc:	f000 f858 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4619      	mov	r1, r3
 80016ce:	4812      	ldr	r0, [pc, #72]	; (8001718 <MX_TIM3_Init+0x108>)
 80016d0:	f003 feb6 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80016da:	f000 f849 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016de:	2360      	movs	r3, #96	; 0x60
 80016e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80016e2:	f642 1303 	movw	r3, #10499	; 0x2903
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <MX_TIM3_Init+0x108>)
 80016f8:	f003 fa08 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001702:	f000 f835 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_TIM3_Init+0x108>)
 8001708:	f000 f90a 	bl	8001920 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	20000404 	.word	0x20000404
 800171c:	40000400 	.word	0x40000400

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_GPIO_Init+0x4c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_GPIO_Init+0x4c>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_GPIO_Init+0x4c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_GPIO_Init+0x4c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <MX_GPIO_Init+0x4c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_GPIO_Init+0x4c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <HAL_ADC_MspInit+0xd8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d128      	bne.n	8001840 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <HAL_ADC_MspInit+0xe0>)
 800183a:	f000 ffad 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800183e:	e02c      	b.n	800189a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <HAL_ADC_MspInit+0xe4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d127      	bne.n	800189a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_ADC_MspInit+0xdc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001882:	2320      	movs	r3, #32
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_ADC_MspInit+0xe0>)
 8001896:	f000 ff7f 	bl	8002798 <HAL_GPIO_Init>
}
 800189a:	bf00      	nop
 800189c:	3730      	adds	r7, #48	; 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40012000 	.word	0x40012000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40012100 	.word	0x40012100

080018b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018e2:	e012      	b.n	800190a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10d      	bne.n	800190a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40000400 	.word	0x40000400

08001920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d11e      	bne.n	8001980 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800195e:	2302      	movs	r3, #2
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800196e:	2301      	movs	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4816      	ldr	r0, [pc, #88]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 800197a:	f000 ff0d 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800197e:	e022      	b.n	80019c6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_TIM_MspPostInit+0xb8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11d      	bne.n	80019c6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b6:	2302      	movs	r3, #2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 80019c2:	f000 fee9 	bl	8002798 <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40000400 	.word	0x40000400

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f960 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <OTG_FS_IRQHandler+0x10>)
 8001a36:	f001 f99b 	bl	8002d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20001938 	.word	0x20001938

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_kill>:

int _kill(int pid, int sig)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5e:	f007 feeb 	bl	8009838 <__errno>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
  return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a86:	e7fe      	b.n	8001a86 <_exit+0x12>

08001a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
  }

  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e009      	b.n	8001ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf1      	blt.n	8001ad4 <_write+0x12>
  }
  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f007 fe50 	bl	8009838 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20020000 	.word	0x20020000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	2000044c 	.word	0x2000044c
 8001bcc:	20002078 	.word	0x20002078

08001bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfa:	490e      	ldr	r1, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c10:	4c0b      	ldr	r4, [pc, #44]	; (8001c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c1e:	f7ff ffd7 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f007 fe0f 	bl	8009844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff faad 	bl	8001184 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8001c38:	0800cebc 	.word	0x0800cebc
  ldr r2, =_sbss
 8001c3c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001c40:	20002074 	.word	0x20002074

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 fd4f 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fd7e 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd67 	bl	800277e <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 fd2f 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000020 	.word	0x20000020
 8001ce4:	20000028 	.word	0x20000028
 8001ce8:	20000024 	.word	0x20000024

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000028 	.word	0x20000028
 8001d10:	20000450 	.word	0x20000450

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000450 	.word	0x20000450

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000028 	.word	0x20000028

08001d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e033      	b.n	8001df2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fd1a 	bl	80017cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fad8 	bl	800237c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
 8001de2:	e001      	b.n	8001de8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Start+0x1a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0b2      	b.n	8001f7c <HAL_ADC_Start+0x180>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d018      	beq.n	8001e5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3c:	4b52      	ldr	r3, [pc, #328]	; (8001f88 <HAL_ADC_Start+0x18c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_ADC_Start+0x190>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9a      	lsrs	r2, r3, #18
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d17a      	bne.n	8001f62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eaa:	d106      	bne.n	8001eba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f023 0206 	bic.w	r2, r3, #6
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_ADC_Start+0x194>)
 8001eca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d12a      	bne.n	8001f38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_ADC_Start+0x198>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d015      	beq.n	8001f18 <HAL_ADC_Start+0x11c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_ADC_Start+0x19c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_Start+0x106>
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_ADC_Start+0x194>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_ADC_Start+0x1a0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d136      	bne.n	8001f7a <HAL_ADC_Start+0x17e>
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_ADC_Start+0x194>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d130      	bne.n	8001f7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d129      	bne.n	8001f7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	e020      	b.n	8001f7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <HAL_ADC_Start+0x198>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d11b      	bne.n	8001f7a <HAL_ADC_Start+0x17e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d114      	bne.n	8001f7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e00b      	b.n	8001f7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000020 	.word	0x20000020
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	40012300 	.word	0x40012300
 8001f94:	40012000 	.word	0x40012000
 8001f98:	40012100 	.word	0x40012100
 8001f9c:	40012200 	.word	0x40012200

08001fa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Stop+0x16>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e021      	b.n	8001ffa <HAL_ADC_Stop+0x5a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d113      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d10b      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e063      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800204c:	f7ff fe62 	bl	8001d14 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002052:	e021      	b.n	8002098 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d01d      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_PollForConversion+0x6c>
 8002062:	f7ff fe57 	bl	8001d14 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d212      	bcs.n	8002098 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d00b      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03d      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d1d6      	bne.n	8002054 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0212 	mvn.w	r2, #18
 80020ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d123      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11f      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1c>
 8002150:	2302      	movs	r3, #2
 8002152:	e105      	b.n	8002360 <HAL_ADC_ConfigChannel+0x228>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d925      	bls.n	80021b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68d9      	ldr	r1, [r3, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	4603      	mov	r3, r0
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4403      	add	r3, r0
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e022      	b.n	80021f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	2207      	movs	r2, #7
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6919      	ldr	r1, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4403      	add	r3, r0
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d824      	bhi.n	8002248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b05      	subs	r3, #5
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
 8002246:	e04c      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	; 0x23
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43da      	mvns	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	400a      	ands	r2, r1
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	; 0x23
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
 8002298:	e023      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b41      	subs	r3, #65	; 0x41
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b41      	subs	r3, #65	; 0x41
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_ADC_ConfigChannel+0x234>)
 80022e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <HAL_ADC_ConfigChannel+0x238>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1cc>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_ADC_ConfigChannel+0x238>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d123      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d003      	beq.n	800231e <HAL_ADC_ConfigChannel+0x1e6>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b11      	cmp	r3, #17
 800231c:	d11b      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d111      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_ADC_ConfigChannel+0x23c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_ADC_ConfigChannel+0x240>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	0c9a      	lsrs	r2, r3, #18
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002348:	e002      	b.n	8002350 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3b01      	subs	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f9      	bne.n	800234a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40012300 	.word	0x40012300
 8002370:	40012000 	.word	0x40012000
 8002374:	20000020 	.word	0x20000020
 8002378:	431bde83 	.word	0x431bde83

0800237c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002384:	4b79      	ldr	r3, [pc, #484]	; (800256c <ADC_Init+0x1f0>)
 8002386:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	4a58      	ldr	r2, [pc, #352]	; (8002570 <ADC_Init+0x1f4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d022      	beq.n	800245a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e00f      	b.n	800247a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002478:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0202 	bic.w	r2, r2, #2
 8002488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e1b      	ldrb	r3, [r3, #24]
 8002494:	005a      	lsls	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	3b01      	subs	r3, #1
 80024d4:	035a      	lsls	r2, r3, #13
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	e007      	b.n	80024f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	3b01      	subs	r3, #1
 800250c:	051a      	lsls	r2, r3, #20
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002532:	025a      	lsls	r2, r3, #9
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	029a      	lsls	r2, r3, #10
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	0f000001 	.word	0x0f000001

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff29 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff3e 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff31 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e16b      	b.n	8002a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 815a 	bne.w	8002a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80b4 	beq.w	8002a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a5f      	ldr	r2, [pc, #380]	; (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a5b      	ldr	r2, [pc, #364]	; (8002aa8 <HAL_GPIO_Init+0x310>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_GPIO_Init+0x314>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02b      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_GPIO_Init+0x318>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_GPIO_Init+0x31c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x21a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4e      	ldr	r2, [pc, #312]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4d      	ldr	r2, [pc, #308]	; (8002ac0 <HAL_GPIO_Init+0x328>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4b      	ldr	r2, [pc, #300]	; (8002ac8 <HAL_GPIO_Init+0x330>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x20a>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00e      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00c      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00a      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x228>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <HAL_GPIO_Init+0x310>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_GPIO_Init+0x334>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a32      	ldr	r2, [pc, #200]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f ae90 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40021c00 	.word	0x40021c00
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad2:	b08f      	sub	sp, #60	; 0x3c
 8002ad4:	af0a      	add	r7, sp, #40	; 0x28
 8002ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e10f      	b.n	8002d02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 fb83 	bl	8009208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2203      	movs	r2, #3
 8002b06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fe1e 	bl	8005762 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	687e      	ldr	r6, [r7, #4]
 8002b2e:	466d      	mov	r5, sp
 8002b30:	f106 0410 	add.w	r4, r6, #16
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b44:	1d33      	adds	r3, r6, #4
 8002b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b48:	6838      	ldr	r0, [r7, #0]
 8002b4a:	f002 fcf5 	bl	8005538 <USB_CoreInit>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0d0      	b.n	8002d02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fe0c 	bl	8005784 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e04a      	b.n	8002c08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	333d      	adds	r3, #61	; 0x3d
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	333c      	adds	r3, #60	; 0x3c
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3344      	adds	r3, #68	; 0x44
 8002bae:	4602      	mov	r2, r0
 8002bb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3340      	adds	r3, #64	; 0x40
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3348      	adds	r3, #72	; 0x48
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334c      	adds	r3, #76	; 0x4c
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3354      	adds	r3, #84	; 0x54
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3af      	bcc.n	8002b72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e044      	b.n	8002ca2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3b5      	bcc.n	8002c18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	687e      	ldr	r6, [r7, #4]
 8002cb4:	466d      	mov	r5, sp
 8002cb6:	f106 0410 	add.w	r4, r6, #16
 8002cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cca:	1d33      	adds	r3, r6, #4
 8002ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	f002 fda4 	bl	800581c <USB_DevInit>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00d      	b.n	8002d02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fef3 	bl	8006ae6 <USB_DevDisconnect>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PCD_Start+0x1c>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e020      	b.n	8002d68 <HAL_PCD_Start+0x5e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d109      	bne.n	8002d4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fcf6 	bl	8005740 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fea3 	bl	8006aa4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b08d      	sub	sp, #52	; 0x34
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 ff61 	bl	8006c4e <USB_GetMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 848a 	bne.w	80036a8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fec5 	bl	8006b28 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8480 	beq.w	80036a6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 feb2 	bl	8006b28 <USB_ReadInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 0202 	and.w	r2, r2, #2
 8002ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fea0 	bl	8006b28 <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d161      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0210 	bic.w	r2, r2, #16
 8002e00:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	0c5b      	lsrs	r3, r3, #17
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d124      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d035      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a38      	ldr	r0, [r7, #32]
 8002e4e:	f003 fcd7 	bl	8006800 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e5e:	441a      	add	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e70:	441a      	add	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
 8002e76:	e016      	b.n	8002ea6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	0c5b      	lsrs	r3, r3, #17
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d110      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6a38      	ldr	r0, [r7, #32]
 8002e90:	f003 fcb6 	bl	8006800 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea0:	441a      	add	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0210 	orr.w	r2, r2, #16
 8002eb4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fe34 	bl	8006b28 <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eca:	f040 80a7 	bne.w	800301c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fe39 	bl	8006b4e <USB_ReadDevAllOutEpInterrupt>
 8002edc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ede:	e099      	b.n	8003014 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 808e 	beq.w	8003008 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fe5d 	bl	8006bb6 <USB_ReadDevOutEPInterrupt>
 8002efc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	2301      	movs	r3, #1
 8002f18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fec3 	bl	8003ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 ff99 	bl	8003e78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2310      	movs	r3, #16
 8002f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d030      	beq.n	8002fce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d109      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	78db      	ldrb	r3, [r3, #3]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f006 fa2c 	bl	8009414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2302      	movs	r3, #2
 8002fcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003006:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	3301      	adds	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f af62 	bne.w	8002ee0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fd81 	bl	8006b28 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003030:	f040 80db 	bne.w	80031ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fda2 	bl	8006b82 <USB_ReadDevAllInEpInterrupt>
 800303e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003044:	e0cd      	b.n	80031e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80c2 	beq.w	80031d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fdc8 	bl	8006bf2 <USB_ReadDevInEPInterrupt>
 8003062:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d057      	beq.n	800311e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	2201      	movs	r2, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	69f9      	ldr	r1, [r7, #28]
 800308a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800308e:	4013      	ands	r3, r2
 8003090:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309e:	461a      	mov	r2, r3
 80030a0:	2301      	movs	r3, #1
 80030a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d132      	bne.n	8003112 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334c      	adds	r3, #76	; 0x4c
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	3348      	adds	r3, #72	; 0x48
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4419      	add	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	334c      	adds	r3, #76	; 0x4c
 80030e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d113      	bne.n	8003112 <HAL_PCD_IRQHandler+0x3a2>
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3354      	adds	r3, #84	; 0x54
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d108      	bne.n	8003112 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800310a:	461a      	mov	r2, r3
 800310c:	2101      	movs	r1, #1
 800310e:	f003 fdcf 	bl	8006cb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f006 f8f6 	bl	800930a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003134:	461a      	mov	r2, r3
 8003136:	2308      	movs	r3, #8
 8003138:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	2310      	movs	r3, #16
 8003154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316c:	461a      	mov	r2, r3
 800316e:	2340      	movs	r3, #64	; 0x40
 8003170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800317c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800317e:	6a38      	ldr	r0, [r7, #32]
 8003180:	f002 fcb0 	bl	8005ae4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3338      	adds	r3, #56	; 0x38
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d108      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f006 f943 	bl	8009438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	461a      	mov	r2, r3
 80031c0:	2302      	movs	r3, #2
 80031c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fcdb 	bl	8003b8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f af2e 	bne.w	8003046 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc9a 	bl	8006b28 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fe:	d122      	bne.n	8003246 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fec3 	bl	8003fb4 <HAL_PCDEx_LPM_Callback>
 800322e:	e002      	b.n	8003236 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f006 f8e1 	bl	80093f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fc6c 	bl	8006b28 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325a:	d112      	bne.n	8003282 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d102      	bne.n	8003272 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f006 f89d 	bl	80093ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003280:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fc4e 	bl	8006b28 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	f040 80b7 	bne.w	8003408 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2110      	movs	r1, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fc15 	bl	8005ae4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032be:	e046      	b.n	800334e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	461a      	mov	r2, r3
 80032ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003306:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	440a      	add	r2, r1
 800331e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003326:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003346:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	3301      	adds	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d3b3      	bcc.n	80032c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003366:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800336a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d016      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003384:	f043 030b 	orr.w	r3, r3, #11
 8003388:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339a:	f043 030b 	orr.w	r3, r3, #11
 800339e:	6453      	str	r3, [r2, #68]	; 0x44
 80033a0:	e015      	b.n	80033ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f043 030b 	orr.w	r3, r3, #11
 80033cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033f2:	461a      	mov	r2, r3
 80033f4:	f003 fc5c 	bl	8006cb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 fb8b 	bl	8006b28 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341c:	d124      	bne.n	8003468 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fc21 	bl	8006c6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f002 fbd6 	bl	8005bde <USB_GetDevSpeed>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681c      	ldr	r4, [r3, #0]
 800343e:	f001 f9e9 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8003442:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	4620      	mov	r0, r4
 800344e:	f002 f8d5 	bl	80055fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f005 ff81 	bl	800935a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fb5b 	bl	8006b28 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d10a      	bne.n	8003492 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f005 ff5e 	bl	800933e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f002 0208 	and.w	r2, r2, #8
 8003490:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f003 fb46 	bl	8006b28 <USB_ReadInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b80      	cmp	r3, #128	; 0x80
 80034a4:	d122      	bne.n	80034ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b2:	2301      	movs	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e014      	b.n	80034e2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fb27 	bl	8003b2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	3301      	adds	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3e5      	bcc.n	80034b8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fb19 	bl	8006b28 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003500:	d13b      	bne.n	800357a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003502:	2301      	movs	r3, #1
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	e02b      	b.n	8003560 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3340      	adds	r3, #64	; 0x40
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d115      	bne.n	800355a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800352e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	da12      	bge.n	800355a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	333f      	adds	r3, #63	; 0x3f
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fae8 	bl	8003b2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	429a      	cmp	r2, r3
 8003568:	d3ce      	bcc.n	8003508 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fad2 	bl	8006b28 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358e:	d155      	bne.n	800363c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	2301      	movs	r3, #1
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e045      	b.n	8003622 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d12e      	bne.n	800361c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	da2b      	bge.n	800361c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d121      	bne.n	800361c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003618:	6053      	str	r3, [r2, #4]
            break;
 800361a:	e007      	b.n	800362c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	3301      	adds	r3, #1
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	429a      	cmp	r2, r3
 800362a:	d3b4      	bcc.n	8003596 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fa71 	bl	8006b28 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d10a      	bne.n	8003668 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 ff02 	bl	800945c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fa5b 	bl	8006b28 <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d115      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f005 fef2 	bl	8009478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	e000      	b.n	80036a8 <HAL_PCD_IRQHandler+0x938>
      return;
 80036a6:	bf00      	nop
    }
  }
}
 80036a8:	3734      	adds	r7, #52	; 0x34
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}

080036ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_SetAddress+0x1a>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e013      	b.n	80036f0 <HAL_PCD_SetAddress+0x42>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 f9b9 	bl	8006a58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	70fb      	strb	r3, [r7, #3]
 800370a:	460b      	mov	r3, r1
 800370c:	803b      	strh	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371a:	2b00      	cmp	r3, #0
 800371c:	da0f      	bge.n	800373e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3338      	adds	r3, #56	; 0x38
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
 800373c:	e00f      	b.n	800375e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800376a:	883a      	ldrh	r2, [r7, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	78ba      	ldrb	r2, [r7, #2]
 8003774:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003788:	78bb      	ldrb	r3, [r7, #2]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d102      	bne.n	8003794 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_PCD_EP_Open+0xaa>
 800379e:	2302      	movs	r3, #2
 80037a0:	e00e      	b.n	80037c0 <HAL_PCD_EP_Open+0xc8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fa39 	bl	8005c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037be:	7afb      	ldrb	r3, [r7, #11]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da0f      	bge.n	80037fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3338      	adds	r3, #56	; 0x38
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	705a      	strb	r2, [r3, #1]
 80037fa:	e00f      	b.n	800381c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_Close+0x6e>
 8003832:	2302      	movs	r3, #2
 8003834:	e00e      	b.n	8003854 <HAL_PCD_EP_Close+0x8c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f002 fa77 	bl	8005d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	460b      	mov	r3, r1
 800386a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386c:	7afb      	ldrb	r3, [r7, #11]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	f002 fd56 	bl	8006380 <USB_EP0StartXfer>
 80038d4:	e008      	b.n	80038e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	f002 fb04 	bl	8005ef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003914:	681b      	ldr	r3, [r3, #0]
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	460b      	mov	r3, r1
 8003930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	3338      	adds	r3, #56	; 0x38
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2201      	movs	r2, #1
 8003960:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	f002 fcf4 	bl	8006380 <USB_EP0StartXfer>
 8003998:	e008      	b.n	80039ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	f002 faa2 	bl	8005ef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d901      	bls.n	80039d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e050      	b.n	8003a76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3338      	adds	r3, #56	; 0x38
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00d      	b.n	8003a18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_PCD_EP_SetStall+0x82>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e01e      	b.n	8003a76 <HAL_PCD_EP_SetStall+0xc0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 ff32 	bl	80068b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	b2d9      	uxtb	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a66:	461a      	mov	r2, r3
 8003a68:	f003 f922 	bl	8006cb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d901      	bls.n	8003a9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e042      	b.n	8003b22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	da0f      	bge.n	8003ac4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 020f 	and.w	r2, r3, #15
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3338      	adds	r3, #56	; 0x38
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	705a      	strb	r2, [r3, #1]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_EP_ClrStall+0x86>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e00e      	b.n	8003b22 <HAL_PCD_EP_ClrStall+0xa4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 ff3a 	bl	800698c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	da0c      	bge.n	8003b58 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	3338      	adds	r3, #56	; 0x38
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	3304      	adds	r3, #4
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e00c      	b.n	8003b72 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 fd59 	bl	8006630 <USB_EPStopXfer>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3338      	adds	r3, #56	; 0x38
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d901      	bls.n	8003bc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e06c      	b.n	8003c9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d902      	bls.n	8003be0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3303      	adds	r3, #3
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be8:	e02b      	b.n	8003c42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d902      	bls.n	8003c06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6919      	ldr	r1, [r3, #16]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4603      	mov	r3, r0
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f002 fdad 	bl	8006784 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	441a      	add	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d809      	bhi.n	8003c6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d203      	bcs.n	8003c6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1be      	bne.n	8003bea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d811      	bhi.n	8003c9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c98:	4013      	ands	r3, r2
 8003c9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	333c      	adds	r3, #60	; 0x3c
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d17b      	bne.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4a61      	ldr	r2, [pc, #388]	; (8003e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f240 80b9 	bls.w	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80b3 	beq.w	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d10:	6093      	str	r3, [r2, #8]
 8003d12:	e0a7      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	e098      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 8093 	bne.w	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a4b      	ldr	r2, [pc, #300]	; (8003e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d90f      	bls.n	8003d66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	6093      	str	r3, [r2, #8]
 8003d64:	e07e      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	0159      	lsls	r1, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d114      	bne.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db0:	461a      	mov	r2, r3
 8003db2:	2101      	movs	r1, #1
 8003db4:	f002 ff7c 	bl	8006cb0 <USB_EP0_OutStart>
 8003db8:	e006      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f005 fa80 	bl	80092d4 <HAL_PCD_DataOutStageCallback>
 8003dd4:	e046      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d124      	bne.n	8003e28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	e032      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2320      	movs	r3, #32
 8003e18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f005 fa57 	bl	80092d4 <HAL_PCD_DataOutStageCallback>
 8003e26:	e01d      	b.n	8003e64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d114      	bne.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e50:	461a      	mov	r2, r3
 8003e52:	2100      	movs	r1, #0
 8003e54:	f002 ff2c 	bl	8006cb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f005 fa38 	bl	80092d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	4f54300a 	.word	0x4f54300a
 8003e74:	4f54310a 	.word	0x4f54310a

08003e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	333c      	adds	r3, #60	; 0x3c
 8003e90:	3304      	adds	r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d90e      	bls.n	8003ecc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f005 f9ef 	bl	80092b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d90c      	bls.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003eec:	461a      	mov	r2, r3
 8003eee:	2101      	movs	r1, #1
 8003ef0:	f002 fede 	bl	8006cb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	4f54300a 	.word	0x4f54300a

08003f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
 8003f10:	4613      	mov	r3, r2
 8003f12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f22:	883b      	ldrh	r3, [r7, #0]
 8003f24:	0419      	lsls	r1, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f30:	e028      	b.n	8003f84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e00d      	b.n	8003f62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	3340      	adds	r3, #64	; 0x40
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4413      	add	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3ec      	bcc.n	8003f46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f6c:	883b      	ldrh	r3, [r7, #0]
 8003f6e:	0418      	lsls	r0, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4302      	orrs	r2, r0
 8003f7c:	3340      	adds	r3, #64	; 0x40
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e267      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b85      	ldr	r3, [pc, #532]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b82      	ldr	r3, [pc, #520]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b7e      	ldr	r3, [pc, #504]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d157      	bne.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e242      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x74>
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a75      	ldr	r2, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b70      	ldr	r3, [pc, #448]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6f      	ldr	r2, [pc, #444]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b6d      	ldr	r3, [pc, #436]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6c      	ldr	r2, [pc, #432]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004064:	4b69      	ldr	r3, [pc, #420]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a68      	ldr	r2, [pc, #416]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a65      	ldr	r2, [pc, #404]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd fe46 	bl	8001d14 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fd fe42 	bl	8001d14 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e207      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd fe32 	bl	8001d14 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fd fe2e 	bl	8001d14 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1f3      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	4b4a      	ldr	r3, [pc, #296]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b44      	ldr	r3, [pc, #272]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1c7      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4937      	ldr	r1, [pc, #220]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b34      	ldr	r3, [pc, #208]	; (8004210 <HAL_RCC_OscConfig+0x244>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fd fde7 	bl	8001d14 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414a:	f7fd fde3 	bl	8001d14 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1a8      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b28      	ldr	r3, [pc, #160]	; (800420c <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4925      	ldr	r1, [pc, #148]	; (800420c <HAL_RCC_OscConfig+0x240>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_RCC_OscConfig+0x244>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd fdc6 	bl	8001d14 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418c:	f7fd fdc2 	bl	8001d14 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e187      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d036      	beq.n	8004224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_RCC_OscConfig+0x248>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fda6 	bl	8001d14 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fd fda2 	bl	8001d14 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e167      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_OscConfig+0x240>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x200>
 80041ea:	e01b      	b.n	8004224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_OscConfig+0x248>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fd fd8f 	bl	8001d14 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e00e      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fd8b 	bl	8001d14 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d907      	bls.n	8004218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e150      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
 800420c:	40023800 	.word	0x40023800
 8004210:	42470000 	.word	0x42470000
 8004214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	4b88      	ldr	r3, [pc, #544]	; (800443c <HAL_RCC_OscConfig+0x470>)
 800421a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ea      	bne.n	80041fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8097 	beq.w	8004360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004236:	4b81      	ldr	r3, [pc, #516]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	4b7d      	ldr	r3, [pc, #500]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a7c      	ldr	r2, [pc, #496]	; (800443c <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b7a      	ldr	r3, [pc, #488]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b77      	ldr	r3, [pc, #476]	; (8004440 <HAL_RCC_OscConfig+0x474>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426e:	4b74      	ldr	r3, [pc, #464]	; (8004440 <HAL_RCC_OscConfig+0x474>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a73      	ldr	r2, [pc, #460]	; (8004440 <HAL_RCC_OscConfig+0x474>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427a:	f7fd fd4b 	bl	8001d14 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fd fd47 	bl	8001d14 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e10c      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <HAL_RCC_OscConfig+0x474>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x2ea>
 80042a8:	4b64      	ldr	r3, [pc, #400]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	e01c      	b.n	80042f0 <HAL_RCC_OscConfig+0x324>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x30c>
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a5e      	ldr	r2, [pc, #376]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ca:	4b5c      	ldr	r3, [pc, #368]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a5b      	ldr	r2, [pc, #364]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0x324>
 80042d8:	4b58      	ldr	r3, [pc, #352]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a57      	ldr	r2, [pc, #348]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	4b55      	ldr	r3, [pc, #340]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80042ea:	f023 0304 	bic.w	r3, r3, #4
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d015      	beq.n	8004324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd fd0c 	bl	8001d14 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fd fd08 	bl	8001d14 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0cb      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	4b49      	ldr	r3, [pc, #292]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ee      	beq.n	8004300 <HAL_RCC_OscConfig+0x334>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004324:	f7fd fcf6 	bl	8001d14 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fd fcf2 	bl	8001d14 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0b5      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004342:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ee      	bne.n	800432c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a1 	beq.w	80044ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_OscConfig+0x470>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b08      	cmp	r3, #8
 8004374:	d05c      	beq.n	8004430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d141      	bne.n	8004402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <HAL_RCC_OscConfig+0x478>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd fcc6 	bl	8001d14 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fcc2 	bl	8001d14 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e087      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	3b01      	subs	r3, #1
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	491b      	ldr	r1, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <HAL_RCC_OscConfig+0x478>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fd fc9b 	bl	8001d14 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fd fc97 	bl	8001d14 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e05c      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_RCC_OscConfig+0x470>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x416>
 8004400:	e054      	b.n	80044ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <HAL_RCC_OscConfig+0x478>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd fc84 	bl	8001d14 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fc80 	bl	8001d14 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e045      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCC_OscConfig+0x470>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x444>
 800442e:	e03d      	b.n	80044ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e038      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
 800443c:	40023800 	.word	0x40023800
 8004440:	40007000 	.word	0x40007000
 8004444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d028      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d121      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d11a      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800447e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004480:	4293      	cmp	r3, r2
 8004482:	d111      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cc      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90c      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d044      	beq.n	80045dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d119      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458a:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e067      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4934      	ldr	r1, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ac:	f7fd fbb2 	bl	8001d14 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fd fbae 	bl	8001d14 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fb12 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	0800ca6c 	.word	0x0800ca6c
 8004680:	20000020 	.word	0x20000020
 8004684:	20000024 	.word	0x20000024

08004688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b090      	sub	sp, #64	; 0x40
 800468e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	2300      	movs	r3, #0
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004698:	2300      	movs	r3, #0
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	f200 80a1 	bhi.w	80047f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x34>
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ba:	e09b      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b53      	ldr	r3, [pc, #332]	; (800480c <HAL_RCC_GetSysClockFreq+0x184>)
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046c0:	e09b      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046c6:	e098      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c8:	4b4f      	ldr	r3, [pc, #316]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d2:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d028      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b4a      	ldr	r3, [pc, #296]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	2200      	movs	r2, #0
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	627a      	str	r2, [r7, #36]	; 0x24
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046f0:	2100      	movs	r1, #0
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f4:	fb03 f201 	mul.w	r2, r3, r1
 80046f8:	2300      	movs	r3, #0
 80046fa:	fb00 f303 	mul.w	r3, r0, r3
 80046fe:	4413      	add	r3, r2
 8004700:	4a43      	ldr	r2, [pc, #268]	; (8004810 <HAL_RCC_GetSysClockFreq+0x188>)
 8004702:	fba0 1202 	umull	r1, r2, r0, r2
 8004706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004708:	460a      	mov	r2, r1
 800470a:	62ba      	str	r2, [r7, #40]	; 0x28
 800470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470e:	4413      	add	r3, r2
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2200      	movs	r2, #0
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800471e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004722:	f7fc fa73 	bl	8000c0c <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4613      	mov	r3, r2
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472e:	e053      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004730:	4b35      	ldr	r3, [pc, #212]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	2200      	movs	r2, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	617a      	str	r2, [r7, #20]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004742:	f04f 0b00 	mov.w	fp, #0
 8004746:	4652      	mov	r2, sl
 8004748:	465b      	mov	r3, fp
 800474a:	f04f 0000 	mov.w	r0, #0
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	0159      	lsls	r1, r3, #5
 8004754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004758:	0150      	lsls	r0, r2, #5
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	ebb2 080a 	subs.w	r8, r2, sl
 8004762:	eb63 090b 	sbc.w	r9, r3, fp
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004772:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004776:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800477a:	ebb2 0408 	subs.w	r4, r2, r8
 800477e:	eb63 0509 	sbc.w	r5, r3, r9
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	00eb      	lsls	r3, r5, #3
 800478c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004790:	00e2      	lsls	r2, r4, #3
 8004792:	4614      	mov	r4, r2
 8004794:	461d      	mov	r5, r3
 8004796:	eb14 030a 	adds.w	r3, r4, sl
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	eb45 030b 	adc.w	r3, r5, fp
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	2200      	movs	r2, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047cc:	f7fc fa1e 	bl	8000c0c <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0x180>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetSysClockFreq+0x184>)
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3740      	adds	r7, #64	; 0x40
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	017d7840 	.word	0x017d7840

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000020 	.word	0x20000020

0800482c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e041      	b.n	80048c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f839 	bl	80048ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 fad8 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e041      	b.n	8004974 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fc ffd5 	bl	80018b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f000 fa7f 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e015      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07c      	b.n	8004ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0x82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x92>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fce0 	bl	80053f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <HAL_TIM_PWM_Start+0x174>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_TIM_PWM_Start+0xcc>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <HAL_TIM_PWM_Start+0x178>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_TIM_PWM_Start+0xd0>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_PWM_Start+0xd2>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <HAL_TIM_PWM_Start+0x174>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d022      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d01d      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <HAL_TIM_PWM_Start+0x17c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_TIM_PWM_Start+0x180>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <HAL_TIM_PWM_Start+0x184>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_TIM_PWM_Start+0x178>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <HAL_TIM_PWM_Start+0x188>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <HAL_TIM_PWM_Start+0x18c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d111      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b06      	cmp	r3, #6
 8004ac2:	d010      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	e007      	b.n	8004ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40001800 	.word	0x40001800

08004b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0ae      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b0c      	cmp	r3, #12
 8004b36:	f200 809f 	bhi.w	8004c78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004c79 	.word	0x08004c79
 8004b48:	08004c79 	.word	0x08004c79
 8004b4c:	08004c79 	.word	0x08004c79
 8004b50:	08004bb5 	.word	0x08004bb5
 8004b54:	08004c79 	.word	0x08004c79
 8004b58:	08004c79 	.word	0x08004c79
 8004b5c:	08004c79 	.word	0x08004c79
 8004b60:	08004bf7 	.word	0x08004bf7
 8004b64:	08004c79 	.word	0x08004c79
 8004b68:	08004c79 	.word	0x08004c79
 8004b6c:	08004c79 	.word	0x08004c79
 8004b70:	08004c37 	.word	0x08004c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f9f0 	bl	8004f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0208 	orr.w	r2, r2, #8
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	619a      	str	r2, [r3, #24]
      break;
 8004bb2:	e064      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fa40 	bl	8005040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	619a      	str	r2, [r3, #24]
      break;
 8004bf4:	e043      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fa95 	bl	800512c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0208 	orr.w	r2, r2, #8
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0204 	bic.w	r2, r2, #4
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	61da      	str	r2, [r3, #28]
      break;
 8004c34:	e023      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fae9 	bl	8005214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69d9      	ldr	r1, [r3, #28]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	021a      	lsls	r2, r3, #8
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	61da      	str	r2, [r3, #28]
      break;
 8004c76:	e002      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_ConfigClockSource+0x1c>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0b4      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x186>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d03e      	beq.n	8004d64 <HAL_TIM_ConfigClockSource+0xd4>
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	f200 8087 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	f000 8086 	beq.w	8004e02 <HAL_TIM_ConfigClockSource+0x172>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d87f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b70      	cmp	r3, #112	; 0x70
 8004cfe:	d01a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xa6>
 8004d00:	2b70      	cmp	r3, #112	; 0x70
 8004d02:	d87b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d050      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x11a>
 8004d08:	2b60      	cmp	r3, #96	; 0x60
 8004d0a:	d877      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b50      	cmp	r3, #80	; 0x50
 8004d0e:	d03c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0xfa>
 8004d10:	2b50      	cmp	r3, #80	; 0x50
 8004d12:	d873      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d058      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x13a>
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d86f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b30      	cmp	r3, #48	; 0x30
 8004d1e:	d064      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d86b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d060      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d867      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d05a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	e062      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f000 fb35 	bl	80053b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
      break;
 8004d62:	e04f      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f000 fb1e 	bl	80053b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e03c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fa92 	bl	80052c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2150      	movs	r1, #80	; 0x50
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 faeb 	bl	800537e <TIM_ITRx_SetConfig>
      break;
 8004da8:	e02c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fab1 	bl	800531e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2160      	movs	r1, #96	; 0x60
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fadb 	bl	800537e <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e01c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fa72 	bl	80052c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 facb 	bl	800537e <TIM_ITRx_SetConfig>
      break;
 8004de8:	e00c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f000 fac2 	bl	800537e <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e003      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d027      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d023      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d017      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <TIM_Base_SetConfig+0x128>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <TIM_Base_SetConfig+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <TIM_Base_SetConfig+0x134>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <TIM_Base_SetConfig+0x138>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40001800 	.word	0x40001800
 8004f58:	40001c00 	.word	0x40001c00
 8004f5c:	40002000 	.word	0x40002000

08004f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0302 	bic.w	r3, r3, #2
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a20      	ldr	r2, [pc, #128]	; (8005038 <TIM_OC1_SetConfig+0xd8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC1_SetConfig+0x64>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <TIM_OC1_SetConfig+0xdc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10c      	bne.n	8004fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0308 	bic.w	r3, r3, #8
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <TIM_OC1_SetConfig+0xd8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC1_SetConfig+0x8e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC1_SetConfig+0xdc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d111      	bne.n	8005012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010000 	.word	0x40010000
 800503c:	40010400 	.word	0x40010400

08005040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f023 0210 	bic.w	r2, r3, #16
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a22      	ldr	r2, [pc, #136]	; (8005124 <TIM_OC2_SetConfig+0xe4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_OC2_SetConfig+0x68>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <TIM_OC2_SetConfig+0xe8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d10d      	bne.n	80050c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <TIM_OC2_SetConfig+0xe4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC2_SetConfig+0x94>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a16      	ldr	r2, [pc, #88]	; (8005128 <TIM_OC2_SetConfig+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d113      	bne.n	80050fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <TIM_OC3_SetConfig+0xe0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_OC3_SetConfig+0x66>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a20      	ldr	r2, [pc, #128]	; (8005210 <TIM_OC3_SetConfig+0xe4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10d      	bne.n	80051ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a16      	ldr	r2, [pc, #88]	; (800520c <TIM_OC3_SetConfig+0xe0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_OC3_SetConfig+0x92>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a15      	ldr	r2, [pc, #84]	; (8005210 <TIM_OC3_SetConfig+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400

08005214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800525e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <TIM_OC4_SetConfig+0xa4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC4_SetConfig+0x68>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a11      	ldr	r2, [pc, #68]	; (80052bc <TIM_OC4_SetConfig+0xa8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40010400 	.word	0x40010400

080052c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0201 	bic.w	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 030a 	bic.w	r3, r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531e:	b480      	push	{r7}
 8005320:	b087      	sub	sp, #28
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0210 	bic.w	r2, r3, #16
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800535a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	f043 0307 	orr.w	r3, r3, #7
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	609a      	str	r2, [r3, #8]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2201      	movs	r2, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	43db      	mvns	r3, r3
 8005416:	401a      	ands	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	431a      	orrs	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e05a      	b.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a17      	ldr	r2, [pc, #92]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10c      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40010400 	.word	0x40010400
 8005530:	40014000 	.word	0x40014000
 8005534:	40001800 	.word	0x40001800

08005538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005538:	b084      	sub	sp, #16
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	f107 001c 	add.w	r0, r7, #28
 8005546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d122      	bne.n	8005596 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fbee 	bl	8006d6c <USB_CoreReset>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	e01a      	b.n	80055cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fbe2 	bl	8006d6c <USB_CoreReset>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
 80055be:	e005      	b.n	80055cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10b      	bne.n	80055ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f043 0206 	orr.w	r2, r3, #6
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055f6:	b004      	add	sp, #16
 80055f8:	4770      	bx	lr
	...

080055fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4613      	mov	r3, r2
 8005608:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d165      	bne.n	80056dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4a41      	ldr	r2, [pc, #260]	; (8005718 <USB_SetTurnaroundTime+0x11c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d906      	bls.n	8005626 <USB_SetTurnaroundTime+0x2a>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4a40      	ldr	r2, [pc, #256]	; (800571c <USB_SetTurnaroundTime+0x120>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d202      	bcs.n	8005626 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005620:	230f      	movs	r3, #15
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e062      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a3c      	ldr	r2, [pc, #240]	; (800571c <USB_SetTurnaroundTime+0x120>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d306      	bcc.n	800563c <USB_SetTurnaroundTime+0x40>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <USB_SetTurnaroundTime+0x124>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d202      	bcs.n	800563c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005636:	230e      	movs	r3, #14
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e057      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a38      	ldr	r2, [pc, #224]	; (8005720 <USB_SetTurnaroundTime+0x124>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d306      	bcc.n	8005652 <USB_SetTurnaroundTime+0x56>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4a37      	ldr	r2, [pc, #220]	; (8005724 <USB_SetTurnaroundTime+0x128>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d202      	bcs.n	8005652 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800564c:	230d      	movs	r3, #13
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e04c      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a33      	ldr	r2, [pc, #204]	; (8005724 <USB_SetTurnaroundTime+0x128>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d306      	bcc.n	8005668 <USB_SetTurnaroundTime+0x6c>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4a32      	ldr	r2, [pc, #200]	; (8005728 <USB_SetTurnaroundTime+0x12c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d802      	bhi.n	8005668 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005662:	230c      	movs	r3, #12
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e041      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <USB_SetTurnaroundTime+0x12c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d906      	bls.n	800567e <USB_SetTurnaroundTime+0x82>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <USB_SetTurnaroundTime+0x130>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d802      	bhi.n	800567e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005678:	230b      	movs	r3, #11
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e036      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a2a      	ldr	r2, [pc, #168]	; (800572c <USB_SetTurnaroundTime+0x130>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d906      	bls.n	8005694 <USB_SetTurnaroundTime+0x98>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4a29      	ldr	r2, [pc, #164]	; (8005730 <USB_SetTurnaroundTime+0x134>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d802      	bhi.n	8005694 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800568e:	230a      	movs	r3, #10
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e02b      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4a26      	ldr	r2, [pc, #152]	; (8005730 <USB_SetTurnaroundTime+0x134>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d906      	bls.n	80056aa <USB_SetTurnaroundTime+0xae>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4a25      	ldr	r2, [pc, #148]	; (8005734 <USB_SetTurnaroundTime+0x138>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d202      	bcs.n	80056aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80056a4:	2309      	movs	r3, #9
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e020      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <USB_SetTurnaroundTime+0x138>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d306      	bcc.n	80056c0 <USB_SetTurnaroundTime+0xc4>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <USB_SetTurnaroundTime+0x13c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d802      	bhi.n	80056c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056ba:	2308      	movs	r3, #8
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e015      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <USB_SetTurnaroundTime+0x13c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d906      	bls.n	80056d6 <USB_SetTurnaroundTime+0xda>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a1c      	ldr	r2, [pc, #112]	; (800573c <USB_SetTurnaroundTime+0x140>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d202      	bcs.n	80056d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056d0:	2307      	movs	r3, #7
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e00a      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056d6:	2306      	movs	r3, #6
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e007      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056e2:	2309      	movs	r3, #9
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e001      	b.n	80056ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056e8:	2309      	movs	r3, #9
 80056ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	029b      	lsls	r3, r3, #10
 8005700:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00d8acbf 	.word	0x00d8acbf
 800571c:	00e4e1c0 	.word	0x00e4e1c0
 8005720:	00f42400 	.word	0x00f42400
 8005724:	01067380 	.word	0x01067380
 8005728:	011a499f 	.word	0x011a499f
 800572c:	01312cff 	.word	0x01312cff
 8005730:	014ca43f 	.word	0x014ca43f
 8005734:	016e3600 	.word	0x016e3600
 8005738:	01a6ab1f 	.word	0x01a6ab1f
 800573c:	01e84800 	.word	0x01e84800

08005740 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d115      	bne.n	80057d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7fc faba 	bl	8001d2c <HAL_Delay>
      ms++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fa45 	bl	8006c4e <USB_GetMode>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d01e      	beq.n	8005808 <USB_SetCurrentMode+0x84>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b31      	cmp	r3, #49	; 0x31
 80057ce:	d9f0      	bls.n	80057b2 <USB_SetCurrentMode+0x2e>
 80057d0:	e01a      	b.n	8005808 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d115      	bne.n	8005804 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057e4:	2001      	movs	r0, #1
 80057e6:	f7fc faa1 	bl	8001d2c <HAL_Delay>
      ms++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fa2c 	bl	8006c4e <USB_GetMode>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <USB_SetCurrentMode+0x84>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b31      	cmp	r3, #49	; 0x31
 8005800:	d9f0      	bls.n	80057e4 <USB_SetCurrentMode+0x60>
 8005802:	e001      	b.n	8005808 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e005      	b.n	8005814 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b32      	cmp	r3, #50	; 0x32
 800580c:	d101      	bne.n	8005812 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800581c:	b084      	sub	sp, #16
 800581e:	b580      	push	{r7, lr}
 8005820:	b086      	sub	sp, #24
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800582a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	e009      	b.n	8005850 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3340      	adds	r3, #64	; 0x40
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	2200      	movs	r2, #0
 8005848:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3301      	adds	r3, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b0e      	cmp	r3, #14
 8005854:	d9f2      	bls.n	800583c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11c      	bne.n	8005896 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
 8005894:	e00b      	b.n	80058ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	4619      	mov	r1, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	461a      	mov	r2, r3
 80058ca:	680b      	ldr	r3, [r1, #0]
 80058cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10c      	bne.n	80058ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058da:	2100      	movs	r1, #0
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f965 	bl	8005bac <USB_SetDevSpeed>
 80058e2:	e008      	b.n	80058f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058e4:	2101      	movs	r1, #1
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f960 	bl	8005bac <USB_SetDevSpeed>
 80058ec:	e003      	b.n	80058f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058ee:	2103      	movs	r1, #3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f95b 	bl	8005bac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058f6:	2110      	movs	r1, #16
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f8f3 	bl	8005ae4 <USB_FlushTxFifo>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f91f 	bl	8005b4c <USB_FlushRxFifo>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	461a      	mov	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	461a      	mov	r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e043      	b.n	80059ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005958:	d118      	bne.n	800598c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	461a      	mov	r2, r3
 800596e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e013      	b.n	800599e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	461a      	mov	r2, r3
 8005984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e008      	b.n	800599e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	461a      	mov	r2, r3
 800599a:	2300      	movs	r3, #0
 800599c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	461a      	mov	r2, r3
 80059be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3301      	adds	r3, #1
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3b7      	bcc.n	8005942 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	e043      	b.n	8005a60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ee:	d118      	bne.n	8005a22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	461a      	mov	r2, r3
 8005a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e013      	b.n	8005a34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e008      	b.n	8005a34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	461a      	mov	r2, r3
 8005a42:	2300      	movs	r3, #0
 8005a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	461a      	mov	r2, r3
 8005a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3b7      	bcc.n	80059d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f043 0210 	orr.w	r2, r3, #16
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <USB_DevInit+0x2c4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f043 0208 	orr.w	r2, r3, #8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac8:	f043 0304 	orr.w	r3, r3, #4
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005adc:	b004      	add	sp, #16
 8005ade:	4770      	bx	lr
 8005ae0:	803c3800 	.word	0x803c3800

08005ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <USB_FlushTxFifo+0x64>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e01b      	b.n	8005b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	daf2      	bge.n	8005af2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	019b      	lsls	r3, r3, #6
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <USB_FlushTxFifo+0x64>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d0f0      	beq.n	8005b1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	00030d40 	.word	0x00030d40

08005b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <USB_FlushRxFifo+0x5c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e018      	b.n	8005b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	daf2      	bge.n	8005b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2210      	movs	r2, #16
 8005b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <USB_FlushRxFifo+0x5c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e006      	b.n	8005b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d0f0      	beq.n	8005b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	00030d40 	.word	0x00030d40

08005bac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
 8005c02:	e00a      	b.n	8005c1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d002      	beq.n	8005c10 <USB_GetDevSpeed+0x32>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d102      	bne.n	8005c16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c10:	2302      	movs	r3, #2
 8005c12:	75fb      	strb	r3, [r7, #23]
 8005c14:	e001      	b.n	8005c1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c16:	230f      	movs	r3, #15
 8005c18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d13a      	bne.n	8005cba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d155      	bne.n	8005d28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	059b      	lsls	r3, r3, #22
 8005c9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e036      	b.n	8005d28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11a      	bne.n	8005d28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d161      	bne.n	8005e18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6a:	d11f      	bne.n	8005dac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dcc:	4013      	ands	r3, r2
 8005dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df0:	4013      	ands	r3, r2
 8005df2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	0159      	lsls	r1, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	440b      	add	r3, r1
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4b35      	ldr	r3, [pc, #212]	; (8005ee8 <USB_DeactivateEndpoint+0x1b0>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
 8005e16:	e060      	b.n	8005eda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2e:	d11f      	bne.n	8005e70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e90:	4013      	ands	r3, r2
 8005e92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	43db      	mvns	r3, r3
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	0159      	lsls	r1, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	440b      	add	r3, r1
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <USB_DeactivateEndpoint+0x1b4>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	ec337800 	.word	0xec337800
 8005eec:	eff37800 	.word	0xeff37800

08005ef0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 815c 	bne.w	80061ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d132      	bne.n	8005f80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	0cdb      	lsrs	r3, r3, #19
 8005f7a:	04db      	lsls	r3, r3, #19
 8005f7c:	6113      	str	r3, [r2, #16]
 8005f7e:	e074      	b.n	800606a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	0cdb      	lsrs	r3, r3, #19
 8005f9c:	04db      	lsls	r3, r3, #19
 8005f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	440b      	add	r3, r1
 8005fdc:	1e59      	subs	r1, r3, #1
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fe6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fe8:	4b9d      	ldr	r3, [pc, #628]	; (8006260 <USB_EPStartXfer+0x370>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	0148      	lsls	r0, r1, #5
 8005ff0:	69f9      	ldr	r1, [r7, #28]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006012:	69b9      	ldr	r1, [r7, #24]
 8006014:	0148      	lsls	r0, r1, #5
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	4401      	add	r1, r0
 800601a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800601e:	4313      	orrs	r3, r2
 8006020:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	791b      	ldrb	r3, [r3, #4]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d11f      	bne.n	800606a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006044:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006048:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006068:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d14b      	bne.n	8006108 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d009      	beq.n	800608c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d128      	bne.n	80060e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d110      	bne.n	80060c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e00f      	b.n	80060e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e133      	b.n	8006370 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006126:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	791b      	ldrb	r3, [r3, #4]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d015      	beq.n	800615c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 811b 	beq.w	8006370 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	2101      	movs	r1, #1
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	69f9      	ldr	r1, [r7, #28]
 8006152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006156:	4313      	orrs	r3, r2
 8006158:	634b      	str	r3, [r1, #52]	; 0x34
 800615a:	e109      	b.n	8006370 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d110      	bne.n	800618e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e00f      	b.n	80061ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	b298      	uxth	r0, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fade 	bl	8006784 <USB_WritePacket>
 80061c8:	e0d2      	b.n	8006370 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	0cdb      	lsrs	r3, r3, #19
 80061e6:	04db      	lsls	r3, r3, #19
 80061e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006208:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800620c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d126      	bne.n	8006264 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622c:	69b9      	ldr	r1, [r7, #24]
 800622e:	0148      	lsls	r0, r1, #5
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	4401      	add	r1, r0
 8006234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006238:	4313      	orrs	r3, r2
 800623a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800625a:	6113      	str	r3, [r2, #16]
 800625c:	e03a      	b.n	80062d4 <USB_EPStartXfer+0x3e4>
 800625e:	bf00      	nop
 8006260:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4413      	add	r3, r2
 800626e:	1e5a      	subs	r2, r3, #1
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	8afa      	ldrh	r2, [r7, #22]
 8006280:	fb03 f202 	mul.w	r2, r3, r2
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	8afb      	ldrh	r3, [r7, #22]
 8006298:	04d9      	lsls	r1, r3, #19
 800629a:	4b38      	ldr	r3, [pc, #224]	; (800637c <USB_EPStartXfer+0x48c>)
 800629c:	400b      	ands	r3, r1
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	0148      	lsls	r0, r1, #5
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	4401      	add	r1, r0
 80062a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062aa:	4313      	orrs	r3, r2
 80062ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	0148      	lsls	r0, r1, #5
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	4401      	add	r1, r0
 80062cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d0:	4313      	orrs	r3, r2
 80062d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10d      	bne.n	80062f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6919      	ldr	r1, [r3, #16]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	460a      	mov	r2, r1
 80062f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d128      	bne.n	8006350 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d110      	bne.n	8006330 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e00f      	b.n	8006350 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800636e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	1ff80000 	.word	0x1ff80000

08006380 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b01      	cmp	r3, #1
 800639e:	f040 80ce 	bne.w	800653e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d132      	bne.n	8006410 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006408:	0cdb      	lsrs	r3, r3, #19
 800640a:	04db      	lsls	r3, r3, #19
 800640c:	6113      	str	r3, [r2, #16]
 800640e:	e04e      	b.n	80064ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	440a      	add	r2, r1
 8006426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642a:	0cdb      	lsrs	r3, r3, #19
 800642c:	04db      	lsls	r3, r3, #19
 800642e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800644e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006452:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	429a      	cmp	r2, r3
 800645e:	d903      	bls.n	8006468 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649e:	6939      	ldr	r1, [r7, #16]
 80064a0:	0148      	lsls	r0, r1, #5
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	4401      	add	r1, r0
 80064a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064aa:	4313      	orrs	r3, r2
 80064ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d11e      	bne.n	80064f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e097      	b.n	8006622 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006510:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8083 	beq.w	8006622 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006538:	4313      	orrs	r3, r2
 800653a:	634b      	str	r3, [r1, #52]	; 0x34
 800653c:	e071      	b.n	8006622 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006558:	0cdb      	lsrs	r3, r3, #19
 800655a:	04db      	lsls	r3, r3, #19
 800655c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006578:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800657c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006580:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d0:	6939      	ldr	r1, [r7, #16]
 80065d2:	0148      	lsls	r0, r1, #5
 80065d4:	6979      	ldr	r1, [r7, #20]
 80065d6:	4401      	add	r1, r0
 80065d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10d      	bne.n	8006602 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6919      	ldr	r1, [r3, #16]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	460a      	mov	r2, r1
 8006600:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006620:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d14a      	bne.n	80066e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006666:	f040 8086 	bne.w	8006776 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800668c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80066be:	4293      	cmp	r3, r2
 80066c0:	d902      	bls.n	80066c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
          break;
 80066c6:	e056      	b.n	8006776 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e0:	d0e7      	beq.n	80066b2 <USB_EPStopXfer+0x82>
 80066e2:	e048      	b.n	8006776 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fc:	d13b      	bne.n	8006776 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	7812      	ldrb	r2, [r2, #0]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006720:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006744:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006752:	4293      	cmp	r3, r2
 8006754:	d902      	bls.n	800675c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
          break;
 800675a:	e00c      	b.n	8006776 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006774:	d0e7      	beq.n	8006746 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	460b      	mov	r3, r1
 8006794:	71fb      	strb	r3, [r7, #7]
 8006796:	4613      	mov	r3, r2
 8006798:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d123      	bne.n	80067f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067aa:	88bb      	ldrh	r3, [r7, #4]
 80067ac:	3303      	adds	r3, #3
 80067ae:	089b      	lsrs	r3, r3, #2
 80067b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067b2:	2300      	movs	r3, #0
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	e018      	b.n	80067ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	031a      	lsls	r2, r3, #12
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c4:	461a      	mov	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3301      	adds	r3, #1
 80067e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3e2      	bcc.n	80067b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3724      	adds	r7, #36	; 0x24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006800:	b480      	push	{r7}
 8006802:	b08b      	sub	sp, #44	; 0x2c
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	089b      	lsrs	r3, r3, #2
 800681a:	b29b      	uxth	r3, r3
 800681c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	e014      	b.n	8006856 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	601a      	str	r2, [r3, #0]
    pDest++;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	3301      	adds	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	3301      	adds	r3, #1
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	3301      	adds	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	3301      	adds	r3, #1
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	3301      	adds	r3, #1
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	6a3a      	ldr	r2, [r7, #32]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	429a      	cmp	r2, r3
 800685c:	d3e6      	bcc.n	800682c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800685e:	8bfb      	ldrh	r3, [r7, #30]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01e      	beq.n	80068a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	461a      	mov	r2, r3
 8006870:	f107 0310 	add.w	r3, r7, #16
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
 8006884:	b2da      	uxtb	r2, r3
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	701a      	strb	r2, [r3, #0]
      i++;
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	3301      	adds	r3, #1
 800688e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	3301      	adds	r3, #1
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006896:	8bfb      	ldrh	r3, [r7, #30]
 8006898:	3b01      	subs	r3, #1
 800689a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ea      	bne.n	8006878 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	372c      	adds	r7, #44	; 0x2c
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d12c      	bne.n	8006926 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db12      	blt.n	8006904 <USB_EPSetStall+0x54>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00f      	beq.n	8006904 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006902:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e02b      	b.n	800697e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	db12      	blt.n	800695e <USB_EPSetStall+0xae>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800695c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800697c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d128      	bne.n	80069fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d003      	beq.n	80069d8 <USB_EPClearStall+0x4c>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d138      	bne.n	8006a4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e027      	b.n	8006a4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d003      	beq.n	8006a2a <USB_EPClearStall+0x9e>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	791b      	ldrb	r3, [r3, #4]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d10f      	bne.n	8006a4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad2:	f023 0302 	bic.w	r3, r3, #2
 8006ad6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b00:	f023 0303 	bic.w	r3, r3, #3
 8006b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	0c1b      	lsrs	r3, r3, #16
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	b29b      	uxth	r3, r3
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4013      	ands	r3, r2
 8006be2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006be4:	68bb      	ldr	r3, [r7, #8]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b087      	sub	sp, #28
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	01db      	lsls	r3, r3, #7
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c40:	68bb      	ldr	r3, [r7, #8]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	333c      	adds	r3, #60	; 0x3c
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4a26      	ldr	r2, [pc, #152]	; (8006d68 <USB_EP0_OutStart+0xb8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d90a      	bls.n	8006cea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce4:	d101      	bne.n	8006cea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e037      	b.n	8006d5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	f043 0318 	orr.w	r3, r3, #24
 8006d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10f      	bne.n	8006d58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	4f54300a 	.word	0x4f54300a

08006d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <USB_CoreReset+0x64>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e01b      	b.n	8006dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	daf2      	bge.n	8006d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <USB_CoreReset+0x64>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d901      	bls.n	8006db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d0f0      	beq.n	8006da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	00030d40 	.word	0x00030d40

08006dd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006de0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006de4:	f002 fce0 	bl	80097a8 <USBD_static_malloc>
 8006de8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32b0      	adds	r2, #176	; 0xb0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e00:	2302      	movs	r3, #2
 8006e02:	e0d4      	b.n	8006fae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e04:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e08:	2100      	movs	r1, #0
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f002 fd3e 	bl	800988c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32b0      	adds	r2, #176	; 0xb0
 8006e2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7c1b      	ldrb	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d138      	bne.n	8006eae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e3c:	4b5e      	ldr	r3, [pc, #376]	; (8006fb8 <USBD_CDC_Init+0x1e4>)
 8006e3e:	7819      	ldrb	r1, [r3, #0]
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	2202      	movs	r2, #2
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fb8b 	bl	8009562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e4c:	4b5a      	ldr	r3, [pc, #360]	; (8006fb8 <USBD_CDC_Init+0x1e4>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3324      	adds	r3, #36	; 0x24
 8006e62:	2201      	movs	r2, #1
 8006e64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e66:	4b55      	ldr	r3, [pc, #340]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006e68:	7819      	ldrb	r1, [r3, #0]
 8006e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e6e:	2202      	movs	r2, #2
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 fb76 	bl	8009562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e76:	4b51      	ldr	r3, [pc, #324]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e8e:	2201      	movs	r2, #1
 8006e90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e92:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <USBD_CDC_Init+0x1ec>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	3326      	adds	r3, #38	; 0x26
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	e035      	b.n	8006f1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <USBD_CDC_Init+0x1e4>)
 8006eb0:	7819      	ldrb	r1, [r3, #0]
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 fb53 	bl	8009562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ebc:	4b3e      	ldr	r3, [pc, #248]	; (8006fb8 <USBD_CDC_Init+0x1e4>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	2202      	movs	r2, #2
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f002 fb3f 	bl	8009562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ee4:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006efc:	2201      	movs	r2, #1
 8006efe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f00:	4b2f      	ldr	r3, [pc, #188]	; (8006fc0 <USBD_CDC_Init+0x1ec>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	3326      	adds	r3, #38	; 0x26
 8006f16:	2210      	movs	r2, #16
 8006f18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f1a:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <USBD_CDC_Init+0x1ec>)
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	2308      	movs	r3, #8
 8006f20:	2203      	movs	r2, #3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 fb1d 	bl	8009562 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f28:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <USBD_CDC_Init+0x1ec>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2201      	movs	r2, #1
 8006f40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	33b0      	adds	r3, #176	; 0xb0
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e018      	b.n	8006fae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7c1b      	ldrb	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fbd4 	bl	8009740 <USBD_LL_PrepareReceive>
 8006f98:	e008      	b.n	8006fac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <USBD_CDC_Init+0x1e8>)
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f002 fbca 	bl	8009740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200000b3 	.word	0x200000b3
 8006fbc:	200000b4 	.word	0x200000b4
 8006fc0:	200000b5 	.word	0x200000b5

08006fc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <USBD_CDC_DeInit+0xf8>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f002 fae9 	bl	80095ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fdc:	4b37      	ldr	r3, [pc, #220]	; (80070bc <USBD_CDC_DeInit+0xf8>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <USBD_CDC_DeInit+0xfc>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 fad6 	bl	80095ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007002:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <USBD_CDC_DeInit+0xfc>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 020f 	and.w	r2, r3, #15
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800701a:	2200      	movs	r2, #0
 800701c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800701e:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <USBD_CDC_DeInit+0x100>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 fac2 	bl	80095ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800702a:	4b26      	ldr	r3, [pc, #152]	; (80070c4 <USBD_CDC_DeInit+0x100>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 020f 	and.w	r2, r3, #15
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	2200      	movs	r2, #0
 8007042:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007044:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <USBD_CDC_DeInit+0x100>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3326      	adds	r3, #38	; 0x26
 800705a:	2200      	movs	r2, #0
 800705c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32b0      	adds	r2, #176	; 0xb0
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01f      	beq.n	80070b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	33b0      	adds	r3, #176	; 0xb0
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32b0      	adds	r2, #176	; 0xb0
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	4618      	mov	r0, r3
 8007094:	f002 fb96 	bl	80097c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32b0      	adds	r2, #176	; 0xb0
 80070a2:	2100      	movs	r1, #0
 80070a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200000b3 	.word	0x200000b3
 80070c0:	200000b4 	.word	0x200000b4
 80070c4:	200000b5 	.word	0x200000b5

080070c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e0bf      	b.n	8007278 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007100:	2b00      	cmp	r3, #0
 8007102:	d050      	beq.n	80071a6 <USBD_CDC_Setup+0xde>
 8007104:	2b20      	cmp	r3, #32
 8007106:	f040 80af 	bne.w	8007268 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	88db      	ldrh	r3, [r3, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d03a      	beq.n	8007188 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b25b      	sxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	da1b      	bge.n	8007154 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	33b0      	adds	r3, #176	; 0xb0
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007132:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	88d2      	ldrh	r2, [r2, #6]
 8007138:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b07      	cmp	r3, #7
 8007140:	bf28      	it	cs
 8007142:	2307      	movcs	r3, #7
 8007144:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	89fa      	ldrh	r2, [r7, #14]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fd89 	bl	8008c64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007152:	e090      	b.n	8007276 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785a      	ldrb	r2, [r3, #1]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b3f      	cmp	r3, #63	; 0x3f
 8007164:	d803      	bhi.n	800716e <USBD_CDC_Setup+0xa6>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	e000      	b.n	8007170 <USBD_CDC_Setup+0xa8>
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007176:	6939      	ldr	r1, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800717e:	461a      	mov	r2, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fd9b 	bl	8008cbc <USBD_CtlPrepareRx>
      break;
 8007186:	e076      	b.n	8007276 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	33b0      	adds	r3, #176	; 0xb0
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	7850      	ldrb	r0, [r2, #1]
 800719e:	2200      	movs	r2, #0
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	4798      	blx	r3
      break;
 80071a4:	e067      	b.n	8007276 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b0b      	cmp	r3, #11
 80071ac:	d851      	bhi.n	8007252 <USBD_CDC_Setup+0x18a>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USBD_CDC_Setup+0xec>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	08007261 	.word	0x08007261
 80071bc:	08007253 	.word	0x08007253
 80071c0:	08007253 	.word	0x08007253
 80071c4:	08007253 	.word	0x08007253
 80071c8:	08007253 	.word	0x08007253
 80071cc:	08007253 	.word	0x08007253
 80071d0:	08007253 	.word	0x08007253
 80071d4:	08007253 	.word	0x08007253
 80071d8:	08007253 	.word	0x08007253
 80071dc:	0800720f 	.word	0x0800720f
 80071e0:	08007239 	.word	0x08007239
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d107      	bne.n	8007200 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071f0:	f107 030a 	add.w	r3, r7, #10
 80071f4:	2202      	movs	r2, #2
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fd33 	bl	8008c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071fe:	e032      	b.n	8007266 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fcbd 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
          break;
 800720c:	e02b      	b.n	8007266 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d107      	bne.n	800722a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800721a:	f107 030d 	add.w	r3, r7, #13
 800721e:	2201      	movs	r2, #1
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fd1e 	bl	8008c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007228:	e01d      	b.n	8007266 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fca8 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	75fb      	strb	r3, [r7, #23]
          break;
 8007236:	e016      	b.n	8007266 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b03      	cmp	r3, #3
 8007242:	d00f      	beq.n	8007264 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fc9b 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007250:	e008      	b.n	8007264 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 fc94 	bl	8008b82 <USBD_CtlError>
          ret = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	75fb      	strb	r3, [r7, #23]
          break;
 800725e:	e002      	b.n	8007266 <USBD_CDC_Setup+0x19e>
          break;
 8007260:	bf00      	nop
 8007262:	e008      	b.n	8007276 <USBD_CDC_Setup+0x1ae>
          break;
 8007264:	bf00      	nop
      }
      break;
 8007266:	e006      	b.n	8007276 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fc89 	bl	8008b82 <USBD_CtlError>
      ret = USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	75fb      	strb	r3, [r7, #23]
      break;
 8007274:	bf00      	nop
  }

  return (uint8_t)ret;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007292:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32b0      	adds	r2, #176	; 0xb0
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e065      	b.n	8007376 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	f003 020f 	and.w	r2, r3, #15
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	3318      	adds	r3, #24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02f      	beq.n	8007334 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3318      	adds	r3, #24
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 010f 	and.w	r1, r3, #15
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	460b      	mov	r3, r1
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	440b      	add	r3, r1
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4403      	add	r3, r0
 80072fc:	3348      	adds	r3, #72	; 0x48
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	fbb2 f1f3 	udiv	r1, r2, r3
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800730a:	2b00      	cmp	r3, #0
 800730c:	d112      	bne.n	8007334 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	f003 020f 	and.w	r2, r3, #15
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	3318      	adds	r3, #24
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007326:	78f9      	ldrb	r1, [r7, #3]
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f002 f9e6 	bl	80096fe <USBD_LL_Transmit>
 8007332:	e01f      	b.n	8007374 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	33b0      	adds	r3, #176	; 0xb0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d010      	beq.n	8007374 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	33b0      	adds	r3, #176	; 0xb0
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	32b0      	adds	r2, #176	; 0xb0
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	32b0      	adds	r2, #176	; 0xb0
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e01a      	b.n	80073e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f002 f9e4 	bl	8009782 <USBD_LL_GetRxDataSize>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	33b0      	adds	r3, #176	; 0xb0
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073e0:	4611      	mov	r1, r2
 80073e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32b0      	adds	r2, #176	; 0xb0
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	e025      	b.n	800745c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	33b0      	adds	r3, #176	; 0xb0
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01a      	beq.n	800745a <USBD_CDC_EP0_RxReady+0x6c>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d015      	beq.n	800745a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	33b0      	adds	r3, #176	; 0xb0
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007446:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800744e:	b292      	uxth	r2, r2
 8007450:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800746c:	2182      	movs	r1, #130	; 0x82
 800746e:	4818      	ldr	r0, [pc, #96]	; (80074d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007470:	f000 fd4f 	bl	8007f12 <USBD_GetEpDesc>
 8007474:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007476:	2101      	movs	r1, #1
 8007478:	4815      	ldr	r0, [pc, #84]	; (80074d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800747a:	f000 fd4a 	bl	8007f12 <USBD_GetEpDesc>
 800747e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007480:	2181      	movs	r1, #129	; 0x81
 8007482:	4813      	ldr	r0, [pc, #76]	; (80074d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007484:	f000 fd45 	bl	8007f12 <USBD_GetEpDesc>
 8007488:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2210      	movs	r2, #16
 8007494:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d006      	beq.n	80074aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2200      	movs	r2, #0
 80074a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a4:	711a      	strb	r2, [r3, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d006      	beq.n	80074be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b8:	711a      	strb	r2, [r3, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2243      	movs	r2, #67	; 0x43
 80074c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000070 	.word	0x20000070

080074d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074dc:	2182      	movs	r1, #130	; 0x82
 80074de:	4818      	ldr	r0, [pc, #96]	; (8007540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074e0:	f000 fd17 	bl	8007f12 <USBD_GetEpDesc>
 80074e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074e6:	2101      	movs	r1, #1
 80074e8:	4815      	ldr	r0, [pc, #84]	; (8007540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074ea:	f000 fd12 	bl	8007f12 <USBD_GetEpDesc>
 80074ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074f0:	2181      	movs	r1, #129	; 0x81
 80074f2:	4813      	ldr	r0, [pc, #76]	; (8007540 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074f4:	f000 fd0d 	bl	8007f12 <USBD_GetEpDesc>
 80074f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2210      	movs	r2, #16
 8007504:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d006      	beq.n	800751a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2200      	movs	r2, #0
 8007510:	711a      	strb	r2, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f042 0202 	orr.w	r2, r2, #2
 8007518:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d006      	beq.n	800752e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	711a      	strb	r2, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f042 0202 	orr.w	r2, r2, #2
 800752c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2243      	movs	r2, #67	; 0x43
 8007532:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000070 	.word	0x20000070

08007544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800754c:	2182      	movs	r1, #130	; 0x82
 800754e:	4818      	ldr	r0, [pc, #96]	; (80075b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007550:	f000 fcdf 	bl	8007f12 <USBD_GetEpDesc>
 8007554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007556:	2101      	movs	r1, #1
 8007558:	4815      	ldr	r0, [pc, #84]	; (80075b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800755a:	f000 fcda 	bl	8007f12 <USBD_GetEpDesc>
 800755e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007560:	2181      	movs	r1, #129	; 0x81
 8007562:	4813      	ldr	r0, [pc, #76]	; (80075b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007564:	f000 fcd5 	bl	8007f12 <USBD_GetEpDesc>
 8007568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2210      	movs	r2, #16
 8007574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d006      	beq.n	800758a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2200      	movs	r2, #0
 8007580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007584:	711a      	strb	r2, [r3, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007598:	711a      	strb	r2, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2243      	movs	r2, #67	; 0x43
 80075a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075a4:	4b02      	ldr	r3, [pc, #8]	; (80075b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000070 	.word	0x20000070

080075b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	220a      	movs	r2, #10
 80075c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075c2:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	2000002c 	.word	0x2000002c

080075d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e009      	b.n	80075fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	33b0      	adds	r3, #176	; 0xb0
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	32b0      	adds	r2, #176	; 0xb0
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	e008      	b.n	8007640 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32b0      	adds	r2, #176	; 0xb0
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	e004      	b.n	800767a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32b0      	adds	r2, #176	; 0xb0
 800769a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32b0      	adds	r2, #176	; 0xb0
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e025      	b.n	8007706 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11f      	bne.n	8007704 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <USBD_CDC_TransmitPacket+0x88>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4403      	add	r3, r0
 80076e6:	3318      	adds	r3, #24
 80076e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <USBD_CDC_TransmitPacket+0x88>)
 80076ec:	7819      	ldrb	r1, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 ffff 	bl	80096fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	200000b3 	.word	0x200000b3

08007714 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32b0      	adds	r2, #176	; 0xb0
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	32b0      	adds	r2, #176	; 0xb0
 8007736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800773e:	2303      	movs	r3, #3
 8007740:	e018      	b.n	8007774 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7c1b      	ldrb	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <USBD_CDC_ReceivePacket+0x68>)
 800774c:	7819      	ldrb	r1, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fff1 	bl	8009740 <USBD_LL_PrepareReceive>
 800775e:	e008      	b.n	8007772 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <USBD_CDC_ReceivePacket+0x68>)
 8007762:	7819      	ldrb	r1, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 ffe7 	bl	8009740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200000b4 	.word	0x200000b4

08007780 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007794:	2303      	movs	r3, #3
 8007796:	e01f      	b.n	80077d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	79fa      	ldrb	r2, [r7, #7]
 80077ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 fe61 	bl	8009494 <USBD_LL_Init>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e025      	b.n	8007844 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32ae      	adds	r2, #174	; 0xae
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00f      	beq.n	8007834 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32ae      	adds	r2, #174	; 0xae
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f107 020e 	add.w	r2, r7, #14
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fe69 	bl	800952c <USBD_LL_Start>
 800785a:	4603      	mov	r3, r0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	4611      	mov	r1, r2
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	4611      	mov	r1, r2
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 f908 	bl	8008b0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800791a:	f003 031f 	and.w	r3, r3, #31
 800791e:	2b02      	cmp	r3, #2
 8007920:	d01a      	beq.n	8007958 <USBD_LL_SetupStage+0x72>
 8007922:	2b02      	cmp	r3, #2
 8007924:	d822      	bhi.n	800796c <USBD_LL_SetupStage+0x86>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <USBD_LL_SetupStage+0x4a>
 800792a:	2b01      	cmp	r3, #1
 800792c:	d00a      	beq.n	8007944 <USBD_LL_SetupStage+0x5e>
 800792e:	e01d      	b.n	800796c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fb5f 	bl	8007ffc <USBD_StdDevReq>
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
      break;
 8007942:	e020      	b.n	8007986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fbc7 	bl	80080e0 <USBD_StdItfReq>
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
      break;
 8007956:	e016      	b.n	8007986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fc29 	bl	80081b8 <USBD_StdEPReq>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
      break;
 800796a:	e00c      	b.n	8007986 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007972:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007976:	b2db      	uxtb	r3, r3
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fe36 	bl	80095ec <USBD_LL_StallEP>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	bf00      	nop
  }

  return ret;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	460b      	mov	r3, r1
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d16e      	bne.n	8007a86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	f040 8098 	bne.w	8007aec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d913      	bls.n	80079f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	4293      	cmp	r3, r2
 80079e0:	bf28      	it	cs
 80079e2:	4613      	movcs	r3, r2
 80079e4:	461a      	mov	r2, r3
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 f984 	bl	8008cf6 <USBD_CtlContinueRx>
 80079ee:	e07d      	b.n	8007aec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d014      	beq.n	8007a28 <USBD_LL_DataOutStage+0x98>
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d81d      	bhi.n	8007a3e <USBD_LL_DataOutStage+0xae>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <USBD_LL_DataOutStage+0x7c>
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d003      	beq.n	8007a12 <USBD_LL_DataOutStage+0x82>
 8007a0a:	e018      	b.n	8007a3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a10:	e018      	b.n	8007a44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fa5e 	bl	8007ede <USBD_CoreFindIF>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75bb      	strb	r3, [r7, #22]
            break;
 8007a26:	e00d      	b.n	8007a44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	4619      	mov	r1, r3
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fa60 	bl	8007ef8 <USBD_CoreFindEP>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a3c:	e002      	b.n	8007a44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75bb      	strb	r3, [r7, #22]
            break;
 8007a42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a44:	7dbb      	ldrb	r3, [r7, #22]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d119      	bne.n	8007a7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d113      	bne.n	8007a7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	32ae      	adds	r2, #174	; 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a66:	7dba      	ldrb	r2, [r7, #22]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a6e:	7dba      	ldrb	r2, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	32ae      	adds	r2, #174	; 0xae
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 f94a 	bl	8008d18 <USBD_CtlSendStatus>
 8007a84:	e032      	b.n	8007aec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 fa31 	bl	8007ef8 <USBD_CoreFindEP>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a9a:	7dbb      	ldrb	r3, [r7, #22]
 8007a9c:	2bff      	cmp	r3, #255	; 0xff
 8007a9e:	d025      	beq.n	8007aec <USBD_LL_DataOutStage+0x15c>
 8007aa0:	7dbb      	ldrb	r3, [r7, #22]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d122      	bne.n	8007aec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d117      	bne.n	8007ae2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ab2:	7dba      	ldrb	r2, [r7, #22]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	32ae      	adds	r2, #174	; 0xae
 8007ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00f      	beq.n	8007ae2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ac2:	7dba      	ldrb	r2, [r7, #22]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007aca:	7dba      	ldrb	r2, [r7, #22]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	32ae      	adds	r2, #174	; 0xae
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	7afa      	ldrb	r2, [r7, #11]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	4798      	blx	r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	e000      	b.n	8007aee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	460b      	mov	r3, r1
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d16f      	bne.n	8007bea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d15a      	bne.n	8007bd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d914      	bls.n	8007b50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 f8ac 	bl	8008c9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b42:	2300      	movs	r3, #0
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f001 fdf9 	bl	8009740 <USBD_LL_PrepareReceive>
 8007b4e:	e03f      	b.n	8007bd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d11c      	bne.n	8007b96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d316      	bcc.n	8007b96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d20f      	bcs.n	8007b96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b76:	2200      	movs	r2, #0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f001 f88d 	bl	8008c9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 fdd6 	bl	8009740 <USBD_LL_PrepareReceive>
 8007b94:	e01c      	b.n	8007bd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d10f      	bne.n	8007bc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 fd11 	bl	80095ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f001 f8b7 	bl	8008d3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d03a      	beq.n	8007c50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fe42 	bl	8007864 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007be8:	e032      	b.n	8007c50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f97f 	bl	8007ef8 <USBD_CoreFindEP>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2bff      	cmp	r3, #255	; 0xff
 8007c02:	d025      	beq.n	8007c50 <USBD_LL_DataInStage+0x15a>
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d122      	bne.n	8007c50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d11c      	bne.n	8007c50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c16:	7dfa      	ldrb	r2, [r7, #23]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	32ae      	adds	r2, #174	; 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d014      	beq.n	8007c50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c26:	7dfa      	ldrb	r2, [r7, #23]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c2e:	7dfa      	ldrb	r2, [r7, #23]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	32ae      	adds	r2, #174	; 0xae
 8007c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	7afa      	ldrb	r2, [r7, #11]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	4798      	blx	r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c46:	7dbb      	ldrb	r3, [r7, #22]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c4c:	7dbb      	ldrb	r3, [r7, #22]
 8007c4e:	e000      	b.n	8007c52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d014      	beq.n	8007cc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6852      	ldr	r2, [r2, #4]
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fc4b 	bl	8009562 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2240      	movs	r2, #64	; 0x40
 8007cd8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fc3d 	bl	8009562 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2240      	movs	r2, #64	; 0x40
 8007cf2:	621a      	str	r2, [r3, #32]

  return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2204      	movs	r2, #4
 8007d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d106      	bne.n	8007d6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d110      	bne.n	8007db0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	32ae      	adds	r2, #174	; 0xae
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e01c      	b.n	8007e16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d115      	bne.n	8007e14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	32ae      	adds	r2, #174	; 0xae
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	32ae      	adds	r2, #174	; 0xae
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e01c      	b.n	8007e7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d115      	bne.n	8007e78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32ae      	adds	r2, #174	; 0xae
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	32ae      	adds	r2, #174	; 0xae
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4611      	mov	r1, r2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6852      	ldr	r2, [r2, #4]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d920      	bls.n	8007f7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f42:	e013      	b.n	8007f6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f44:	f107 030a 	add.w	r3, r7, #10
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6978      	ldr	r0, [r7, #20]
 8007f4c:	f000 f81b 	bl	8007f86 <USBD_GetNextDesc>
 8007f50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d108      	bne.n	8007f6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	789b      	ldrb	r3, [r3, #2]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d008      	beq.n	8007f7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	885b      	ldrh	r3, [r3, #2]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	897b      	ldrh	r3, [r7, #10]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d8e5      	bhi.n	8007f44 <USBD_GetEpDesc+0x32>
 8007f78:	e000      	b.n	8007f7c <USBD_GetEpDesc+0x6a>
          break;
 8007f7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f7c:	693b      	ldr	r3, [r7, #16]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4413      	add	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fde:	8a3b      	ldrh	r3, [r7, #16]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	b21a      	sxth	r2, r3
 8007fe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	b21b      	sxth	r3, r3
 8007fec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fee:	89fb      	ldrh	r3, [r7, #14]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008012:	2b40      	cmp	r3, #64	; 0x40
 8008014:	d005      	beq.n	8008022 <USBD_StdDevReq+0x26>
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d857      	bhi.n	80080ca <USBD_StdDevReq+0xce>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00f      	beq.n	800803e <USBD_StdDevReq+0x42>
 800801e:	2b20      	cmp	r3, #32
 8008020:	d153      	bne.n	80080ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	32ae      	adds	r2, #174	; 0xae
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]
      break;
 800803c:	e04a      	b.n	80080d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	2b09      	cmp	r3, #9
 8008044:	d83b      	bhi.n	80080be <USBD_StdDevReq+0xc2>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USBD_StdDevReq+0x50>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	080080a1 	.word	0x080080a1
 8008050:	080080b5 	.word	0x080080b5
 8008054:	080080bf 	.word	0x080080bf
 8008058:	080080ab 	.word	0x080080ab
 800805c:	080080bf 	.word	0x080080bf
 8008060:	0800807f 	.word	0x0800807f
 8008064:	08008075 	.word	0x08008075
 8008068:	080080bf 	.word	0x080080bf
 800806c:	08008097 	.word	0x08008097
 8008070:	08008089 	.word	0x08008089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa3c 	bl	80084f4 <USBD_GetDescriptor>
          break;
 800807c:	e024      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fba1 	bl	80087c8 <USBD_SetAddress>
          break;
 8008086:	e01f      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fbe0 	bl	8008850 <USBD_SetConfig>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
          break;
 8008094:	e018      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc83 	bl	80089a4 <USBD_GetConfig>
          break;
 800809e:	e013      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fcb4 	bl	8008a10 <USBD_GetStatus>
          break;
 80080a8:	e00e      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fce3 	bl	8008a78 <USBD_SetFeature>
          break;
 80080b2:	e009      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fd07 	bl	8008aca <USBD_ClrFeature>
          break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd5e 	bl	8008b82 <USBD_CtlError>
          break;
 80080c6:	bf00      	nop
      }
      break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fd58 	bl	8008b82 <USBD_CtlError>
      break;
 80080d2:	bf00      	nop
  }

  return ret;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop

080080e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d005      	beq.n	8008106 <USBD_StdItfReq+0x26>
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d852      	bhi.n	80081a4 <USBD_StdItfReq+0xc4>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <USBD_StdItfReq+0x26>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d14e      	bne.n	80081a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	b2db      	uxtb	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	2b02      	cmp	r3, #2
 8008112:	d840      	bhi.n	8008196 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	889b      	ldrh	r3, [r3, #4]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b01      	cmp	r3, #1
 800811c:	d836      	bhi.n	800818c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	889b      	ldrh	r3, [r3, #4]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fed9 	bl	8007ede <USBD_CoreFindIF>
 800812c:	4603      	mov	r3, r0
 800812e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	2bff      	cmp	r3, #255	; 0xff
 8008134:	d01d      	beq.n	8008172 <USBD_StdItfReq+0x92>
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d11a      	bne.n	8008172 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800813c:	7bba      	ldrb	r2, [r7, #14]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	32ae      	adds	r2, #174	; 0xae
 8008142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800814c:	7bba      	ldrb	r2, [r7, #14]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008154:	7bba      	ldrb	r2, [r7, #14]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32ae      	adds	r2, #174	; 0xae
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800816a:	e004      	b.n	8008176 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008170:	e001      	b.n	8008176 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88db      	ldrh	r3, [r3, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d110      	bne.n	80081a0 <USBD_StdItfReq+0xc0>
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10d      	bne.n	80081a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fdc7 	bl	8008d18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800818a:	e009      	b.n	80081a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fcf7 	bl	8008b82 <USBD_CtlError>
          break;
 8008194:	e004      	b.n	80081a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fcf2 	bl	8008b82 <USBD_CtlError>
          break;
 800819e:	e000      	b.n	80081a2 <USBD_StdItfReq+0xc2>
          break;
 80081a0:	bf00      	nop
      }
      break;
 80081a2:	e004      	b.n	80081ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fceb 	bl	8008b82 <USBD_CtlError>
      break;
 80081ac:	bf00      	nop
  }

  return ret;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	889b      	ldrh	r3, [r3, #4]
 80081ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d4:	2b40      	cmp	r3, #64	; 0x40
 80081d6:	d007      	beq.n	80081e8 <USBD_StdEPReq+0x30>
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	f200 817f 	bhi.w	80084dc <USBD_StdEPReq+0x324>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d02a      	beq.n	8008238 <USBD_StdEPReq+0x80>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	f040 817a 	bne.w	80084dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fe83 	bl	8007ef8 <USBD_CoreFindEP>
 80081f2:	4603      	mov	r3, r0
 80081f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081f6:	7b7b      	ldrb	r3, [r7, #13]
 80081f8:	2bff      	cmp	r3, #255	; 0xff
 80081fa:	f000 8174 	beq.w	80084e6 <USBD_StdEPReq+0x32e>
 80081fe:	7b7b      	ldrb	r3, [r7, #13]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 8170 	bne.w	80084e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008206:	7b7a      	ldrb	r2, [r7, #13]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800820e:	7b7a      	ldrb	r2, [r7, #13]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32ae      	adds	r2, #174	; 0xae
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8163 	beq.w	80084e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008220:	7b7a      	ldrb	r2, [r7, #13]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32ae      	adds	r2, #174	; 0xae
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008236:	e156      	b.n	80084e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d008      	beq.n	8008252 <USBD_StdEPReq+0x9a>
 8008240:	2b03      	cmp	r3, #3
 8008242:	f300 8145 	bgt.w	80084d0 <USBD_StdEPReq+0x318>
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 809b 	beq.w	8008382 <USBD_StdEPReq+0x1ca>
 800824c:	2b01      	cmp	r3, #1
 800824e:	d03c      	beq.n	80082ca <USBD_StdEPReq+0x112>
 8008250:	e13e      	b.n	80084d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d002      	beq.n	8008264 <USBD_StdEPReq+0xac>
 800825e:	2b03      	cmp	r3, #3
 8008260:	d016      	beq.n	8008290 <USBD_StdEPReq+0xd8>
 8008262:	e02c      	b.n	80082be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <USBD_StdEPReq+0xce>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d00a      	beq.n	8008286 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f9b9 	bl	80095ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f9b5 	bl	80095ec <USBD_LL_StallEP>
 8008282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008284:	e020      	b.n	80082c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc7a 	bl	8008b82 <USBD_CtlError>
              break;
 800828e:	e01b      	b.n	80082c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10e      	bne.n	80082b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <USBD_StdEPReq+0xfe>
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b80      	cmp	r3, #128	; 0x80
 80082a2:	d008      	beq.n	80082b6 <USBD_StdEPReq+0xfe>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f99b 	bl	80095ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fd2e 	bl	8008d18 <USBD_CtlSendStatus>

              break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc5e 	bl	8008b82 <USBD_CtlError>
              break;
 80082c6:	bf00      	nop
          }
          break;
 80082c8:	e107      	b.n	80084da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d002      	beq.n	80082dc <USBD_StdEPReq+0x124>
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d016      	beq.n	8008308 <USBD_StdEPReq+0x150>
 80082da:	e04b      	b.n	8008374 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <USBD_StdEPReq+0x146>
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d00a      	beq.n	80082fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f97d 	bl	80095ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082f2:	2180      	movs	r1, #128	; 0x80
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f979 	bl	80095ec <USBD_LL_StallEP>
 80082fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082fc:	e040      	b.n	8008380 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc3e 	bl	8008b82 <USBD_CtlError>
              break;
 8008306:	e03b      	b.n	8008380 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	885b      	ldrh	r3, [r3, #2]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d136      	bne.n	800837e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f983 	bl	800962a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fcf7 	bl	8008d18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff fde2 	bl	8007ef8 <USBD_CoreFindEP>
 8008334:	4603      	mov	r3, r0
 8008336:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008338:	7b7b      	ldrb	r3, [r7, #13]
 800833a:	2bff      	cmp	r3, #255	; 0xff
 800833c:	d01f      	beq.n	800837e <USBD_StdEPReq+0x1c6>
 800833e:	7b7b      	ldrb	r3, [r7, #13]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d11c      	bne.n	800837e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800834c:	7b7a      	ldrb	r2, [r7, #13]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32ae      	adds	r2, #174	; 0xae
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d010      	beq.n	800837e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800835c:	7b7a      	ldrb	r2, [r7, #13]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32ae      	adds	r2, #174	; 0xae
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	4798      	blx	r3
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008372:	e004      	b.n	800837e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fc03 	bl	8008b82 <USBD_CtlError>
              break;
 800837c:	e000      	b.n	8008380 <USBD_StdEPReq+0x1c8>
              break;
 800837e:	bf00      	nop
          }
          break;
 8008380:	e0ab      	b.n	80084da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d002      	beq.n	8008394 <USBD_StdEPReq+0x1dc>
 800838e:	2b03      	cmp	r3, #3
 8008390:	d032      	beq.n	80083f8 <USBD_StdEPReq+0x240>
 8008392:	e097      	b.n	80084c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <USBD_StdEPReq+0x1f2>
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d004      	beq.n	80083aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fbed 	bl	8008b82 <USBD_CtlError>
                break;
 80083a8:	e091      	b.n	80084ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da0b      	bge.n	80083ca <USBD_StdEPReq+0x212>
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	3310      	adds	r3, #16
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	3304      	adds	r3, #4
 80083c8:	e00b      	b.n	80083e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	3304      	adds	r3, #4
 80083e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2202      	movs	r2, #2
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc37 	bl	8008c64 <USBD_CtlSendData>
              break;
 80083f6:	e06a      	b.n	80084ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da11      	bge.n	8008424 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	f003 020f 	and.w	r2, r3, #15
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d117      	bne.n	800844a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbb0 	bl	8008b82 <USBD_CtlError>
                  break;
 8008422:	e054      	b.n	80084ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fb9d 	bl	8008b82 <USBD_CtlError>
                  break;
 8008448:	e041      	b.n	80084ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800844e:	2b00      	cmp	r3, #0
 8008450:	da0b      	bge.n	800846a <USBD_StdEPReq+0x2b2>
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	3310      	adds	r3, #16
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	e00b      	b.n	8008482 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	4413      	add	r3, r2
 8008480:	3304      	adds	r3, #4
 8008482:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <USBD_StdEPReq+0x2d8>
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d103      	bne.n	8008498 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e00e      	b.n	80084b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f8e3 	bl	8009668 <USBD_LL_IsStallEP>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2202      	movs	r2, #2
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbd1 	bl	8008c64 <USBD_CtlSendData>
              break;
 80084c2:	e004      	b.n	80084ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fb5b 	bl	8008b82 <USBD_CtlError>
              break;
 80084cc:	bf00      	nop
          }
          break;
 80084ce:	e004      	b.n	80084da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fb55 	bl	8008b82 <USBD_CtlError>
          break;
 80084d8:	bf00      	nop
      }
      break;
 80084da:	e005      	b.n	80084e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fb4f 	bl	8008b82 <USBD_CtlError>
      break;
 80084e4:	e000      	b.n	80084e8 <USBD_StdEPReq+0x330>
      break;
 80084e6:	bf00      	nop
  }

  return ret;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	0a1b      	lsrs	r3, r3, #8
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	2b06      	cmp	r3, #6
 8008516:	f200 8128 	bhi.w	800876a <USBD_GetDescriptor+0x276>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <USBD_GetDescriptor+0x2c>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	0800853d 	.word	0x0800853d
 8008524:	08008555 	.word	0x08008555
 8008528:	08008595 	.word	0x08008595
 800852c:	0800876b 	.word	0x0800876b
 8008530:	0800876b 	.word	0x0800876b
 8008534:	0800870b 	.word	0x0800870b
 8008538:	08008737 	.word	0x08008737
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
      break;
 8008552:	e112      	b.n	800877a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f107 0208 	add.w	r2, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008576:	e100      	b.n	800877a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f107 0208 	add.w	r2, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	2202      	movs	r2, #2
 8008590:	701a      	strb	r2, [r3, #0]
      break;
 8008592:	e0f2      	b.n	800877a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b05      	cmp	r3, #5
 800859c:	f200 80ac 	bhi.w	80086f8 <USBD_GetDescriptor+0x204>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBD_GetDescriptor+0xb4>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085c1 	.word	0x080085c1
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	08008629 	.word	0x08008629
 80085b4:	0800865d 	.word	0x0800865d
 80085b8:	08008691 	.word	0x08008691
 80085bc:	080086c5 	.word	0x080086c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	7c12      	ldrb	r2, [r2, #16]
 80085d8:	f107 0108 	add.w	r1, r7, #8
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
 80085e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e2:	e091      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 facb 	bl	8008b82 <USBD_CtlError>
            err++;
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	3301      	adds	r3, #1
 80085f0:	72fb      	strb	r3, [r7, #11]
          break;
 80085f2:	e089      	b.n	8008708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	7c12      	ldrb	r2, [r2, #16]
 800860c:	f107 0108 	add.w	r1, r7, #8
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
 8008614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008616:	e077      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fab1 	bl	8008b82 <USBD_CtlError>
            err++;
 8008620:	7afb      	ldrb	r3, [r7, #11]
 8008622:	3301      	adds	r3, #1
 8008624:	72fb      	strb	r3, [r7, #11]
          break;
 8008626:	e06f      	b.n	8008708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864a:	e05d      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa97 	bl	8008b82 <USBD_CtlError>
            err++;
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	3301      	adds	r3, #1
 8008658:	72fb      	strb	r3, [r7, #11]
          break;
 800865a:	e055      	b.n	8008708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867e:	e043      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa7d 	bl	8008b82 <USBD_CtlError>
            err++;
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	3301      	adds	r3, #1
 800868c:	72fb      	strb	r3, [r7, #11]
          break;
 800868e:	e03b      	b.n	8008708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7c12      	ldrb	r2, [r2, #16]
 80086a8:	f107 0108 	add.w	r1, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b2:	e029      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa63 	bl	8008b82 <USBD_CtlError>
            err++;
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	3301      	adds	r3, #1
 80086c0:	72fb      	strb	r3, [r7, #11]
          break;
 80086c2:	e021      	b.n	8008708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	7c12      	ldrb	r2, [r2, #16]
 80086dc:	f107 0108 	add.w	r1, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e6:	e00f      	b.n	8008708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa49 	bl	8008b82 <USBD_CtlError>
            err++;
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	3301      	adds	r3, #1
 80086f4:	72fb      	strb	r3, [r7, #11]
          break;
 80086f6:	e007      	b.n	8008708 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa41 	bl	8008b82 <USBD_CtlError>
          err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008706:	bf00      	nop
      }
      break;
 8008708:	e037      	b.n	800877a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7c1b      	ldrb	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	f107 0208 	add.w	r2, r7, #8
 800871e:	4610      	mov	r0, r2
 8008720:	4798      	blx	r3
 8008722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008724:	e029      	b.n	800877a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa2a 	bl	8008b82 <USBD_CtlError>
        err++;
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	3301      	adds	r3, #1
 8008732:	72fb      	strb	r3, [r7, #11]
      break;
 8008734:	e021      	b.n	800877a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7c1b      	ldrb	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10d      	bne.n	800875a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f107 0208 	add.w	r2, r7, #8
 800874a:	4610      	mov	r0, r2
 800874c:	4798      	blx	r3
 800874e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	2207      	movs	r2, #7
 8008756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008758:	e00f      	b.n	800877a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa10 	bl	8008b82 <USBD_CtlError>
        err++;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	3301      	adds	r3, #1
 8008766:	72fb      	strb	r3, [r7, #11]
      break;
 8008768:	e007      	b.n	800877a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fa08 	bl	8008b82 <USBD_CtlError>
      err++;
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	3301      	adds	r3, #1
 8008776:	72fb      	strb	r3, [r7, #11]
      break;
 8008778:	bf00      	nop
  }

  if (err != 0U)
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11e      	bne.n	80087be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	88db      	ldrh	r3, [r3, #6]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d016      	beq.n	80087b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008788:	893b      	ldrh	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88da      	ldrh	r2, [r3, #6]
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	4293      	cmp	r3, r2
 8008796:	bf28      	it	cs
 8008798:	4613      	movcs	r3, r2
 800879a:	b29b      	uxth	r3, r3
 800879c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800879e:	893b      	ldrh	r3, [r7, #8]
 80087a0:	461a      	mov	r2, r3
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fa5d 	bl	8008c64 <USBD_CtlSendData>
 80087aa:	e009      	b.n	80087c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9e7 	bl	8008b82 <USBD_CtlError>
 80087b4:	e004      	b.n	80087c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 faae 	bl	8008d18 <USBD_CtlSendStatus>
 80087bc:	e000      	b.n	80087c0 <USBD_GetDescriptor+0x2cc>
    return;
 80087be:	bf00      	nop
  }
}
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop

080087c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d131      	bne.n	800883e <USBD_SetAddress+0x76>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d12d      	bne.n	800883e <USBD_SetAddress+0x76>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	2b7f      	cmp	r3, #127	; 0x7f
 80087e8:	d829      	bhi.n	800883e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d104      	bne.n	800880c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f9bc 	bl	8008b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880a:	e01d      	b.n	8008848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 ff51 	bl	80096c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa7a 	bl	8008d18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	e009      	b.n	8008848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883c:	e004      	b.n	8008848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f99e 	bl	8008b82 <USBD_CtlError>
  }
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	885b      	ldrh	r3, [r3, #2]
 8008862:	b2da      	uxtb	r2, r3
 8008864:	4b4e      	ldr	r3, [pc, #312]	; (80089a0 <USBD_SetConfig+0x150>)
 8008866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008868:	4b4d      	ldr	r3, [pc, #308]	; (80089a0 <USBD_SetConfig+0x150>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d905      	bls.n	800887c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f985 	bl	8008b82 <USBD_CtlError>
    return USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	e08c      	b.n	8008996 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d002      	beq.n	800888e <USBD_SetConfig+0x3e>
 8008888:	2b03      	cmp	r3, #3
 800888a:	d029      	beq.n	80088e0 <USBD_SetConfig+0x90>
 800888c:	e075      	b.n	800897a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800888e:	4b44      	ldr	r3, [pc, #272]	; (80089a0 <USBD_SetConfig+0x150>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d020      	beq.n	80088d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008896:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <USBD_SetConfig+0x150>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088a0:	4b3f      	ldr	r3, [pc, #252]	; (80089a0 <USBD_SetConfig+0x150>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe ffe7 	bl	800787a <USBD_SetClassConfig>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f962 	bl	8008b82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088c6:	e065      	b.n	8008994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa25 	bl	8008d18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2203      	movs	r2, #3
 80088d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088d6:	e05d      	b.n	8008994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fa1d 	bl	8008d18 <USBD_CtlSendStatus>
      break;
 80088de:	e059      	b.n	8008994 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088e0:	4b2f      	ldr	r3, [pc, #188]	; (80089a0 <USBD_SetConfig+0x150>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d112      	bne.n	800890e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088f0:	4b2b      	ldr	r3, [pc, #172]	; (80089a0 <USBD_SetConfig+0x150>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088fa:	4b29      	ldr	r3, [pc, #164]	; (80089a0 <USBD_SetConfig+0x150>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fe ffd6 	bl	80078b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa06 	bl	8008d18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800890c:	e042      	b.n	8008994 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <USBD_SetConfig+0x150>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d02a      	beq.n	8008972 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fe ffc4 	bl	80078b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800892a:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <USBD_SetConfig+0x150>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008934:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <USBD_SetConfig+0x150>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7fe ff9d 	bl	800787a <USBD_SetClassConfig>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00f      	beq.n	800896a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f918 	bl	8008b82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fe ffa9 	bl	80078b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008968:	e014      	b.n	8008994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9d4 	bl	8008d18 <USBD_CtlSendStatus>
      break;
 8008970:	e010      	b.n	8008994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9d0 	bl	8008d18 <USBD_CtlSendStatus>
      break;
 8008978:	e00c      	b.n	8008994 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f900 	bl	8008b82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <USBD_SetConfig+0x150>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe ff92 	bl	80078b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800898e:	2303      	movs	r3, #3
 8008990:	73fb      	strb	r3, [r7, #15]
      break;
 8008992:	bf00      	nop
  }

  return ret;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000454 	.word	0x20000454

080089a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	88db      	ldrh	r3, [r3, #6]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d004      	beq.n	80089c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f8e2 	bl	8008b82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089be:	e023      	b.n	8008a08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	dc02      	bgt.n	80089d2 <USBD_GetConfig+0x2e>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dc03      	bgt.n	80089d8 <USBD_GetConfig+0x34>
 80089d0:	e015      	b.n	80089fe <USBD_GetConfig+0x5a>
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d00b      	beq.n	80089ee <USBD_GetConfig+0x4a>
 80089d6:	e012      	b.n	80089fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3308      	adds	r3, #8
 80089e2:	2201      	movs	r2, #1
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f93c 	bl	8008c64 <USBD_CtlSendData>
        break;
 80089ec:	e00c      	b.n	8008a08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3304      	adds	r3, #4
 80089f2:	2201      	movs	r2, #1
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f934 	bl	8008c64 <USBD_CtlSendData>
        break;
 80089fc:	e004      	b.n	8008a08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f8be 	bl	8008b82 <USBD_CtlError>
        break;
 8008a06:	bf00      	nop
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d81e      	bhi.n	8008a66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d004      	beq.n	8008a3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f8a5 	bl	8008b82 <USBD_CtlError>
        break;
 8008a38:	e01a      	b.n	8008a70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f043 0202 	orr.w	r2, r3, #2
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	330c      	adds	r3, #12
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f900 	bl	8008c64 <USBD_CtlSendData>
      break;
 8008a64:	e004      	b.n	8008a70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f88a 	bl	8008b82 <USBD_CtlError>
      break;
 8008a6e:	bf00      	nop
  }
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	885b      	ldrh	r3, [r3, #2]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d107      	bne.n	8008a9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f940 	bl	8008d18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a98:	e013      	b.n	8008ac2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d10b      	bne.n	8008aba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	889b      	ldrh	r3, [r3, #4]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f930 	bl	8008d18 <USBD_CtlSendStatus>
}
 8008ab8:	e003      	b.n	8008ac2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f860 	bl	8008b82 <USBD_CtlError>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	3b01      	subs	r3, #1
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d80b      	bhi.n	8008afa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10c      	bne.n	8008b04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f910 	bl	8008d18 <USBD_CtlSendStatus>
      }
      break;
 8008af8:	e004      	b.n	8008b04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f840 	bl	8008b82 <USBD_CtlError>
      break;
 8008b02:	e000      	b.n	8008b06 <USBD_ClrFeature+0x3c>
      break;
 8008b04:	bf00      	nop
  }
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff fa41 	bl	8007fc0 <SWAPBYTE>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fa34 	bl	8007fc0 <SWAPBYTE>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff fa27 	bl	8007fc0 <SWAPBYTE>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	80da      	strh	r2, [r3, #6]
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fd2c 	bl	80095ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fd28 	bl	80095ec <USBD_LL_StallEP>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d036      	beq.n	8008c28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bbe:	6938      	ldr	r0, [r7, #16]
 8008bc0:	f000 f836 	bl	8008c30 <USBD_GetLen>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	3301      	adds	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	2203      	movs	r2, #3
 8008bec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bf4:	e013      	b.n	8008c1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3301      	adds	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
    idx++;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	4413      	add	r3, r2
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e7      	bne.n	8008bf6 <USBD_GetString+0x52>
 8008c26:	e000      	b.n	8008c2a <USBD_GetString+0x86>
    return;
 8008c28:	bf00      	nop
  }
}
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c40:	e005      	b.n	8008c4e <USBD_GetLen+0x1e>
  {
    len++;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	3301      	adds	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f5      	bne.n	8008c42 <USBD_GetLen+0x12>
  }

  return len;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fd37 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	2100      	movs	r1, #0
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fd26 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2203      	movs	r2, #3
 8008ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fd2a 	bl	8009740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	2100      	movs	r1, #0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fd19 	bl	8009740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2204      	movs	r2, #4
 8008d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fce5 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	2100      	movs	r1, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fcf3 	bl	8009740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4912      	ldr	r1, [pc, #72]	; (8008db4 <MX_USB_DEVICE_Init+0x50>)
 8008d6c:	4812      	ldr	r0, [pc, #72]	; (8008db8 <MX_USB_DEVICE_Init+0x54>)
 8008d6e:	f7fe fd07 	bl	8007780 <USBD_Init>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d78:	f7f8 fcfa 	bl	8001770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d7c:	490f      	ldr	r1, [pc, #60]	; (8008dbc <MX_USB_DEVICE_Init+0x58>)
 8008d7e:	480e      	ldr	r0, [pc, #56]	; (8008db8 <MX_USB_DEVICE_Init+0x54>)
 8008d80:	f7fe fd2e 	bl	80077e0 <USBD_RegisterClass>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d8a:	f7f8 fcf1 	bl	8001770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d8e:	490c      	ldr	r1, [pc, #48]	; (8008dc0 <MX_USB_DEVICE_Init+0x5c>)
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <MX_USB_DEVICE_Init+0x54>)
 8008d92:	f7fe fc1f 	bl	80075d4 <USBD_CDC_RegisterInterface>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d9c:	f7f8 fce8 	bl	8001770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <MX_USB_DEVICE_Init+0x54>)
 8008da2:	f7fe fd53 	bl	800784c <USBD_Start>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008dac:	f7f8 fce0 	bl	8001770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008db0:	bf00      	nop
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200000cc 	.word	0x200000cc
 8008db8:	20000458 	.word	0x20000458
 8008dbc:	20000038 	.word	0x20000038
 8008dc0:	200000b8 	.word	0x200000b8

08008dc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4905      	ldr	r1, [pc, #20]	; (8008de0 <CDC_Init_FS+0x1c>)
 8008dcc:	4805      	ldr	r0, [pc, #20]	; (8008de4 <CDC_Init_FS+0x20>)
 8008dce:	f7fe fc1b 	bl	8007608 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dd2:	4905      	ldr	r1, [pc, #20]	; (8008de8 <CDC_Init_FS+0x24>)
 8008dd4:	4803      	ldr	r0, [pc, #12]	; (8008de4 <CDC_Init_FS+0x20>)
 8008dd6:	f7fe fc39 	bl	800764c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000f34 	.word	0x20000f34
 8008de4:	20000458 	.word	0x20000458
 8008de8:	20000734 	.word	0x20000734

08008dec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008df0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b23      	cmp	r3, #35	; 0x23
 8008e10:	d84a      	bhi.n	8008ea8 <CDC_Control_FS+0xac>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <CDC_Control_FS+0x1c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008ea9 	.word	0x08008ea9
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008ea9 	.word	0x08008ea9
 8008e24:	08008ea9 	.word	0x08008ea9
 8008e28:	08008ea9 	.word	0x08008ea9
 8008e2c:	08008ea9 	.word	0x08008ea9
 8008e30:	08008ea9 	.word	0x08008ea9
 8008e34:	08008ea9 	.word	0x08008ea9
 8008e38:	08008ea9 	.word	0x08008ea9
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008ea9 	.word	0x08008ea9
 8008e44:	08008ea9 	.word	0x08008ea9
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	08008ea9 	.word	0x08008ea9
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008ea9 	.word	0x08008ea9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
 8008e74:	08008ea9 	.word	0x08008ea9
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	08008ea9 	.word	0x08008ea9
 8008e84:	08008ea9 	.word	0x08008ea9
 8008e88:	08008ea9 	.word	0x08008ea9
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008ea9 	.word	0x08008ea9
 8008e98:	08008ea9 	.word	0x08008ea9
 8008e9c:	08008ea9 	.word	0x08008ea9
 8008ea0:	08008ea9 	.word	0x08008ea9
 8008ea4:	08008ea9 	.word	0x08008ea9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ea8:	bf00      	nop
  }

  return (USBD_OK);
 8008eaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b09f      	sub	sp, #124	; 0x7c
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	4827      	ldr	r0, [pc, #156]	; (8008f64 <CDC_Receive_FS+0xac>)
 8008ec6:	f7fe fbc1 	bl	800764c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eca:	4826      	ldr	r0, [pc, #152]	; (8008f64 <CDC_Receive_FS+0xac>)
 8008ecc:	f7fe fc22 	bl	8007714 <USBD_CDC_ReceivePacket>
*parameter[i] = atof(Buf);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fcad 	bl	8009830 <atof>
 8008ed6:	ec51 0b10 	vmov	r0, r1, d0
 8008eda:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <CDC_Receive_FS+0xb0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a23      	ldr	r2, [pc, #140]	; (8008f6c <CDC_Receive_FS+0xb4>)
 8008ee0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ee4:	f7f7 fe42 	bl	8000b6c <__aeabi_d2f>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	6023      	str	r3, [r4, #0]


char feedback[100] = { 0 };
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	2260      	movs	r2, #96	; 0x60
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fcc7 	bl	800988c <memset>
snprintf(feedback,99, "value set to %f*\n", *parameter[i]);
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <CDC_Receive_FS+0xb0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a1a      	ldr	r2, [pc, #104]	; (8008f6c <CDC_Receive_FS+0xb4>)
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f7 fb1c 	bl	8000548 <__aeabi_f2d>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	f107 000c 	add.w	r0, r7, #12
 8008f18:	e9cd 2300 	strd	r2, r3, [sp]
 8008f1c:	4a14      	ldr	r2, [pc, #80]	; (8008f70 <CDC_Receive_FS+0xb8>)
 8008f1e:	2163      	movs	r1, #99	; 0x63
 8008f20:	f000 fcbc 	bl	800989c <sniprintf>
i = (i+1)%3;
 8008f24:	4b10      	ldr	r3, [pc, #64]	; (8008f68 <CDC_Receive_FS+0xb0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	1c59      	adds	r1, r3, #1
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <CDC_Receive_FS+0xbc>)
 8008f2c:	fb83 3201 	smull	r3, r2, r3, r1
 8008f30:	17cb      	asrs	r3, r1, #31
 8008f32:	1ad2      	subs	r2, r2, r3
 8008f34:	4613      	mov	r3, r2
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	4413      	add	r3, r2
 8008f3a:	1aca      	subs	r2, r1, r3
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <CDC_Receive_FS+0xb0>)
 8008f3e:	601a      	str	r2, [r3, #0]

CDC_Transmit_FS(feedback, strlen(feedback));
 8008f40:	f107 030c 	add.w	r3, r7, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f7 f943 	bl	80001d0 <strlen>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f107 030c 	add.w	r3, r7, #12
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f80f 	bl	8008f78 <CDC_Transmit_FS>
  return (USBD_OK);
 8008f5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3774      	adds	r7, #116	; 0x74
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}
 8008f64:	20000458 	.word	0x20000458
 8008f68:	20001734 	.word	0x20001734
 8008f6c:	20000004 	.word	0x20000004
 8008f70:	0800ca10 	.word	0x0800ca10
 8008f74:	55555556 	.word	0x55555556

08008f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f88:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <CDC_Transmit_FS+0x48>)
 8008f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e00b      	b.n	8008fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4806      	ldr	r0, [pc, #24]	; (8008fc0 <CDC_Transmit_FS+0x48>)
 8008fa6:	f7fe fb2f 	bl	8007608 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <CDC_Transmit_FS+0x48>)
 8008fac:	f7fe fb6c 	bl	8007688 <USBD_CDC_TransmitPacket>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000458 	.word	0x20000458

08008fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
	...

08008fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2212      	movs	r2, #18
 8008ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	; (8009008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	200000e8 	.word	0x200000e8

0800900c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2204      	movs	r2, #4
 800901c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	200000fc 	.word	0x200000fc

08009030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d105      	bne.n	800904e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4907      	ldr	r1, [pc, #28]	; (8009064 <USBD_FS_ProductStrDescriptor+0x34>)
 8009046:	4808      	ldr	r0, [pc, #32]	; (8009068 <USBD_FS_ProductStrDescriptor+0x38>)
 8009048:	f7ff fdac 	bl	8008ba4 <USBD_GetString>
 800904c:	e004      	b.n	8009058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4904      	ldr	r1, [pc, #16]	; (8009064 <USBD_FS_ProductStrDescriptor+0x34>)
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <USBD_FS_ProductStrDescriptor+0x38>)
 8009054:	f7ff fda6 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20001738 	.word	0x20001738
 8009068:	0800ca24 	.word	0x0800ca24

0800906c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	4904      	ldr	r1, [pc, #16]	; (800908c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800907c:	4804      	ldr	r0, [pc, #16]	; (8009090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800907e:	f7ff fd91 	bl	8008ba4 <USBD_GetString>
  return USBD_StrDesc;
 8009082:	4b02      	ldr	r3, [pc, #8]	; (800908c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20001738 	.word	0x20001738
 8009090:	0800ca3c 	.word	0x0800ca3c

08009094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	221a      	movs	r2, #26
 80090a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090a6:	f000 f843 	bl	8009130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090aa:	4b02      	ldr	r3, [pc, #8]	; (80090b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000100 	.word	0x20000100

080090b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	4907      	ldr	r1, [pc, #28]	; (80090ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ce:	4808      	ldr	r0, [pc, #32]	; (80090f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090d0:	f7ff fd68 	bl	8008ba4 <USBD_GetString>
 80090d4:	e004      	b.n	80090e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4904      	ldr	r1, [pc, #16]	; (80090ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090dc:	f7ff fd62 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20001738 	.word	0x20001738
 80090f0:	0800ca50 	.word	0x0800ca50

080090f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4907      	ldr	r1, [pc, #28]	; (8009128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800910a:	4808      	ldr	r0, [pc, #32]	; (800912c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800910c:	f7ff fd4a 	bl	8008ba4 <USBD_GetString>
 8009110:	e004      	b.n	800911c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009118:	f7ff fd44 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20001738 	.word	0x20001738
 800912c:	0800ca5c 	.word	0x0800ca5c

08009130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <Get_SerialNum+0x44>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800913c:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <Get_SerialNum+0x48>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009142:	4b0e      	ldr	r3, [pc, #56]	; (800917c <Get_SerialNum+0x4c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4413      	add	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009156:	2208      	movs	r2, #8
 8009158:	4909      	ldr	r1, [pc, #36]	; (8009180 <Get_SerialNum+0x50>)
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f814 	bl	8009188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009160:	2204      	movs	r2, #4
 8009162:	4908      	ldr	r1, [pc, #32]	; (8009184 <Get_SerialNum+0x54>)
 8009164:	68b8      	ldr	r0, [r7, #8]
 8009166:	f000 f80f 	bl	8009188 <IntToUnicode>
  }
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	1fff7a10 	.word	0x1fff7a10
 8009178:	1fff7a14 	.word	0x1fff7a14
 800917c:	1fff7a18 	.word	0x1fff7a18
 8009180:	20000102 	.word	0x20000102
 8009184:	20000112 	.word	0x20000112

08009188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]
 800919e:	e027      	b.n	80091f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0f1b      	lsrs	r3, r3, #28
 80091a4:	2b09      	cmp	r3, #9
 80091a6:	d80b      	bhi.n	80091c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	0f1b      	lsrs	r3, r3, #28
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	440b      	add	r3, r1
 80091b8:	3230      	adds	r2, #48	; 0x30
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e00a      	b.n	80091d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	0f1b      	lsrs	r3, r3, #28
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	4619      	mov	r1, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	440b      	add	r3, r1
 80091d0:	3237      	adds	r2, #55	; 0x37
 80091d2:	b2d2      	uxtb	r2, r2
 80091d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	3301      	adds	r3, #1
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	4413      	add	r3, r2
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	3301      	adds	r3, #1
 80091ee:	75fb      	strb	r3, [r7, #23]
 80091f0:	7dfa      	ldrb	r2, [r7, #23]
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d3d3      	bcc.n	80091a0 <IntToUnicode+0x18>
  }
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009228:	d13a      	bne.n	80092a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	4b1e      	ldr	r3, [pc, #120]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	4a1d      	ldr	r2, [pc, #116]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	6313      	str	r3, [r2, #48]	; 0x30
 800923a:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009246:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800924a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800924c:	2302      	movs	r3, #2
 800924e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009254:	2303      	movs	r3, #3
 8009256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009258:	230a      	movs	r3, #10
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800925c:	f107 0314 	add.w	r3, r7, #20
 8009260:	4619      	mov	r1, r3
 8009262:	4812      	ldr	r0, [pc, #72]	; (80092ac <HAL_PCD_MspInit+0xa4>)
 8009264:	f7f9 fa98 	bl	8002798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 800926e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009272:	6353      	str	r3, [r2, #52]	; 0x34
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	4b0b      	ldr	r3, [pc, #44]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 800927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927c:	4a0a      	ldr	r2, [pc, #40]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 800927e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009282:	6453      	str	r3, [r2, #68]	; 0x44
 8009284:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <HAL_PCD_MspInit+0xa0>)
 8009286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009290:	2200      	movs	r2, #0
 8009292:	2100      	movs	r1, #0
 8009294:	2043      	movs	r0, #67	; 0x43
 8009296:	f7f9 fa48 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800929a:	2043      	movs	r0, #67	; 0x43
 800929c:	f7f9 fa61 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092a0:	bf00      	nop
 80092a2:	3728      	adds	r7, #40	; 0x28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40023800 	.word	0x40023800
 80092ac:	40020000 	.word	0x40020000

080092b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fb0d 	bl	80078e6 <USBD_LL_SetupStage>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7fe fb47 	bl	8007990 <USBD_LL_DataOutStage>
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	334c      	adds	r3, #76	; 0x4c
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	4619      	mov	r1, r3
 8009332:	f7fe fbe0 	bl	8007af6 <USBD_LL_DataInStage>
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fd14 	bl	8007d7a <USBD_LL_SOF>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
 8009372:	e008      	b.n	8009386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d102      	bne.n	8009382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
 8009380:	e001      	b.n	8009386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009382:	f7f8 f9f5 	bl	8001770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800938c:	7bfa      	ldrb	r2, [r7, #15]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fcb4 	bl	8007cfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fc5c 	bl	8007c5a <USBD_LL_Reset>
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fcaf 	bl	8007d1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <HAL_PCD_SuspendCallback+0x48>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	4a03      	ldr	r2, [pc, #12]	; (80093f4 <HAL_PCD_SuspendCallback+0x48>)
 80093e6:	f043 0306 	orr.w	r3, r3, #6
 80093ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fc9f 	bl	8007d4a <USBD_LL_Resume>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fcf7 	bl	8007e1e <USBD_LL_IsoOUTIncomplete>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fcb3 	bl	8007dba <USBD_LL_IsoINIncomplete>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fd09 	bl	8007e82 <USBD_LL_DevConnected>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fd06 	bl	8007e98 <USBD_LL_DevDisconnected>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d13c      	bne.n	800951e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094a4:	4a20      	ldr	r2, [pc, #128]	; (8009528 <USBD_LL_Init+0x94>)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <USBD_LL_Init+0x94>)
 80094b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <USBD_LL_Init+0x94>)
 80094b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094bc:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <USBD_LL_Init+0x94>)
 80094be:	2204      	movs	r2, #4
 80094c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <USBD_LL_Init+0x94>)
 80094c4:	2202      	movs	r2, #2
 80094c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094c8:	4b17      	ldr	r3, [pc, #92]	; (8009528 <USBD_LL_Init+0x94>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094ce:	4b16      	ldr	r3, [pc, #88]	; (8009528 <USBD_LL_Init+0x94>)
 80094d0:	2202      	movs	r2, #2
 80094d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094d4:	4b14      	ldr	r3, [pc, #80]	; (8009528 <USBD_LL_Init+0x94>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094da:	4b13      	ldr	r3, [pc, #76]	; (8009528 <USBD_LL_Init+0x94>)
 80094dc:	2200      	movs	r2, #0
 80094de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <USBD_LL_Init+0x94>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094e6:	4b10      	ldr	r3, [pc, #64]	; (8009528 <USBD_LL_Init+0x94>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <USBD_LL_Init+0x94>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094f2:	480d      	ldr	r0, [pc, #52]	; (8009528 <USBD_LL_Init+0x94>)
 80094f4:	f7f9 faec 	bl	8002ad0 <HAL_PCD_Init>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094fe:	f7f8 f937 	bl	8001770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009502:	2180      	movs	r1, #128	; 0x80
 8009504:	4808      	ldr	r0, [pc, #32]	; (8009528 <USBD_LL_Init+0x94>)
 8009506:	f7fa fd44 	bl	8003f92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800950a:	2240      	movs	r2, #64	; 0x40
 800950c:	2100      	movs	r1, #0
 800950e:	4806      	ldr	r0, [pc, #24]	; (8009528 <USBD_LL_Init+0x94>)
 8009510:	f7fa fcf8 	bl	8003f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009514:	2280      	movs	r2, #128	; 0x80
 8009516:	2101      	movs	r1, #1
 8009518:	4803      	ldr	r0, [pc, #12]	; (8009528 <USBD_LL_Init+0x94>)
 800951a:	f7fa fcf3 	bl	8003f04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20001938 	.word	0x20001938

0800952c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009542:	4618      	mov	r0, r3
 8009544:	f7f9 fbe1 	bl	8002d0a <HAL_PCD_Start>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	4618      	mov	r0, r3
 8009550:	f000 f942 	bl	80097d8 <USBD_Get_USB_Status>
 8009554:	4603      	mov	r3, r0
 8009556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009558:	7bbb      	ldrb	r3, [r7, #14]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	461a      	mov	r2, r3
 8009570:	4603      	mov	r3, r0
 8009572:	70fb      	strb	r3, [r7, #3]
 8009574:	460b      	mov	r3, r1
 8009576:	70bb      	strb	r3, [r7, #2]
 8009578:	4613      	mov	r3, r2
 800957a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800958a:	78bb      	ldrb	r3, [r7, #2]
 800958c:	883a      	ldrh	r2, [r7, #0]
 800958e:	78f9      	ldrb	r1, [r7, #3]
 8009590:	f7fa f8b2 	bl	80036f8 <HAL_PCD_EP_Open>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f91c 	bl	80097d8 <USBD_Get_USB_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095c8:	78fa      	ldrb	r2, [r7, #3]
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fa f8fb 	bl	80037c8 <HAL_PCD_EP_Close>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f8fd 	bl	80097d8 <USBD_Get_USB_Status>
 80095de:	4603      	mov	r3, r0
 80095e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7fa f9d3 	bl	80039b6 <HAL_PCD_EP_SetStall>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f8de 	bl	80097d8 <USBD_Get_USB_Status>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7fa fa18 	bl	8003a7e <HAL_PCD_EP_ClrStall>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f8bf 	bl	80097d8 <USBD_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800967a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800967c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da0b      	bge.n	800969c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	4613      	mov	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	333e      	adds	r3, #62	; 0x3e
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	e00b      	b.n	80096b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80096b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f9 ffe5 	bl	80036ae <HAL_PCD_SetAddress>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 f874 	bl	80097d8 <USBD_Get_USB_Status>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	460b      	mov	r3, r1
 800970c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800971c:	7af9      	ldrb	r1, [r7, #11]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f7fa f8fe 	bl	8003922 <HAL_PCD_EP_Transmit>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f853 	bl	80097d8 <USBD_Get_USB_Status>
 8009732:	4603      	mov	r3, r0
 8009734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009736:	7dbb      	ldrb	r3, [r7, #22]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	460b      	mov	r3, r1
 800974e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800975e:	7af9      	ldrb	r1, [r7, #11]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	f7fa f87a 	bl	800385c <HAL_PCD_EP_Receive>
 8009768:	4603      	mov	r3, r0
 800976a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f832 	bl	80097d8 <USBD_Get_USB_Status>
 8009774:	4603      	mov	r3, r0
 8009776:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009778:	7dbb      	ldrb	r3, [r7, #22]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	4611      	mov	r1, r2
 8009798:	4618      	mov	r0, r3
 800979a:	f7fa f8aa 	bl	80038f2 <HAL_PCD_EP_GetRxCount>
 800979e:	4603      	mov	r3, r0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097b0:	4b03      	ldr	r3, [pc, #12]	; (80097c0 <USBD_static_malloc+0x18>)
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20001e44 	.word	0x20001e44

080097c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]

}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d817      	bhi.n	800981c <USBD_Get_USB_Status+0x44>
 80097ec:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <USBD_Get_USB_Status+0x1c>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009805 	.word	0x08009805
 80097f8:	0800980b 	.word	0x0800980b
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009817 	.word	0x08009817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e00b      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e008      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	e005      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	73fb      	strb	r3, [r7, #15]
    break;
 800981a:	e002      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	bf00      	nop
  }
  return usb_status;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <atof>:
 8009830:	2100      	movs	r1, #0
 8009832:	f000 be8b 	b.w	800a54c <strtod>
	...

08009838 <__errno>:
 8009838:	4b01      	ldr	r3, [pc, #4]	; (8009840 <__errno+0x8>)
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	2000011c 	.word	0x2000011c

08009844 <__libc_init_array>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4d0d      	ldr	r5, [pc, #52]	; (800987c <__libc_init_array+0x38>)
 8009848:	4c0d      	ldr	r4, [pc, #52]	; (8009880 <__libc_init_array+0x3c>)
 800984a:	1b64      	subs	r4, r4, r5
 800984c:	10a4      	asrs	r4, r4, #2
 800984e:	2600      	movs	r6, #0
 8009850:	42a6      	cmp	r6, r4
 8009852:	d109      	bne.n	8009868 <__libc_init_array+0x24>
 8009854:	4d0b      	ldr	r5, [pc, #44]	; (8009884 <__libc_init_array+0x40>)
 8009856:	4c0c      	ldr	r4, [pc, #48]	; (8009888 <__libc_init_array+0x44>)
 8009858:	f003 f8be 	bl	800c9d8 <_init>
 800985c:	1b64      	subs	r4, r4, r5
 800985e:	10a4      	asrs	r4, r4, #2
 8009860:	2600      	movs	r6, #0
 8009862:	42a6      	cmp	r6, r4
 8009864:	d105      	bne.n	8009872 <__libc_init_array+0x2e>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	f855 3b04 	ldr.w	r3, [r5], #4
 800986c:	4798      	blx	r3
 800986e:	3601      	adds	r6, #1
 8009870:	e7ee      	b.n	8009850 <__libc_init_array+0xc>
 8009872:	f855 3b04 	ldr.w	r3, [r5], #4
 8009876:	4798      	blx	r3
 8009878:	3601      	adds	r6, #1
 800987a:	e7f2      	b.n	8009862 <__libc_init_array+0x1e>
 800987c:	0800ceb4 	.word	0x0800ceb4
 8009880:	0800ceb4 	.word	0x0800ceb4
 8009884:	0800ceb4 	.word	0x0800ceb4
 8009888:	0800ceb8 	.word	0x0800ceb8

0800988c <memset>:
 800988c:	4402      	add	r2, r0
 800988e:	4603      	mov	r3, r0
 8009890:	4293      	cmp	r3, r2
 8009892:	d100      	bne.n	8009896 <memset+0xa>
 8009894:	4770      	bx	lr
 8009896:	f803 1b01 	strb.w	r1, [r3], #1
 800989a:	e7f9      	b.n	8009890 <memset+0x4>

0800989c <sniprintf>:
 800989c:	b40c      	push	{r2, r3}
 800989e:	b530      	push	{r4, r5, lr}
 80098a0:	4b17      	ldr	r3, [pc, #92]	; (8009900 <sniprintf+0x64>)
 80098a2:	1e0c      	subs	r4, r1, #0
 80098a4:	681d      	ldr	r5, [r3, #0]
 80098a6:	b09d      	sub	sp, #116	; 0x74
 80098a8:	da08      	bge.n	80098bc <sniprintf+0x20>
 80098aa:	238b      	movs	r3, #139	; 0x8b
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	b01d      	add	sp, #116	; 0x74
 80098b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b8:	b002      	add	sp, #8
 80098ba:	4770      	bx	lr
 80098bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098c4:	bf14      	ite	ne
 80098c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098ca:	4623      	moveq	r3, r4
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098d4:	9002      	str	r0, [sp, #8]
 80098d6:	9006      	str	r0, [sp, #24]
 80098d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80098de:	ab21      	add	r3, sp, #132	; 0x84
 80098e0:	a902      	add	r1, sp, #8
 80098e2:	4628      	mov	r0, r5
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f001 ff95 	bl	800b814 <_svfiprintf_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	bfbc      	itt	lt
 80098ee:	238b      	movlt	r3, #139	; 0x8b
 80098f0:	602b      	strlt	r3, [r5, #0]
 80098f2:	2c00      	cmp	r4, #0
 80098f4:	d0dd      	beq.n	80098b2 <sniprintf+0x16>
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e7d9      	b.n	80098b2 <sniprintf+0x16>
 80098fe:	bf00      	nop
 8009900:	2000011c 	.word	0x2000011c

08009904 <sulp>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	460d      	mov	r5, r1
 800990a:	ec45 4b10 	vmov	d0, r4, r5
 800990e:	4616      	mov	r6, r2
 8009910:	f001 fd2a 	bl	800b368 <__ulp>
 8009914:	ec51 0b10 	vmov	r0, r1, d0
 8009918:	b17e      	cbz	r6, 800993a <sulp+0x36>
 800991a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800991e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd09      	ble.n	800993a <sulp+0x36>
 8009926:	051b      	lsls	r3, r3, #20
 8009928:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800992c:	2400      	movs	r4, #0
 800992e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009932:	4622      	mov	r2, r4
 8009934:	462b      	mov	r3, r5
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	0000      	movs	r0, r0
	...

08009940 <_strtod_l>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	ed2d 8b02 	vpush	{d8}
 8009948:	b09d      	sub	sp, #116	; 0x74
 800994a:	461f      	mov	r7, r3
 800994c:	2300      	movs	r3, #0
 800994e:	9318      	str	r3, [sp, #96]	; 0x60
 8009950:	4ba2      	ldr	r3, [pc, #648]	; (8009bdc <_strtod_l+0x29c>)
 8009952:	9213      	str	r2, [sp, #76]	; 0x4c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	4604      	mov	r4, r0
 800995a:	4618      	mov	r0, r3
 800995c:	4688      	mov	r8, r1
 800995e:	f7f6 fc37 	bl	80001d0 <strlen>
 8009962:	f04f 0a00 	mov.w	sl, #0
 8009966:	4605      	mov	r5, r0
 8009968:	f04f 0b00 	mov.w	fp, #0
 800996c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	2a2b      	cmp	r2, #43	; 0x2b
 8009976:	d04e      	beq.n	8009a16 <_strtod_l+0xd6>
 8009978:	d83b      	bhi.n	80099f2 <_strtod_l+0xb2>
 800997a:	2a0d      	cmp	r2, #13
 800997c:	d834      	bhi.n	80099e8 <_strtod_l+0xa8>
 800997e:	2a08      	cmp	r2, #8
 8009980:	d834      	bhi.n	80099ec <_strtod_l+0xac>
 8009982:	2a00      	cmp	r2, #0
 8009984:	d03e      	beq.n	8009a04 <_strtod_l+0xc4>
 8009986:	2300      	movs	r3, #0
 8009988:	930a      	str	r3, [sp, #40]	; 0x28
 800998a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800998c:	7833      	ldrb	r3, [r6, #0]
 800998e:	2b30      	cmp	r3, #48	; 0x30
 8009990:	f040 80b0 	bne.w	8009af4 <_strtod_l+0x1b4>
 8009994:	7873      	ldrb	r3, [r6, #1]
 8009996:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800999a:	2b58      	cmp	r3, #88	; 0x58
 800999c:	d168      	bne.n	8009a70 <_strtod_l+0x130>
 800999e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	ab18      	add	r3, sp, #96	; 0x60
 80099a4:	9702      	str	r7, [sp, #8]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4a8d      	ldr	r2, [pc, #564]	; (8009be0 <_strtod_l+0x2a0>)
 80099aa:	ab19      	add	r3, sp, #100	; 0x64
 80099ac:	a917      	add	r1, sp, #92	; 0x5c
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 fe40 	bl	800a634 <__gethex>
 80099b4:	f010 0707 	ands.w	r7, r0, #7
 80099b8:	4605      	mov	r5, r0
 80099ba:	d005      	beq.n	80099c8 <_strtod_l+0x88>
 80099bc:	2f06      	cmp	r7, #6
 80099be:	d12c      	bne.n	8009a1a <_strtod_l+0xda>
 80099c0:	3601      	adds	r6, #1
 80099c2:	2300      	movs	r3, #0
 80099c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80099c6:	930a      	str	r3, [sp, #40]	; 0x28
 80099c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 8590 	bne.w	800a4f0 <_strtod_l+0xbb0>
 80099d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d2:	b1eb      	cbz	r3, 8009a10 <_strtod_l+0xd0>
 80099d4:	4652      	mov	r2, sl
 80099d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099da:	ec43 2b10 	vmov	d0, r2, r3
 80099de:	b01d      	add	sp, #116	; 0x74
 80099e0:	ecbd 8b02 	vpop	{d8}
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	2a20      	cmp	r2, #32
 80099ea:	d1cc      	bne.n	8009986 <_strtod_l+0x46>
 80099ec:	3301      	adds	r3, #1
 80099ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80099f0:	e7be      	b.n	8009970 <_strtod_l+0x30>
 80099f2:	2a2d      	cmp	r2, #45	; 0x2d
 80099f4:	d1c7      	bne.n	8009986 <_strtod_l+0x46>
 80099f6:	2201      	movs	r2, #1
 80099f8:	920a      	str	r2, [sp, #40]	; 0x28
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80099fe:	785b      	ldrb	r3, [r3, #1]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1c2      	bne.n	800998a <_strtod_l+0x4a>
 8009a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f040 856e 	bne.w	800a4ec <_strtod_l+0xbac>
 8009a10:	4652      	mov	r2, sl
 8009a12:	465b      	mov	r3, fp
 8009a14:	e7e1      	b.n	80099da <_strtod_l+0x9a>
 8009a16:	2200      	movs	r2, #0
 8009a18:	e7ee      	b.n	80099f8 <_strtod_l+0xb8>
 8009a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a1c:	b13a      	cbz	r2, 8009a2e <_strtod_l+0xee>
 8009a1e:	2135      	movs	r1, #53	; 0x35
 8009a20:	a81a      	add	r0, sp, #104	; 0x68
 8009a22:	f001 fdac 	bl	800b57e <__copybits>
 8009a26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f001 f96b 	bl	800ad04 <_Bfree>
 8009a2e:	3f01      	subs	r7, #1
 8009a30:	2f04      	cmp	r7, #4
 8009a32:	d806      	bhi.n	8009a42 <_strtod_l+0x102>
 8009a34:	e8df f007 	tbb	[pc, r7]
 8009a38:	1714030a 	.word	0x1714030a
 8009a3c:	0a          	.byte	0x0a
 8009a3d:	00          	.byte	0x00
 8009a3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009a42:	0728      	lsls	r0, r5, #28
 8009a44:	d5c0      	bpl.n	80099c8 <_strtod_l+0x88>
 8009a46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009a4a:	e7bd      	b.n	80099c8 <_strtod_l+0x88>
 8009a4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009a50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a5e:	e7f0      	b.n	8009a42 <_strtod_l+0x102>
 8009a60:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009be4 <_strtod_l+0x2a4>
 8009a64:	e7ed      	b.n	8009a42 <_strtod_l+0x102>
 8009a66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a6e:	e7e8      	b.n	8009a42 <_strtod_l+0x102>
 8009a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	2b30      	cmp	r3, #48	; 0x30
 8009a7a:	d0f9      	beq.n	8009a70 <_strtod_l+0x130>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0a3      	beq.n	80099c8 <_strtod_l+0x88>
 8009a80:	2301      	movs	r3, #1
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a90:	464f      	mov	r7, r9
 8009a92:	220a      	movs	r2, #10
 8009a94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009a96:	7806      	ldrb	r6, [r0, #0]
 8009a98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a9c:	b2d9      	uxtb	r1, r3
 8009a9e:	2909      	cmp	r1, #9
 8009aa0:	d92a      	bls.n	8009af8 <_strtod_l+0x1b8>
 8009aa2:	9905      	ldr	r1, [sp, #20]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	f002 f963 	bl	800bd70 <strncmp>
 8009aaa:	b398      	cbz	r0, 8009b14 <_strtod_l+0x1d4>
 8009aac:	2000      	movs	r0, #0
 8009aae:	4632      	mov	r2, r6
 8009ab0:	463d      	mov	r5, r7
 8009ab2:	9005      	str	r0, [sp, #20]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2a65      	cmp	r2, #101	; 0x65
 8009ab8:	d001      	beq.n	8009abe <_strtod_l+0x17e>
 8009aba:	2a45      	cmp	r2, #69	; 0x45
 8009abc:	d118      	bne.n	8009af0 <_strtod_l+0x1b0>
 8009abe:	b91d      	cbnz	r5, 8009ac8 <_strtod_l+0x188>
 8009ac0:	9a04      	ldr	r2, [sp, #16]
 8009ac2:	4302      	orrs	r2, r0
 8009ac4:	d09e      	beq.n	8009a04 <_strtod_l+0xc4>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009acc:	f108 0201 	add.w	r2, r8, #1
 8009ad0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ad2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009ad6:	2a2b      	cmp	r2, #43	; 0x2b
 8009ad8:	d075      	beq.n	8009bc6 <_strtod_l+0x286>
 8009ada:	2a2d      	cmp	r2, #45	; 0x2d
 8009adc:	d07b      	beq.n	8009bd6 <_strtod_l+0x296>
 8009ade:	f04f 0c00 	mov.w	ip, #0
 8009ae2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ae6:	2909      	cmp	r1, #9
 8009ae8:	f240 8082 	bls.w	8009bf0 <_strtod_l+0x2b0>
 8009aec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009af0:	2600      	movs	r6, #0
 8009af2:	e09d      	b.n	8009c30 <_strtod_l+0x2f0>
 8009af4:	2300      	movs	r3, #0
 8009af6:	e7c4      	b.n	8009a82 <_strtod_l+0x142>
 8009af8:	2f08      	cmp	r7, #8
 8009afa:	bfd8      	it	le
 8009afc:	9907      	ldrle	r1, [sp, #28]
 8009afe:	f100 0001 	add.w	r0, r0, #1
 8009b02:	bfda      	itte	le
 8009b04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b08:	9307      	strle	r3, [sp, #28]
 8009b0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009b0e:	3701      	adds	r7, #1
 8009b10:	9017      	str	r0, [sp, #92]	; 0x5c
 8009b12:	e7bf      	b.n	8009a94 <_strtod_l+0x154>
 8009b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b16:	195a      	adds	r2, r3, r5
 8009b18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b1a:	5d5a      	ldrb	r2, [r3, r5]
 8009b1c:	2f00      	cmp	r7, #0
 8009b1e:	d037      	beq.n	8009b90 <_strtod_l+0x250>
 8009b20:	9005      	str	r0, [sp, #20]
 8009b22:	463d      	mov	r5, r7
 8009b24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	d912      	bls.n	8009b52 <_strtod_l+0x212>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e7c2      	b.n	8009ab6 <_strtod_l+0x176>
 8009b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b36:	785a      	ldrb	r2, [r3, #1]
 8009b38:	3001      	adds	r0, #1
 8009b3a:	2a30      	cmp	r2, #48	; 0x30
 8009b3c:	d0f8      	beq.n	8009b30 <_strtod_l+0x1f0>
 8009b3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	f200 84d9 	bhi.w	800a4fa <_strtod_l+0xbba>
 8009b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b4a:	9005      	str	r0, [sp, #20]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	9308      	str	r3, [sp, #32]
 8009b50:	4605      	mov	r5, r0
 8009b52:	3a30      	subs	r2, #48	; 0x30
 8009b54:	f100 0301 	add.w	r3, r0, #1
 8009b58:	d014      	beq.n	8009b84 <_strtod_l+0x244>
 8009b5a:	9905      	ldr	r1, [sp, #20]
 8009b5c:	4419      	add	r1, r3
 8009b5e:	9105      	str	r1, [sp, #20]
 8009b60:	462b      	mov	r3, r5
 8009b62:	eb00 0e05 	add.w	lr, r0, r5
 8009b66:	210a      	movs	r1, #10
 8009b68:	4573      	cmp	r3, lr
 8009b6a:	d113      	bne.n	8009b94 <_strtod_l+0x254>
 8009b6c:	182b      	adds	r3, r5, r0
 8009b6e:	2b08      	cmp	r3, #8
 8009b70:	f105 0501 	add.w	r5, r5, #1
 8009b74:	4405      	add	r5, r0
 8009b76:	dc1c      	bgt.n	8009bb2 <_strtod_l+0x272>
 8009b78:	9907      	ldr	r1, [sp, #28]
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	fb03 2301 	mla	r3, r3, r1, r2
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b86:	1c51      	adds	r1, r2, #1
 8009b88:	9117      	str	r1, [sp, #92]	; 0x5c
 8009b8a:	7852      	ldrb	r2, [r2, #1]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	e7c9      	b.n	8009b24 <_strtod_l+0x1e4>
 8009b90:	4638      	mov	r0, r7
 8009b92:	e7d2      	b.n	8009b3a <_strtod_l+0x1fa>
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	dc04      	bgt.n	8009ba2 <_strtod_l+0x262>
 8009b98:	9e07      	ldr	r6, [sp, #28]
 8009b9a:	434e      	muls	r6, r1
 8009b9c:	9607      	str	r6, [sp, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	e7e2      	b.n	8009b68 <_strtod_l+0x228>
 8009ba2:	f103 0c01 	add.w	ip, r3, #1
 8009ba6:	f1bc 0f10 	cmp.w	ip, #16
 8009baa:	bfd8      	it	le
 8009bac:	fb01 f909 	mulle.w	r9, r1, r9
 8009bb0:	e7f5      	b.n	8009b9e <_strtod_l+0x25e>
 8009bb2:	2d10      	cmp	r5, #16
 8009bb4:	bfdc      	itt	le
 8009bb6:	230a      	movle	r3, #10
 8009bb8:	fb03 2909 	mlale	r9, r3, r9, r2
 8009bbc:	e7e1      	b.n	8009b82 <_strtod_l+0x242>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e77c      	b.n	8009ac0 <_strtod_l+0x180>
 8009bc6:	f04f 0c00 	mov.w	ip, #0
 8009bca:	f108 0202 	add.w	r2, r8, #2
 8009bce:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009bd4:	e785      	b.n	8009ae2 <_strtod_l+0x1a2>
 8009bd6:	f04f 0c01 	mov.w	ip, #1
 8009bda:	e7f6      	b.n	8009bca <_strtod_l+0x28a>
 8009bdc:	0800cb58 	.word	0x0800cb58
 8009be0:	0800ca8c 	.word	0x0800ca8c
 8009be4:	7ff00000 	.word	0x7ff00000
 8009be8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bea:	1c51      	adds	r1, r2, #1
 8009bec:	9117      	str	r1, [sp, #92]	; 0x5c
 8009bee:	7852      	ldrb	r2, [r2, #1]
 8009bf0:	2a30      	cmp	r2, #48	; 0x30
 8009bf2:	d0f9      	beq.n	8009be8 <_strtod_l+0x2a8>
 8009bf4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009bf8:	2908      	cmp	r1, #8
 8009bfa:	f63f af79 	bhi.w	8009af0 <_strtod_l+0x1b0>
 8009bfe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009c02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c04:	9206      	str	r2, [sp, #24]
 8009c06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c08:	1c51      	adds	r1, r2, #1
 8009c0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c0c:	7852      	ldrb	r2, [r2, #1]
 8009c0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009c12:	2e09      	cmp	r6, #9
 8009c14:	d937      	bls.n	8009c86 <_strtod_l+0x346>
 8009c16:	9e06      	ldr	r6, [sp, #24]
 8009c18:	1b89      	subs	r1, r1, r6
 8009c1a:	2908      	cmp	r1, #8
 8009c1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009c20:	dc02      	bgt.n	8009c28 <_strtod_l+0x2e8>
 8009c22:	4576      	cmp	r6, lr
 8009c24:	bfa8      	it	ge
 8009c26:	4676      	movge	r6, lr
 8009c28:	f1bc 0f00 	cmp.w	ip, #0
 8009c2c:	d000      	beq.n	8009c30 <_strtod_l+0x2f0>
 8009c2e:	4276      	negs	r6, r6
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	d14d      	bne.n	8009cd0 <_strtod_l+0x390>
 8009c34:	9904      	ldr	r1, [sp, #16]
 8009c36:	4301      	orrs	r1, r0
 8009c38:	f47f aec6 	bne.w	80099c8 <_strtod_l+0x88>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f47f aee1 	bne.w	8009a04 <_strtod_l+0xc4>
 8009c42:	2a69      	cmp	r2, #105	; 0x69
 8009c44:	d027      	beq.n	8009c96 <_strtod_l+0x356>
 8009c46:	dc24      	bgt.n	8009c92 <_strtod_l+0x352>
 8009c48:	2a49      	cmp	r2, #73	; 0x49
 8009c4a:	d024      	beq.n	8009c96 <_strtod_l+0x356>
 8009c4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009c4e:	f47f aed9 	bne.w	8009a04 <_strtod_l+0xc4>
 8009c52:	499f      	ldr	r1, [pc, #636]	; (8009ed0 <_strtod_l+0x590>)
 8009c54:	a817      	add	r0, sp, #92	; 0x5c
 8009c56:	f000 ff45 	bl	800aae4 <__match>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f43f aed2 	beq.w	8009a04 <_strtod_l+0xc4>
 8009c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b28      	cmp	r3, #40	; 0x28
 8009c66:	d12d      	bne.n	8009cc4 <_strtod_l+0x384>
 8009c68:	499a      	ldr	r1, [pc, #616]	; (8009ed4 <_strtod_l+0x594>)
 8009c6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009c6c:	a817      	add	r0, sp, #92	; 0x5c
 8009c6e:	f000 ff4d 	bl	800ab0c <__hexnan>
 8009c72:	2805      	cmp	r0, #5
 8009c74:	d126      	bne.n	8009cc4 <_strtod_l+0x384>
 8009c76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009c7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c84:	e6a0      	b.n	80099c8 <_strtod_l+0x88>
 8009c86:	210a      	movs	r1, #10
 8009c88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009c8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c90:	e7b9      	b.n	8009c06 <_strtod_l+0x2c6>
 8009c92:	2a6e      	cmp	r2, #110	; 0x6e
 8009c94:	e7db      	b.n	8009c4e <_strtod_l+0x30e>
 8009c96:	4990      	ldr	r1, [pc, #576]	; (8009ed8 <_strtod_l+0x598>)
 8009c98:	a817      	add	r0, sp, #92	; 0x5c
 8009c9a:	f000 ff23 	bl	800aae4 <__match>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f43f aeb0 	beq.w	8009a04 <_strtod_l+0xc4>
 8009ca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ca6:	498d      	ldr	r1, [pc, #564]	; (8009edc <_strtod_l+0x59c>)
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	a817      	add	r0, sp, #92	; 0x5c
 8009cac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cae:	f000 ff19 	bl	800aae4 <__match>
 8009cb2:	b910      	cbnz	r0, 8009cba <_strtod_l+0x37a>
 8009cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009eec <_strtod_l+0x5ac>
 8009cbe:	f04f 0a00 	mov.w	sl, #0
 8009cc2:	e681      	b.n	80099c8 <_strtod_l+0x88>
 8009cc4:	4886      	ldr	r0, [pc, #536]	; (8009ee0 <_strtod_l+0x5a0>)
 8009cc6:	f002 f83b 	bl	800bd40 <nan>
 8009cca:	ec5b ab10 	vmov	sl, fp, d0
 8009cce:	e67b      	b.n	80099c8 <_strtod_l+0x88>
 8009cd0:	9b05      	ldr	r3, [sp, #20]
 8009cd2:	9807      	ldr	r0, [sp, #28]
 8009cd4:	1af3      	subs	r3, r6, r3
 8009cd6:	2f00      	cmp	r7, #0
 8009cd8:	bf08      	it	eq
 8009cda:	462f      	moveq	r7, r5
 8009cdc:	2d10      	cmp	r5, #16
 8009cde:	9306      	str	r3, [sp, #24]
 8009ce0:	46a8      	mov	r8, r5
 8009ce2:	bfa8      	it	ge
 8009ce4:	f04f 0810 	movge.w	r8, #16
 8009ce8:	f7f6 fc0c 	bl	8000504 <__aeabi_ui2d>
 8009cec:	2d09      	cmp	r5, #9
 8009cee:	4682      	mov	sl, r0
 8009cf0:	468b      	mov	fp, r1
 8009cf2:	dd13      	ble.n	8009d1c <_strtod_l+0x3dc>
 8009cf4:	4b7b      	ldr	r3, [pc, #492]	; (8009ee4 <_strtod_l+0x5a4>)
 8009cf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009cfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	4682      	mov	sl, r0
 8009d04:	4648      	mov	r0, r9
 8009d06:	468b      	mov	fp, r1
 8009d08:	f7f6 fbfc 	bl	8000504 <__aeabi_ui2d>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	f7f6 faba 	bl	800028c <__adddf3>
 8009d18:	4682      	mov	sl, r0
 8009d1a:	468b      	mov	fp, r1
 8009d1c:	2d0f      	cmp	r5, #15
 8009d1e:	dc38      	bgt.n	8009d92 <_strtod_l+0x452>
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f43f ae50 	beq.w	80099c8 <_strtod_l+0x88>
 8009d28:	dd24      	ble.n	8009d74 <_strtod_l+0x434>
 8009d2a:	2b16      	cmp	r3, #22
 8009d2c:	dc0b      	bgt.n	8009d46 <_strtod_l+0x406>
 8009d2e:	496d      	ldr	r1, [pc, #436]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d38:	4652      	mov	r2, sl
 8009d3a:	465b      	mov	r3, fp
 8009d3c:	f7f6 fc5c 	bl	80005f8 <__aeabi_dmul>
 8009d40:	4682      	mov	sl, r0
 8009d42:	468b      	mov	fp, r1
 8009d44:	e640      	b.n	80099c8 <_strtod_l+0x88>
 8009d46:	9a06      	ldr	r2, [sp, #24]
 8009d48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	db20      	blt.n	8009d92 <_strtod_l+0x452>
 8009d50:	4c64      	ldr	r4, [pc, #400]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d52:	f1c5 050f 	rsb	r5, r5, #15
 8009d56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d5a:	4652      	mov	r2, sl
 8009d5c:	465b      	mov	r3, fp
 8009d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d62:	f7f6 fc49 	bl	80005f8 <__aeabi_dmul>
 8009d66:	9b06      	ldr	r3, [sp, #24]
 8009d68:	1b5d      	subs	r5, r3, r5
 8009d6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d72:	e7e3      	b.n	8009d3c <_strtod_l+0x3fc>
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	3316      	adds	r3, #22
 8009d78:	db0b      	blt.n	8009d92 <_strtod_l+0x452>
 8009d7a:	9b05      	ldr	r3, [sp, #20]
 8009d7c:	1b9e      	subs	r6, r3, r6
 8009d7e:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009d84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d88:	4650      	mov	r0, sl
 8009d8a:	4659      	mov	r1, fp
 8009d8c:	f7f6 fd5e 	bl	800084c <__aeabi_ddiv>
 8009d90:	e7d6      	b.n	8009d40 <_strtod_l+0x400>
 8009d92:	9b06      	ldr	r3, [sp, #24]
 8009d94:	eba5 0808 	sub.w	r8, r5, r8
 8009d98:	4498      	add	r8, r3
 8009d9a:	f1b8 0f00 	cmp.w	r8, #0
 8009d9e:	dd74      	ble.n	8009e8a <_strtod_l+0x54a>
 8009da0:	f018 030f 	ands.w	r3, r8, #15
 8009da4:	d00a      	beq.n	8009dbc <_strtod_l+0x47c>
 8009da6:	494f      	ldr	r1, [pc, #316]	; (8009ee4 <_strtod_l+0x5a4>)
 8009da8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db4:	f7f6 fc20 	bl	80005f8 <__aeabi_dmul>
 8009db8:	4682      	mov	sl, r0
 8009dba:	468b      	mov	fp, r1
 8009dbc:	f038 080f 	bics.w	r8, r8, #15
 8009dc0:	d04f      	beq.n	8009e62 <_strtod_l+0x522>
 8009dc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009dc6:	dd22      	ble.n	8009e0e <_strtod_l+0x4ce>
 8009dc8:	2500      	movs	r5, #0
 8009dca:	462e      	mov	r6, r5
 8009dcc:	9507      	str	r5, [sp, #28]
 8009dce:	9505      	str	r5, [sp, #20]
 8009dd0:	2322      	movs	r3, #34	; 0x22
 8009dd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009eec <_strtod_l+0x5ac>
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	f04f 0a00 	mov.w	sl, #0
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f43f adf2 	beq.w	80099c8 <_strtod_l+0x88>
 8009de4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 ff8c 	bl	800ad04 <_Bfree>
 8009dec:	9905      	ldr	r1, [sp, #20]
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 ff88 	bl	800ad04 <_Bfree>
 8009df4:	4631      	mov	r1, r6
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 ff84 	bl	800ad04 <_Bfree>
 8009dfc:	9907      	ldr	r1, [sp, #28]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 ff80 	bl	800ad04 <_Bfree>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 ff7c 	bl	800ad04 <_Bfree>
 8009e0c:	e5dc      	b.n	80099c8 <_strtod_l+0x88>
 8009e0e:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <_strtod_l+0x5a8>)
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	2300      	movs	r3, #0
 8009e14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	4699      	mov	r9, r3
 8009e1e:	f1b8 0f01 	cmp.w	r8, #1
 8009e22:	dc21      	bgt.n	8009e68 <_strtod_l+0x528>
 8009e24:	b10b      	cbz	r3, 8009e2a <_strtod_l+0x4ea>
 8009e26:	4682      	mov	sl, r0
 8009e28:	468b      	mov	fp, r1
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <_strtod_l+0x5a8>)
 8009e2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e34:	4652      	mov	r2, sl
 8009e36:	465b      	mov	r3, fp
 8009e38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	4b2a      	ldr	r3, [pc, #168]	; (8009eec <_strtod_l+0x5ac>)
 8009e42:	460a      	mov	r2, r1
 8009e44:	400b      	ands	r3, r1
 8009e46:	492a      	ldr	r1, [pc, #168]	; (8009ef0 <_strtod_l+0x5b0>)
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	d8bc      	bhi.n	8009dc8 <_strtod_l+0x488>
 8009e4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e52:	428b      	cmp	r3, r1
 8009e54:	bf86      	itte	hi
 8009e56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009ef4 <_strtod_l+0x5b4>
 8009e5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e62:	2300      	movs	r3, #0
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	e084      	b.n	8009f72 <_strtod_l+0x632>
 8009e68:	f018 0f01 	tst.w	r8, #1
 8009e6c:	d005      	beq.n	8009e7a <_strtod_l+0x53a>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	9a04      	ldr	r2, [sp, #16]
 8009e7c:	3208      	adds	r2, #8
 8009e7e:	f109 0901 	add.w	r9, r9, #1
 8009e82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e86:	9204      	str	r2, [sp, #16]
 8009e88:	e7c9      	b.n	8009e1e <_strtod_l+0x4de>
 8009e8a:	d0ea      	beq.n	8009e62 <_strtod_l+0x522>
 8009e8c:	f1c8 0800 	rsb	r8, r8, #0
 8009e90:	f018 020f 	ands.w	r2, r8, #15
 8009e94:	d00a      	beq.n	8009eac <_strtod_l+0x56c>
 8009e96:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <_strtod_l+0x5a4>)
 8009e98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	4659      	mov	r1, fp
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fcd2 	bl	800084c <__aeabi_ddiv>
 8009ea8:	4682      	mov	sl, r0
 8009eaa:	468b      	mov	fp, r1
 8009eac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009eb0:	d0d7      	beq.n	8009e62 <_strtod_l+0x522>
 8009eb2:	f1b8 0f1f 	cmp.w	r8, #31
 8009eb6:	dd1f      	ble.n	8009ef8 <_strtod_l+0x5b8>
 8009eb8:	2500      	movs	r5, #0
 8009eba:	462e      	mov	r6, r5
 8009ebc:	9507      	str	r5, [sp, #28]
 8009ebe:	9505      	str	r5, [sp, #20]
 8009ec0:	2322      	movs	r3, #34	; 0x22
 8009ec2:	f04f 0a00 	mov.w	sl, #0
 8009ec6:	f04f 0b00 	mov.w	fp, #0
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	e786      	b.n	8009ddc <_strtod_l+0x49c>
 8009ece:	bf00      	nop
 8009ed0:	0800ca89 	.word	0x0800ca89
 8009ed4:	0800caa0 	.word	0x0800caa0
 8009ed8:	0800ca80 	.word	0x0800ca80
 8009edc:	0800ca83 	.word	0x0800ca83
 8009ee0:	0800cd4a 	.word	0x0800cd4a
 8009ee4:	0800cc08 	.word	0x0800cc08
 8009ee8:	0800cbe0 	.word	0x0800cbe0
 8009eec:	7ff00000 	.word	0x7ff00000
 8009ef0:	7ca00000 	.word	0x7ca00000
 8009ef4:	7fefffff 	.word	0x7fefffff
 8009ef8:	f018 0310 	ands.w	r3, r8, #16
 8009efc:	bf18      	it	ne
 8009efe:	236a      	movne	r3, #106	; 0x6a
 8009f00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a2b0 <_strtod_l+0x970>
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f018 0f01 	tst.w	r8, #1
 8009f10:	d004      	beq.n	8009f1c <_strtod_l+0x5dc>
 8009f12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f16:	f7f6 fb6f 	bl	80005f8 <__aeabi_dmul>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009f20:	f109 0908 	add.w	r9, r9, #8
 8009f24:	d1f2      	bne.n	8009f0c <_strtod_l+0x5cc>
 8009f26:	b10b      	cbz	r3, 8009f2c <_strtod_l+0x5ec>
 8009f28:	4682      	mov	sl, r0
 8009f2a:	468b      	mov	fp, r1
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	b1c3      	cbz	r3, 8009f62 <_strtod_l+0x622>
 8009f30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	dd11      	ble.n	8009f62 <_strtod_l+0x622>
 8009f3e:	2b1f      	cmp	r3, #31
 8009f40:	f340 8124 	ble.w	800a18c <_strtod_l+0x84c>
 8009f44:	2b34      	cmp	r3, #52	; 0x34
 8009f46:	bfde      	ittt	le
 8009f48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f4c:	f04f 33ff 	movle.w	r3, #4294967295
 8009f50:	fa03 f202 	lslle.w	r2, r3, r2
 8009f54:	f04f 0a00 	mov.w	sl, #0
 8009f58:	bfcc      	ite	gt
 8009f5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f5e:	ea02 0b01 	andle.w	fp, r2, r1
 8009f62:	2200      	movs	r2, #0
 8009f64:	2300      	movs	r3, #0
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	f7f6 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d1a2      	bne.n	8009eb8 <_strtod_l+0x578>
 8009f72:	9b07      	ldr	r3, [sp, #28]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	9908      	ldr	r1, [sp, #32]
 8009f78:	462b      	mov	r3, r5
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 ff29 	bl	800add4 <__s2b>
 8009f82:	9007      	str	r0, [sp, #28]
 8009f84:	2800      	cmp	r0, #0
 8009f86:	f43f af1f 	beq.w	8009dc8 <_strtod_l+0x488>
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	1b9e      	subs	r6, r3, r6
 8009f8e:	9b06      	ldr	r3, [sp, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bfb4      	ite	lt
 8009f94:	4633      	movlt	r3, r6
 8009f96:	2300      	movge	r3, #0
 8009f98:	930c      	str	r3, [sp, #48]	; 0x30
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fa2:	9312      	str	r3, [sp, #72]	; 0x48
 8009fa4:	462e      	mov	r6, r5
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	4620      	mov	r0, r4
 8009faa:	6859      	ldr	r1, [r3, #4]
 8009fac:	f000 fe6a 	bl	800ac84 <_Balloc>
 8009fb0:	9005      	str	r0, [sp, #20]
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f43f af0c 	beq.w	8009dd0 <_strtod_l+0x490>
 8009fb8:	9b07      	ldr	r3, [sp, #28]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	3202      	adds	r2, #2
 8009fbe:	f103 010c 	add.w	r1, r3, #12
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f000 fe4f 	bl	800ac68 <memcpy>
 8009fca:	ec4b ab10 	vmov	d0, sl, fp
 8009fce:	aa1a      	add	r2, sp, #104	; 0x68
 8009fd0:	a919      	add	r1, sp, #100	; 0x64
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f001 fa44 	bl	800b460 <__d2b>
 8009fd8:	ec4b ab18 	vmov	d8, sl, fp
 8009fdc:	9018      	str	r0, [sp, #96]	; 0x60
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f43f aef6 	beq.w	8009dd0 <_strtod_l+0x490>
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 ff8e 	bl	800af08 <__i2b>
 8009fec:	4606      	mov	r6, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f43f aeee 	beq.w	8009dd0 <_strtod_l+0x490>
 8009ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ff6:	9904      	ldr	r1, [sp, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfab      	itete	ge
 8009ffc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009ffe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a000:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a002:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a006:	bfac      	ite	ge
 800a008:	eb03 0902 	addge.w	r9, r3, r2
 800a00c:	1ad7      	sublt	r7, r2, r3
 800a00e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a010:	eba3 0801 	sub.w	r8, r3, r1
 800a014:	4490      	add	r8, r2
 800a016:	4ba1      	ldr	r3, [pc, #644]	; (800a29c <_strtod_l+0x95c>)
 800a018:	f108 38ff 	add.w	r8, r8, #4294967295
 800a01c:	4598      	cmp	r8, r3
 800a01e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a022:	f280 80c7 	bge.w	800a1b4 <_strtod_l+0x874>
 800a026:	eba3 0308 	sub.w	r3, r3, r8
 800a02a:	2b1f      	cmp	r3, #31
 800a02c:	eba2 0203 	sub.w	r2, r2, r3
 800a030:	f04f 0101 	mov.w	r1, #1
 800a034:	f300 80b1 	bgt.w	800a19a <_strtod_l+0x85a>
 800a038:	fa01 f303 	lsl.w	r3, r1, r3
 800a03c:	930d      	str	r3, [sp, #52]	; 0x34
 800a03e:	2300      	movs	r3, #0
 800a040:	9308      	str	r3, [sp, #32]
 800a042:	eb09 0802 	add.w	r8, r9, r2
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	45c1      	cmp	r9, r8
 800a04a:	4417      	add	r7, r2
 800a04c:	441f      	add	r7, r3
 800a04e:	464b      	mov	r3, r9
 800a050:	bfa8      	it	ge
 800a052:	4643      	movge	r3, r8
 800a054:	42bb      	cmp	r3, r7
 800a056:	bfa8      	it	ge
 800a058:	463b      	movge	r3, r7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfc2      	ittt	gt
 800a05e:	eba8 0803 	subgt.w	r8, r8, r3
 800a062:	1aff      	subgt	r7, r7, r3
 800a064:	eba9 0903 	subgt.w	r9, r9, r3
 800a068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd17      	ble.n	800a09e <_strtod_l+0x75e>
 800a06e:	4631      	mov	r1, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f001 f808 	bl	800b088 <__pow5mult>
 800a078:	4606      	mov	r6, r0
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f43f aea8 	beq.w	8009dd0 <_strtod_l+0x490>
 800a080:	4601      	mov	r1, r0
 800a082:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a084:	4620      	mov	r0, r4
 800a086:	f000 ff55 	bl	800af34 <__multiply>
 800a08a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f43f ae9f 	beq.w	8009dd0 <_strtod_l+0x490>
 800a092:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fe35 	bl	800ad04 <_Bfree>
 800a09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a09c:	9318      	str	r3, [sp, #96]	; 0x60
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	f300 808c 	bgt.w	800a1be <_strtod_l+0x87e>
 800a0a6:	9b06      	ldr	r3, [sp, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd08      	ble.n	800a0be <_strtod_l+0x77e>
 800a0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ae:	9905      	ldr	r1, [sp, #20]
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 ffe9 	bl	800b088 <__pow5mult>
 800a0b6:	9005      	str	r0, [sp, #20]
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	f43f ae89 	beq.w	8009dd0 <_strtod_l+0x490>
 800a0be:	2f00      	cmp	r7, #0
 800a0c0:	dd08      	ble.n	800a0d4 <_strtod_l+0x794>
 800a0c2:	9905      	ldr	r1, [sp, #20]
 800a0c4:	463a      	mov	r2, r7
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f001 f838 	bl	800b13c <__lshift>
 800a0cc:	9005      	str	r0, [sp, #20]
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f ae7e 	beq.w	8009dd0 <_strtod_l+0x490>
 800a0d4:	f1b9 0f00 	cmp.w	r9, #0
 800a0d8:	dd08      	ble.n	800a0ec <_strtod_l+0x7ac>
 800a0da:	4631      	mov	r1, r6
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f001 f82c 	bl	800b13c <__lshift>
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f ae72 	beq.w	8009dd0 <_strtod_l+0x490>
 800a0ec:	9a05      	ldr	r2, [sp, #20]
 800a0ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f001 f8af 	bl	800b254 <__mdiff>
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	f43f ae69 	beq.w	8009dd0 <_strtod_l+0x490>
 800a0fe:	68c3      	ldr	r3, [r0, #12]
 800a100:	930b      	str	r3, [sp, #44]	; 0x2c
 800a102:	2300      	movs	r3, #0
 800a104:	60c3      	str	r3, [r0, #12]
 800a106:	4631      	mov	r1, r6
 800a108:	f001 f888 	bl	800b21c <__mcmp>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	da60      	bge.n	800a1d2 <_strtod_l+0x892>
 800a110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a112:	ea53 030a 	orrs.w	r3, r3, sl
 800a116:	f040 8082 	bne.w	800a21e <_strtod_l+0x8de>
 800a11a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d17d      	bne.n	800a21e <_strtod_l+0x8de>
 800a122:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a126:	0d1b      	lsrs	r3, r3, #20
 800a128:	051b      	lsls	r3, r3, #20
 800a12a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a12e:	d976      	bls.n	800a21e <_strtod_l+0x8de>
 800a130:	696b      	ldr	r3, [r5, #20]
 800a132:	b913      	cbnz	r3, 800a13a <_strtod_l+0x7fa>
 800a134:	692b      	ldr	r3, [r5, #16]
 800a136:	2b01      	cmp	r3, #1
 800a138:	dd71      	ble.n	800a21e <_strtod_l+0x8de>
 800a13a:	4629      	mov	r1, r5
 800a13c:	2201      	movs	r2, #1
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 fffc 	bl	800b13c <__lshift>
 800a144:	4631      	mov	r1, r6
 800a146:	4605      	mov	r5, r0
 800a148:	f001 f868 	bl	800b21c <__mcmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	dd66      	ble.n	800a21e <_strtod_l+0x8de>
 800a150:	9904      	ldr	r1, [sp, #16]
 800a152:	4a53      	ldr	r2, [pc, #332]	; (800a2a0 <_strtod_l+0x960>)
 800a154:	465b      	mov	r3, fp
 800a156:	2900      	cmp	r1, #0
 800a158:	f000 8081 	beq.w	800a25e <_strtod_l+0x91e>
 800a15c:	ea02 010b 	and.w	r1, r2, fp
 800a160:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a164:	dc7b      	bgt.n	800a25e <_strtod_l+0x91e>
 800a166:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a16a:	f77f aea9 	ble.w	8009ec0 <_strtod_l+0x580>
 800a16e:	4b4d      	ldr	r3, [pc, #308]	; (800a2a4 <_strtod_l+0x964>)
 800a170:	4650      	mov	r0, sl
 800a172:	4659      	mov	r1, fp
 800a174:	2200      	movs	r2, #0
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	460b      	mov	r3, r1
 800a17c:	4303      	orrs	r3, r0
 800a17e:	bf08      	it	eq
 800a180:	2322      	moveq	r3, #34	; 0x22
 800a182:	4682      	mov	sl, r0
 800a184:	468b      	mov	fp, r1
 800a186:	bf08      	it	eq
 800a188:	6023      	streq	r3, [r4, #0]
 800a18a:	e62b      	b.n	8009de4 <_strtod_l+0x4a4>
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	ea03 0a0a 	and.w	sl, r3, sl
 800a198:	e6e3      	b.n	8009f62 <_strtod_l+0x622>
 800a19a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a19e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a1a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a1a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a1aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a1ae:	9308      	str	r3, [sp, #32]
 800a1b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a1b2:	e746      	b.n	800a042 <_strtod_l+0x702>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a1bc:	e741      	b.n	800a042 <_strtod_l+0x702>
 800a1be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 ffba 	bl	800b13c <__lshift>
 800a1c8:	9018      	str	r0, [sp, #96]	; 0x60
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f47f af6b 	bne.w	800a0a6 <_strtod_l+0x766>
 800a1d0:	e5fe      	b.n	8009dd0 <_strtod_l+0x490>
 800a1d2:	465f      	mov	r7, fp
 800a1d4:	d16e      	bne.n	800a2b4 <_strtod_l+0x974>
 800a1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1dc:	b342      	cbz	r2, 800a230 <_strtod_l+0x8f0>
 800a1de:	4a32      	ldr	r2, [pc, #200]	; (800a2a8 <_strtod_l+0x968>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d128      	bne.n	800a236 <_strtod_l+0x8f6>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	4651      	mov	r1, sl
 800a1e8:	b1eb      	cbz	r3, 800a226 <_strtod_l+0x8e6>
 800a1ea:	4b2d      	ldr	r3, [pc, #180]	; (800a2a0 <_strtod_l+0x960>)
 800a1ec:	403b      	ands	r3, r7
 800a1ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f6:	d819      	bhi.n	800a22c <_strtod_l+0x8ec>
 800a1f8:	0d1b      	lsrs	r3, r3, #20
 800a1fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	4299      	cmp	r1, r3
 800a204:	d117      	bne.n	800a236 <_strtod_l+0x8f6>
 800a206:	4b29      	ldr	r3, [pc, #164]	; (800a2ac <_strtod_l+0x96c>)
 800a208:	429f      	cmp	r7, r3
 800a20a:	d102      	bne.n	800a212 <_strtod_l+0x8d2>
 800a20c:	3101      	adds	r1, #1
 800a20e:	f43f addf 	beq.w	8009dd0 <_strtod_l+0x490>
 800a212:	4b23      	ldr	r3, [pc, #140]	; (800a2a0 <_strtod_l+0x960>)
 800a214:	403b      	ands	r3, r7
 800a216:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a21a:	f04f 0a00 	mov.w	sl, #0
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1a4      	bne.n	800a16e <_strtod_l+0x82e>
 800a224:	e5de      	b.n	8009de4 <_strtod_l+0x4a4>
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	e7ea      	b.n	800a202 <_strtod_l+0x8c2>
 800a22c:	4613      	mov	r3, r2
 800a22e:	e7e8      	b.n	800a202 <_strtod_l+0x8c2>
 800a230:	ea53 030a 	orrs.w	r3, r3, sl
 800a234:	d08c      	beq.n	800a150 <_strtod_l+0x810>
 800a236:	9b08      	ldr	r3, [sp, #32]
 800a238:	b1db      	cbz	r3, 800a272 <_strtod_l+0x932>
 800a23a:	423b      	tst	r3, r7
 800a23c:	d0ef      	beq.n	800a21e <_strtod_l+0x8de>
 800a23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a240:	9a04      	ldr	r2, [sp, #16]
 800a242:	4650      	mov	r0, sl
 800a244:	4659      	mov	r1, fp
 800a246:	b1c3      	cbz	r3, 800a27a <_strtod_l+0x93a>
 800a248:	f7ff fb5c 	bl	8009904 <sulp>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	ec51 0b18 	vmov	r0, r1, d8
 800a254:	f7f6 f81a 	bl	800028c <__adddf3>
 800a258:	4682      	mov	sl, r0
 800a25a:	468b      	mov	fp, r1
 800a25c:	e7df      	b.n	800a21e <_strtod_l+0x8de>
 800a25e:	4013      	ands	r3, r2
 800a260:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a264:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a268:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a26c:	f04f 3aff 	mov.w	sl, #4294967295
 800a270:	e7d5      	b.n	800a21e <_strtod_l+0x8de>
 800a272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a274:	ea13 0f0a 	tst.w	r3, sl
 800a278:	e7e0      	b.n	800a23c <_strtod_l+0x8fc>
 800a27a:	f7ff fb43 	bl	8009904 <sulp>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	ec51 0b18 	vmov	r0, r1, d8
 800a286:	f7f5 ffff 	bl	8000288 <__aeabi_dsub>
 800a28a:	2200      	movs	r2, #0
 800a28c:	2300      	movs	r3, #0
 800a28e:	4682      	mov	sl, r0
 800a290:	468b      	mov	fp, r1
 800a292:	f7f6 fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 800a296:	2800      	cmp	r0, #0
 800a298:	d0c1      	beq.n	800a21e <_strtod_l+0x8de>
 800a29a:	e611      	b.n	8009ec0 <_strtod_l+0x580>
 800a29c:	fffffc02 	.word	0xfffffc02
 800a2a0:	7ff00000 	.word	0x7ff00000
 800a2a4:	39500000 	.word	0x39500000
 800a2a8:	000fffff 	.word	0x000fffff
 800a2ac:	7fefffff 	.word	0x7fefffff
 800a2b0:	0800cab8 	.word	0x0800cab8
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f001 f92e 	bl	800b518 <__ratio>
 800a2bc:	ec59 8b10 	vmov	r8, r9, d0
 800a2c0:	ee10 0a10 	vmov	r0, s0
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	f7f6 fc10 	bl	8000af0 <__aeabi_dcmple>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d07a      	beq.n	800a3ca <_strtod_l+0xa8a>
 800a2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04a      	beq.n	800a370 <_strtod_l+0xa30>
 800a2da:	4b95      	ldr	r3, [pc, #596]	; (800a530 <_strtod_l+0xbf0>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a530 <_strtod_l+0xbf0>
 800a2e6:	f04f 0800 	mov.w	r8, #0
 800a2ea:	4b92      	ldr	r3, [pc, #584]	; (800a534 <_strtod_l+0xbf4>)
 800a2ec:	403b      	ands	r3, r7
 800a2ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f2:	4b91      	ldr	r3, [pc, #580]	; (800a538 <_strtod_l+0xbf8>)
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	f040 80b0 	bne.w	800a45a <_strtod_l+0xb1a>
 800a2fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a302:	ec4b ab10 	vmov	d0, sl, fp
 800a306:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a30a:	f001 f82d 	bl	800b368 <__ulp>
 800a30e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a312:	ec53 2b10 	vmov	r2, r3, d0
 800a316:	f7f6 f96f 	bl	80005f8 <__aeabi_dmul>
 800a31a:	4652      	mov	r2, sl
 800a31c:	465b      	mov	r3, fp
 800a31e:	f7f5 ffb5 	bl	800028c <__adddf3>
 800a322:	460b      	mov	r3, r1
 800a324:	4983      	ldr	r1, [pc, #524]	; (800a534 <_strtod_l+0xbf4>)
 800a326:	4a85      	ldr	r2, [pc, #532]	; (800a53c <_strtod_l+0xbfc>)
 800a328:	4019      	ands	r1, r3
 800a32a:	4291      	cmp	r1, r2
 800a32c:	4682      	mov	sl, r0
 800a32e:	d960      	bls.n	800a3f2 <_strtod_l+0xab2>
 800a330:	ee18 3a90 	vmov	r3, s17
 800a334:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a338:	4293      	cmp	r3, r2
 800a33a:	d104      	bne.n	800a346 <_strtod_l+0xa06>
 800a33c:	ee18 3a10 	vmov	r3, s16
 800a340:	3301      	adds	r3, #1
 800a342:	f43f ad45 	beq.w	8009dd0 <_strtod_l+0x490>
 800a346:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a548 <_strtod_l+0xc08>
 800a34a:	f04f 3aff 	mov.w	sl, #4294967295
 800a34e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fcd7 	bl	800ad04 <_Bfree>
 800a356:	9905      	ldr	r1, [sp, #20]
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fcd3 	bl	800ad04 <_Bfree>
 800a35e:	4631      	mov	r1, r6
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fccf 	bl	800ad04 <_Bfree>
 800a366:	4629      	mov	r1, r5
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fccb 	bl	800ad04 <_Bfree>
 800a36e:	e61a      	b.n	8009fa6 <_strtod_l+0x666>
 800a370:	f1ba 0f00 	cmp.w	sl, #0
 800a374:	d11b      	bne.n	800a3ae <_strtod_l+0xa6e>
 800a376:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a37a:	b9f3      	cbnz	r3, 800a3ba <_strtod_l+0xa7a>
 800a37c:	4b6c      	ldr	r3, [pc, #432]	; (800a530 <_strtod_l+0xbf0>)
 800a37e:	2200      	movs	r2, #0
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800a388:	b9d0      	cbnz	r0, 800a3c0 <_strtod_l+0xa80>
 800a38a:	4640      	mov	r0, r8
 800a38c:	4649      	mov	r1, r9
 800a38e:	4b6c      	ldr	r3, [pc, #432]	; (800a540 <_strtod_l+0xc00>)
 800a390:	2200      	movs	r2, #0
 800a392:	f7f6 f931 	bl	80005f8 <__aeabi_dmul>
 800a396:	4680      	mov	r8, r0
 800a398:	4689      	mov	r9, r1
 800a39a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a39e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a3a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a3a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3ac:	e79d      	b.n	800a2ea <_strtod_l+0x9aa>
 800a3ae:	f1ba 0f01 	cmp.w	sl, #1
 800a3b2:	d102      	bne.n	800a3ba <_strtod_l+0xa7a>
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	f43f ad83 	beq.w	8009ec0 <_strtod_l+0x580>
 800a3ba:	4b62      	ldr	r3, [pc, #392]	; (800a544 <_strtod_l+0xc04>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	e78e      	b.n	800a2de <_strtod_l+0x99e>
 800a3c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a540 <_strtod_l+0xc00>
 800a3c4:	f04f 0800 	mov.w	r8, #0
 800a3c8:	e7e7      	b.n	800a39a <_strtod_l+0xa5a>
 800a3ca:	4b5d      	ldr	r3, [pc, #372]	; (800a540 <_strtod_l+0xc00>)
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f7f6 f911 	bl	80005f8 <__aeabi_dmul>
 800a3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d8:	4680      	mov	r8, r0
 800a3da:	4689      	mov	r9, r1
 800a3dc:	b933      	cbnz	r3, 800a3ec <_strtod_l+0xaac>
 800a3de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a3ea:	e7dd      	b.n	800a3a8 <_strtod_l+0xa68>
 800a3ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a3f0:	e7f9      	b.n	800a3e6 <_strtod_l+0xaa6>
 800a3f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1a8      	bne.n	800a34e <_strtod_l+0xa0e>
 800a3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a402:	0d1b      	lsrs	r3, r3, #20
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	429a      	cmp	r2, r3
 800a408:	d1a1      	bne.n	800a34e <_strtod_l+0xa0e>
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f6 fc15 	bl	8000c3c <__aeabi_d2lz>
 800a412:	f7f6 f8c3 	bl	800059c <__aeabi_l2d>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a428:	ea43 030a 	orr.w	r3, r3, sl
 800a42c:	4313      	orrs	r3, r2
 800a42e:	4680      	mov	r8, r0
 800a430:	4689      	mov	r9, r1
 800a432:	d055      	beq.n	800a4e0 <_strtod_l+0xba0>
 800a434:	a336      	add	r3, pc, #216	; (adr r3, 800a510 <_strtod_l+0xbd0>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f6 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800a43e:	2800      	cmp	r0, #0
 800a440:	f47f acd0 	bne.w	8009de4 <_strtod_l+0x4a4>
 800a444:	a334      	add	r3, pc, #208	; (adr r3, 800a518 <_strtod_l+0xbd8>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f6 fb63 	bl	8000b18 <__aeabi_dcmpgt>
 800a452:	2800      	cmp	r0, #0
 800a454:	f43f af7b 	beq.w	800a34e <_strtod_l+0xa0e>
 800a458:	e4c4      	b.n	8009de4 <_strtod_l+0x4a4>
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	b333      	cbz	r3, 800a4ac <_strtod_l+0xb6c>
 800a45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a460:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a464:	d822      	bhi.n	800a4ac <_strtod_l+0xb6c>
 800a466:	a32e      	add	r3, pc, #184	; (adr r3, 800a520 <_strtod_l+0xbe0>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	4640      	mov	r0, r8
 800a46e:	4649      	mov	r1, r9
 800a470:	f7f6 fb3e 	bl	8000af0 <__aeabi_dcmple>
 800a474:	b1a0      	cbz	r0, 800a4a0 <_strtod_l+0xb60>
 800a476:	4649      	mov	r1, r9
 800a478:	4640      	mov	r0, r8
 800a47a:	f7f6 fb57 	bl	8000b2c <__aeabi_d2uiz>
 800a47e:	2801      	cmp	r0, #1
 800a480:	bf38      	it	cc
 800a482:	2001      	movcc	r0, #1
 800a484:	f7f6 f83e 	bl	8000504 <__aeabi_ui2d>
 800a488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	bb23      	cbnz	r3, 800a4da <_strtod_l+0xb9a>
 800a490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a494:	9010      	str	r0, [sp, #64]	; 0x40
 800a496:	9311      	str	r3, [sp, #68]	; 0x44
 800a498:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a49c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a4b4:	eef0 0a68 	vmov.f32	s1, s17
 800a4b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4bc:	f000 ff54 	bl	800b368 <__ulp>
 800a4c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4c4:	ec53 2b10 	vmov	r2, r3, d0
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	ec53 2b18 	vmov	r2, r3, d8
 800a4d0:	f7f5 fedc 	bl	800028c <__adddf3>
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	468b      	mov	fp, r1
 800a4d8:	e78d      	b.n	800a3f6 <_strtod_l+0xab6>
 800a4da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a4de:	e7db      	b.n	800a498 <_strtod_l+0xb58>
 800a4e0:	a311      	add	r3, pc, #68	; (adr r3, 800a528 <_strtod_l+0xbe8>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f6 faf9 	bl	8000adc <__aeabi_dcmplt>
 800a4ea:	e7b2      	b.n	800a452 <_strtod_l+0xb12>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a4f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	f7ff ba6b 	b.w	80099d0 <_strtod_l+0x90>
 800a4fa:	2a65      	cmp	r2, #101	; 0x65
 800a4fc:	f43f ab5f 	beq.w	8009bbe <_strtod_l+0x27e>
 800a500:	2a45      	cmp	r2, #69	; 0x45
 800a502:	f43f ab5c 	beq.w	8009bbe <_strtod_l+0x27e>
 800a506:	2301      	movs	r3, #1
 800a508:	f7ff bb94 	b.w	8009c34 <_strtod_l+0x2f4>
 800a50c:	f3af 8000 	nop.w
 800a510:	94a03595 	.word	0x94a03595
 800a514:	3fdfffff 	.word	0x3fdfffff
 800a518:	35afe535 	.word	0x35afe535
 800a51c:	3fe00000 	.word	0x3fe00000
 800a520:	ffc00000 	.word	0xffc00000
 800a524:	41dfffff 	.word	0x41dfffff
 800a528:	94a03595 	.word	0x94a03595
 800a52c:	3fcfffff 	.word	0x3fcfffff
 800a530:	3ff00000 	.word	0x3ff00000
 800a534:	7ff00000 	.word	0x7ff00000
 800a538:	7fe00000 	.word	0x7fe00000
 800a53c:	7c9fffff 	.word	0x7c9fffff
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	bff00000 	.word	0xbff00000
 800a548:	7fefffff 	.word	0x7fefffff

0800a54c <strtod>:
 800a54c:	460a      	mov	r2, r1
 800a54e:	4601      	mov	r1, r0
 800a550:	4802      	ldr	r0, [pc, #8]	; (800a55c <strtod+0x10>)
 800a552:	4b03      	ldr	r3, [pc, #12]	; (800a560 <strtod+0x14>)
 800a554:	6800      	ldr	r0, [r0, #0]
 800a556:	f7ff b9f3 	b.w	8009940 <_strtod_l>
 800a55a:	bf00      	nop
 800a55c:	2000011c 	.word	0x2000011c
 800a560:	20000184 	.word	0x20000184

0800a564 <rshift>:
 800a564:	6903      	ldr	r3, [r0, #16]
 800a566:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a56a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a56e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a572:	f100 0414 	add.w	r4, r0, #20
 800a576:	dd45      	ble.n	800a604 <rshift+0xa0>
 800a578:	f011 011f 	ands.w	r1, r1, #31
 800a57c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a580:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a584:	d10c      	bne.n	800a5a0 <rshift+0x3c>
 800a586:	f100 0710 	add.w	r7, r0, #16
 800a58a:	4629      	mov	r1, r5
 800a58c:	42b1      	cmp	r1, r6
 800a58e:	d334      	bcc.n	800a5fa <rshift+0x96>
 800a590:	1a9b      	subs	r3, r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	1eea      	subs	r2, r5, #3
 800a596:	4296      	cmp	r6, r2
 800a598:	bf38      	it	cc
 800a59a:	2300      	movcc	r3, #0
 800a59c:	4423      	add	r3, r4
 800a59e:	e015      	b.n	800a5cc <rshift+0x68>
 800a5a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5a4:	f1c1 0820 	rsb	r8, r1, #32
 800a5a8:	40cf      	lsrs	r7, r1
 800a5aa:	f105 0e04 	add.w	lr, r5, #4
 800a5ae:	46a1      	mov	r9, r4
 800a5b0:	4576      	cmp	r6, lr
 800a5b2:	46f4      	mov	ip, lr
 800a5b4:	d815      	bhi.n	800a5e2 <rshift+0x7e>
 800a5b6:	1a9a      	subs	r2, r3, r2
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	3a04      	subs	r2, #4
 800a5bc:	3501      	adds	r5, #1
 800a5be:	42ae      	cmp	r6, r5
 800a5c0:	bf38      	it	cc
 800a5c2:	2200      	movcc	r2, #0
 800a5c4:	18a3      	adds	r3, r4, r2
 800a5c6:	50a7      	str	r7, [r4, r2]
 800a5c8:	b107      	cbz	r7, 800a5cc <rshift+0x68>
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	1b1a      	subs	r2, r3, r4
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5d4:	bf08      	it	eq
 800a5d6:	2300      	moveq	r3, #0
 800a5d8:	6102      	str	r2, [r0, #16]
 800a5da:	bf08      	it	eq
 800a5dc:	6143      	streq	r3, [r0, #20]
 800a5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	f8dc c000 	ldr.w	ip, [ip]
 800a5e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5ea:	ea4c 0707 	orr.w	r7, ip, r7
 800a5ee:	f849 7b04 	str.w	r7, [r9], #4
 800a5f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5f6:	40cf      	lsrs	r7, r1
 800a5f8:	e7da      	b.n	800a5b0 <rshift+0x4c>
 800a5fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800a602:	e7c3      	b.n	800a58c <rshift+0x28>
 800a604:	4623      	mov	r3, r4
 800a606:	e7e1      	b.n	800a5cc <rshift+0x68>

0800a608 <__hexdig_fun>:
 800a608:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	d802      	bhi.n	800a616 <__hexdig_fun+0xe>
 800a610:	3820      	subs	r0, #32
 800a612:	b2c0      	uxtb	r0, r0
 800a614:	4770      	bx	lr
 800a616:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d801      	bhi.n	800a622 <__hexdig_fun+0x1a>
 800a61e:	3847      	subs	r0, #71	; 0x47
 800a620:	e7f7      	b.n	800a612 <__hexdig_fun+0xa>
 800a622:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a626:	2b05      	cmp	r3, #5
 800a628:	d801      	bhi.n	800a62e <__hexdig_fun+0x26>
 800a62a:	3827      	subs	r0, #39	; 0x27
 800a62c:	e7f1      	b.n	800a612 <__hexdig_fun+0xa>
 800a62e:	2000      	movs	r0, #0
 800a630:	4770      	bx	lr
	...

0800a634 <__gethex>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	ed2d 8b02 	vpush	{d8}
 800a63c:	b089      	sub	sp, #36	; 0x24
 800a63e:	ee08 0a10 	vmov	s16, r0
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	4bb4      	ldr	r3, [pc, #720]	; (800a918 <__gethex+0x2e4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	468b      	mov	fp, r1
 800a64e:	4690      	mov	r8, r2
 800a650:	f7f5 fdbe 	bl	80001d0 <strlen>
 800a654:	9b01      	ldr	r3, [sp, #4]
 800a656:	f8db 2000 	ldr.w	r2, [fp]
 800a65a:	4403      	add	r3, r0
 800a65c:	4682      	mov	sl, r0
 800a65e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	1c93      	adds	r3, r2, #2
 800a666:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a66a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a66e:	32fe      	adds	r2, #254	; 0xfe
 800a670:	18d1      	adds	r1, r2, r3
 800a672:	461f      	mov	r7, r3
 800a674:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a678:	9100      	str	r1, [sp, #0]
 800a67a:	2830      	cmp	r0, #48	; 0x30
 800a67c:	d0f8      	beq.n	800a670 <__gethex+0x3c>
 800a67e:	f7ff ffc3 	bl	800a608 <__hexdig_fun>
 800a682:	4604      	mov	r4, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d13a      	bne.n	800a6fe <__gethex+0xca>
 800a688:	9901      	ldr	r1, [sp, #4]
 800a68a:	4652      	mov	r2, sl
 800a68c:	4638      	mov	r0, r7
 800a68e:	f001 fb6f 	bl	800bd70 <strncmp>
 800a692:	4605      	mov	r5, r0
 800a694:	2800      	cmp	r0, #0
 800a696:	d168      	bne.n	800a76a <__gethex+0x136>
 800a698:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a69c:	eb07 060a 	add.w	r6, r7, sl
 800a6a0:	f7ff ffb2 	bl	800a608 <__hexdig_fun>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d062      	beq.n	800a76e <__gethex+0x13a>
 800a6a8:	4633      	mov	r3, r6
 800a6aa:	7818      	ldrb	r0, [r3, #0]
 800a6ac:	2830      	cmp	r0, #48	; 0x30
 800a6ae:	461f      	mov	r7, r3
 800a6b0:	f103 0301 	add.w	r3, r3, #1
 800a6b4:	d0f9      	beq.n	800a6aa <__gethex+0x76>
 800a6b6:	f7ff ffa7 	bl	800a608 <__hexdig_fun>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	fab0 f480 	clz	r4, r0
 800a6c0:	0964      	lsrs	r4, r4, #5
 800a6c2:	4635      	mov	r5, r6
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	463a      	mov	r2, r7
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	7830      	ldrb	r0, [r6, #0]
 800a6ce:	f7ff ff9b 	bl	800a608 <__hexdig_fun>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d1f8      	bne.n	800a6c8 <__gethex+0x94>
 800a6d6:	9901      	ldr	r1, [sp, #4]
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f001 fb48 	bl	800bd70 <strncmp>
 800a6e0:	b980      	cbnz	r0, 800a704 <__gethex+0xd0>
 800a6e2:	b94d      	cbnz	r5, 800a6f8 <__gethex+0xc4>
 800a6e4:	eb06 050a 	add.w	r5, r6, sl
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4616      	mov	r6, r2
 800a6ec:	3201      	adds	r2, #1
 800a6ee:	7830      	ldrb	r0, [r6, #0]
 800a6f0:	f7ff ff8a 	bl	800a608 <__hexdig_fun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1f8      	bne.n	800a6ea <__gethex+0xb6>
 800a6f8:	1bad      	subs	r5, r5, r6
 800a6fa:	00ad      	lsls	r5, r5, #2
 800a6fc:	e004      	b.n	800a708 <__gethex+0xd4>
 800a6fe:	2400      	movs	r4, #0
 800a700:	4625      	mov	r5, r4
 800a702:	e7e0      	b.n	800a6c6 <__gethex+0x92>
 800a704:	2d00      	cmp	r5, #0
 800a706:	d1f7      	bne.n	800a6f8 <__gethex+0xc4>
 800a708:	7833      	ldrb	r3, [r6, #0]
 800a70a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a70e:	2b50      	cmp	r3, #80	; 0x50
 800a710:	d13b      	bne.n	800a78a <__gethex+0x156>
 800a712:	7873      	ldrb	r3, [r6, #1]
 800a714:	2b2b      	cmp	r3, #43	; 0x2b
 800a716:	d02c      	beq.n	800a772 <__gethex+0x13e>
 800a718:	2b2d      	cmp	r3, #45	; 0x2d
 800a71a:	d02e      	beq.n	800a77a <__gethex+0x146>
 800a71c:	1c71      	adds	r1, r6, #1
 800a71e:	f04f 0900 	mov.w	r9, #0
 800a722:	7808      	ldrb	r0, [r1, #0]
 800a724:	f7ff ff70 	bl	800a608 <__hexdig_fun>
 800a728:	1e43      	subs	r3, r0, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b18      	cmp	r3, #24
 800a72e:	d82c      	bhi.n	800a78a <__gethex+0x156>
 800a730:	f1a0 0210 	sub.w	r2, r0, #16
 800a734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a738:	f7ff ff66 	bl	800a608 <__hexdig_fun>
 800a73c:	1e43      	subs	r3, r0, #1
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b18      	cmp	r3, #24
 800a742:	d91d      	bls.n	800a780 <__gethex+0x14c>
 800a744:	f1b9 0f00 	cmp.w	r9, #0
 800a748:	d000      	beq.n	800a74c <__gethex+0x118>
 800a74a:	4252      	negs	r2, r2
 800a74c:	4415      	add	r5, r2
 800a74e:	f8cb 1000 	str.w	r1, [fp]
 800a752:	b1e4      	cbz	r4, 800a78e <__gethex+0x15a>
 800a754:	9b00      	ldr	r3, [sp, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bf14      	ite	ne
 800a75a:	2700      	movne	r7, #0
 800a75c:	2706      	moveq	r7, #6
 800a75e:	4638      	mov	r0, r7
 800a760:	b009      	add	sp, #36	; 0x24
 800a762:	ecbd 8b02 	vpop	{d8}
 800a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76a:	463e      	mov	r6, r7
 800a76c:	4625      	mov	r5, r4
 800a76e:	2401      	movs	r4, #1
 800a770:	e7ca      	b.n	800a708 <__gethex+0xd4>
 800a772:	f04f 0900 	mov.w	r9, #0
 800a776:	1cb1      	adds	r1, r6, #2
 800a778:	e7d3      	b.n	800a722 <__gethex+0xee>
 800a77a:	f04f 0901 	mov.w	r9, #1
 800a77e:	e7fa      	b.n	800a776 <__gethex+0x142>
 800a780:	230a      	movs	r3, #10
 800a782:	fb03 0202 	mla	r2, r3, r2, r0
 800a786:	3a10      	subs	r2, #16
 800a788:	e7d4      	b.n	800a734 <__gethex+0x100>
 800a78a:	4631      	mov	r1, r6
 800a78c:	e7df      	b.n	800a74e <__gethex+0x11a>
 800a78e:	1bf3      	subs	r3, r6, r7
 800a790:	3b01      	subs	r3, #1
 800a792:	4621      	mov	r1, r4
 800a794:	2b07      	cmp	r3, #7
 800a796:	dc0b      	bgt.n	800a7b0 <__gethex+0x17c>
 800a798:	ee18 0a10 	vmov	r0, s16
 800a79c:	f000 fa72 	bl	800ac84 <_Balloc>
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	b940      	cbnz	r0, 800a7b6 <__gethex+0x182>
 800a7a4:	4b5d      	ldr	r3, [pc, #372]	; (800a91c <__gethex+0x2e8>)
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	21de      	movs	r1, #222	; 0xde
 800a7aa:	485d      	ldr	r0, [pc, #372]	; (800a920 <__gethex+0x2ec>)
 800a7ac:	f001 fb02 	bl	800bdb4 <__assert_func>
 800a7b0:	3101      	adds	r1, #1
 800a7b2:	105b      	asrs	r3, r3, #1
 800a7b4:	e7ee      	b.n	800a794 <__gethex+0x160>
 800a7b6:	f100 0914 	add.w	r9, r0, #20
 800a7ba:	f04f 0b00 	mov.w	fp, #0
 800a7be:	f1ca 0301 	rsb	r3, sl, #1
 800a7c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7c6:	f8cd b000 	str.w	fp, [sp]
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	42b7      	cmp	r7, r6
 800a7ce:	d340      	bcc.n	800a852 <__gethex+0x21e>
 800a7d0:	9802      	ldr	r0, [sp, #8]
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	f840 3b04 	str.w	r3, [r0], #4
 800a7d8:	eba0 0009 	sub.w	r0, r0, r9
 800a7dc:	1080      	asrs	r0, r0, #2
 800a7de:	0146      	lsls	r6, r0, #5
 800a7e0:	6120      	str	r0, [r4, #16]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 fb40 	bl	800ae68 <__hi0bits>
 800a7e8:	1a30      	subs	r0, r6, r0
 800a7ea:	f8d8 6000 	ldr.w	r6, [r8]
 800a7ee:	42b0      	cmp	r0, r6
 800a7f0:	dd63      	ble.n	800a8ba <__gethex+0x286>
 800a7f2:	1b87      	subs	r7, r0, r6
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fee4 	bl	800b5c4 <__any_on>
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	b1a8      	cbz	r0, 800a82c <__gethex+0x1f8>
 800a800:	1e7b      	subs	r3, r7, #1
 800a802:	1159      	asrs	r1, r3, #5
 800a804:	f003 021f 	and.w	r2, r3, #31
 800a808:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a80c:	f04f 0a01 	mov.w	sl, #1
 800a810:	fa0a f202 	lsl.w	r2, sl, r2
 800a814:	420a      	tst	r2, r1
 800a816:	d009      	beq.n	800a82c <__gethex+0x1f8>
 800a818:	4553      	cmp	r3, sl
 800a81a:	dd05      	ble.n	800a828 <__gethex+0x1f4>
 800a81c:	1eb9      	subs	r1, r7, #2
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fed0 	bl	800b5c4 <__any_on>
 800a824:	2800      	cmp	r0, #0
 800a826:	d145      	bne.n	800a8b4 <__gethex+0x280>
 800a828:	f04f 0a02 	mov.w	sl, #2
 800a82c:	4639      	mov	r1, r7
 800a82e:	4620      	mov	r0, r4
 800a830:	f7ff fe98 	bl	800a564 <rshift>
 800a834:	443d      	add	r5, r7
 800a836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a83a:	42ab      	cmp	r3, r5
 800a83c:	da4c      	bge.n	800a8d8 <__gethex+0x2a4>
 800a83e:	ee18 0a10 	vmov	r0, s16
 800a842:	4621      	mov	r1, r4
 800a844:	f000 fa5e 	bl	800ad04 <_Bfree>
 800a848:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a84a:	2300      	movs	r3, #0
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	27a3      	movs	r7, #163	; 0xa3
 800a850:	e785      	b.n	800a75e <__gethex+0x12a>
 800a852:	1e73      	subs	r3, r6, #1
 800a854:	9a05      	ldr	r2, [sp, #20]
 800a856:	9303      	str	r3, [sp, #12]
 800a858:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d019      	beq.n	800a894 <__gethex+0x260>
 800a860:	f1bb 0f20 	cmp.w	fp, #32
 800a864:	d107      	bne.n	800a876 <__gethex+0x242>
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	9a00      	ldr	r2, [sp, #0]
 800a86a:	f843 2b04 	str.w	r2, [r3], #4
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	2300      	movs	r3, #0
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	469b      	mov	fp, r3
 800a876:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a87a:	f7ff fec5 	bl	800a608 <__hexdig_fun>
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	f000 000f 	and.w	r0, r0, #15
 800a884:	fa00 f00b 	lsl.w	r0, r0, fp
 800a888:	4303      	orrs	r3, r0
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	f10b 0b04 	add.w	fp, fp, #4
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	e00d      	b.n	800a8b0 <__gethex+0x27c>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	9a06      	ldr	r2, [sp, #24]
 800a898:	4413      	add	r3, r2
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	d3e0      	bcc.n	800a860 <__gethex+0x22c>
 800a89e:	4618      	mov	r0, r3
 800a8a0:	9901      	ldr	r1, [sp, #4]
 800a8a2:	9307      	str	r3, [sp, #28]
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	f001 fa63 	bl	800bd70 <strncmp>
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d1d7      	bne.n	800a860 <__gethex+0x22c>
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	e78b      	b.n	800a7cc <__gethex+0x198>
 800a8b4:	f04f 0a03 	mov.w	sl, #3
 800a8b8:	e7b8      	b.n	800a82c <__gethex+0x1f8>
 800a8ba:	da0a      	bge.n	800a8d2 <__gethex+0x29e>
 800a8bc:	1a37      	subs	r7, r6, r0
 800a8be:	4621      	mov	r1, r4
 800a8c0:	ee18 0a10 	vmov	r0, s16
 800a8c4:	463a      	mov	r2, r7
 800a8c6:	f000 fc39 	bl	800b13c <__lshift>
 800a8ca:	1bed      	subs	r5, r5, r7
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	f100 0914 	add.w	r9, r0, #20
 800a8d2:	f04f 0a00 	mov.w	sl, #0
 800a8d6:	e7ae      	b.n	800a836 <__gethex+0x202>
 800a8d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8dc:	42a8      	cmp	r0, r5
 800a8de:	dd72      	ble.n	800a9c6 <__gethex+0x392>
 800a8e0:	1b45      	subs	r5, r0, r5
 800a8e2:	42ae      	cmp	r6, r5
 800a8e4:	dc36      	bgt.n	800a954 <__gethex+0x320>
 800a8e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d02a      	beq.n	800a944 <__gethex+0x310>
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d02c      	beq.n	800a94c <__gethex+0x318>
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d11c      	bne.n	800a930 <__gethex+0x2fc>
 800a8f6:	42ae      	cmp	r6, r5
 800a8f8:	d11a      	bne.n	800a930 <__gethex+0x2fc>
 800a8fa:	2e01      	cmp	r6, #1
 800a8fc:	d112      	bne.n	800a924 <__gethex+0x2f0>
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	2301      	movs	r3, #1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	f8c9 3000 	str.w	r3, [r9]
 800a90e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a910:	2762      	movs	r7, #98	; 0x62
 800a912:	601c      	str	r4, [r3, #0]
 800a914:	e723      	b.n	800a75e <__gethex+0x12a>
 800a916:	bf00      	nop
 800a918:	0800cb58 	.word	0x0800cb58
 800a91c:	0800cae0 	.word	0x0800cae0
 800a920:	0800caf1 	.word	0x0800caf1
 800a924:	1e71      	subs	r1, r6, #1
 800a926:	4620      	mov	r0, r4
 800a928:	f000 fe4c 	bl	800b5c4 <__any_on>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d1e6      	bne.n	800a8fe <__gethex+0x2ca>
 800a930:	ee18 0a10 	vmov	r0, s16
 800a934:	4621      	mov	r1, r4
 800a936:	f000 f9e5 	bl	800ad04 <_Bfree>
 800a93a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a93c:	2300      	movs	r3, #0
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	2750      	movs	r7, #80	; 0x50
 800a942:	e70c      	b.n	800a75e <__gethex+0x12a>
 800a944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1f2      	bne.n	800a930 <__gethex+0x2fc>
 800a94a:	e7d8      	b.n	800a8fe <__gethex+0x2ca>
 800a94c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1d5      	bne.n	800a8fe <__gethex+0x2ca>
 800a952:	e7ed      	b.n	800a930 <__gethex+0x2fc>
 800a954:	1e6f      	subs	r7, r5, #1
 800a956:	f1ba 0f00 	cmp.w	sl, #0
 800a95a:	d131      	bne.n	800a9c0 <__gethex+0x38c>
 800a95c:	b127      	cbz	r7, 800a968 <__gethex+0x334>
 800a95e:	4639      	mov	r1, r7
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fe2f 	bl	800b5c4 <__any_on>
 800a966:	4682      	mov	sl, r0
 800a968:	117b      	asrs	r3, r7, #5
 800a96a:	2101      	movs	r1, #1
 800a96c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a970:	f007 071f 	and.w	r7, r7, #31
 800a974:	fa01 f707 	lsl.w	r7, r1, r7
 800a978:	421f      	tst	r7, r3
 800a97a:	4629      	mov	r1, r5
 800a97c:	4620      	mov	r0, r4
 800a97e:	bf18      	it	ne
 800a980:	f04a 0a02 	orrne.w	sl, sl, #2
 800a984:	1b76      	subs	r6, r6, r5
 800a986:	f7ff fded 	bl	800a564 <rshift>
 800a98a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a98e:	2702      	movs	r7, #2
 800a990:	f1ba 0f00 	cmp.w	sl, #0
 800a994:	d048      	beq.n	800aa28 <__gethex+0x3f4>
 800a996:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d015      	beq.n	800a9ca <__gethex+0x396>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d017      	beq.n	800a9d2 <__gethex+0x39e>
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d109      	bne.n	800a9ba <__gethex+0x386>
 800a9a6:	f01a 0f02 	tst.w	sl, #2
 800a9aa:	d006      	beq.n	800a9ba <__gethex+0x386>
 800a9ac:	f8d9 0000 	ldr.w	r0, [r9]
 800a9b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a9b4:	f01a 0f01 	tst.w	sl, #1
 800a9b8:	d10e      	bne.n	800a9d8 <__gethex+0x3a4>
 800a9ba:	f047 0710 	orr.w	r7, r7, #16
 800a9be:	e033      	b.n	800aa28 <__gethex+0x3f4>
 800a9c0:	f04f 0a01 	mov.w	sl, #1
 800a9c4:	e7d0      	b.n	800a968 <__gethex+0x334>
 800a9c6:	2701      	movs	r7, #1
 800a9c8:	e7e2      	b.n	800a990 <__gethex+0x35c>
 800a9ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9cc:	f1c3 0301 	rsb	r3, r3, #1
 800a9d0:	9315      	str	r3, [sp, #84]	; 0x54
 800a9d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0f0      	beq.n	800a9ba <__gethex+0x386>
 800a9d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9dc:	f104 0314 	add.w	r3, r4, #20
 800a9e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9e8:	f04f 0c00 	mov.w	ip, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9f6:	d01c      	beq.n	800aa32 <__gethex+0x3fe>
 800a9f8:	3201      	adds	r2, #1
 800a9fa:	6002      	str	r2, [r0, #0]
 800a9fc:	2f02      	cmp	r7, #2
 800a9fe:	f104 0314 	add.w	r3, r4, #20
 800aa02:	d13f      	bne.n	800aa84 <__gethex+0x450>
 800aa04:	f8d8 2000 	ldr.w	r2, [r8]
 800aa08:	3a01      	subs	r2, #1
 800aa0a:	42b2      	cmp	r2, r6
 800aa0c:	d10a      	bne.n	800aa24 <__gethex+0x3f0>
 800aa0e:	1171      	asrs	r1, r6, #5
 800aa10:	2201      	movs	r2, #1
 800aa12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa16:	f006 061f 	and.w	r6, r6, #31
 800aa1a:	fa02 f606 	lsl.w	r6, r2, r6
 800aa1e:	421e      	tst	r6, r3
 800aa20:	bf18      	it	ne
 800aa22:	4617      	movne	r7, r2
 800aa24:	f047 0720 	orr.w	r7, r7, #32
 800aa28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa2a:	601c      	str	r4, [r3, #0]
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	601d      	str	r5, [r3, #0]
 800aa30:	e695      	b.n	800a75e <__gethex+0x12a>
 800aa32:	4299      	cmp	r1, r3
 800aa34:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa38:	d8d8      	bhi.n	800a9ec <__gethex+0x3b8>
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	459b      	cmp	fp, r3
 800aa3e:	db19      	blt.n	800aa74 <__gethex+0x440>
 800aa40:	6861      	ldr	r1, [r4, #4]
 800aa42:	ee18 0a10 	vmov	r0, s16
 800aa46:	3101      	adds	r1, #1
 800aa48:	f000 f91c 	bl	800ac84 <_Balloc>
 800aa4c:	4681      	mov	r9, r0
 800aa4e:	b918      	cbnz	r0, 800aa58 <__gethex+0x424>
 800aa50:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <__gethex+0x488>)
 800aa52:	4602      	mov	r2, r0
 800aa54:	2184      	movs	r1, #132	; 0x84
 800aa56:	e6a8      	b.n	800a7aa <__gethex+0x176>
 800aa58:	6922      	ldr	r2, [r4, #16]
 800aa5a:	3202      	adds	r2, #2
 800aa5c:	f104 010c 	add.w	r1, r4, #12
 800aa60:	0092      	lsls	r2, r2, #2
 800aa62:	300c      	adds	r0, #12
 800aa64:	f000 f900 	bl	800ac68 <memcpy>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	ee18 0a10 	vmov	r0, s16
 800aa6e:	f000 f949 	bl	800ad04 <_Bfree>
 800aa72:	464c      	mov	r4, r9
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa7c:	6122      	str	r2, [r4, #16]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	615a      	str	r2, [r3, #20]
 800aa82:	e7bb      	b.n	800a9fc <__gethex+0x3c8>
 800aa84:	6922      	ldr	r2, [r4, #16]
 800aa86:	455a      	cmp	r2, fp
 800aa88:	dd0b      	ble.n	800aaa2 <__gethex+0x46e>
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7ff fd69 	bl	800a564 <rshift>
 800aa92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa96:	3501      	adds	r5, #1
 800aa98:	42ab      	cmp	r3, r5
 800aa9a:	f6ff aed0 	blt.w	800a83e <__gethex+0x20a>
 800aa9e:	2701      	movs	r7, #1
 800aaa0:	e7c0      	b.n	800aa24 <__gethex+0x3f0>
 800aaa2:	f016 061f 	ands.w	r6, r6, #31
 800aaa6:	d0fa      	beq.n	800aa9e <__gethex+0x46a>
 800aaa8:	4453      	add	r3, sl
 800aaaa:	f1c6 0620 	rsb	r6, r6, #32
 800aaae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aab2:	f000 f9d9 	bl	800ae68 <__hi0bits>
 800aab6:	42b0      	cmp	r0, r6
 800aab8:	dbe7      	blt.n	800aa8a <__gethex+0x456>
 800aaba:	e7f0      	b.n	800aa9e <__gethex+0x46a>
 800aabc:	0800cae0 	.word	0x0800cae0

0800aac0 <L_shift>:
 800aac0:	f1c2 0208 	rsb	r2, r2, #8
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	b570      	push	{r4, r5, r6, lr}
 800aac8:	f1c2 0620 	rsb	r6, r2, #32
 800aacc:	6843      	ldr	r3, [r0, #4]
 800aace:	6804      	ldr	r4, [r0, #0]
 800aad0:	fa03 f506 	lsl.w	r5, r3, r6
 800aad4:	432c      	orrs	r4, r5
 800aad6:	40d3      	lsrs	r3, r2
 800aad8:	6004      	str	r4, [r0, #0]
 800aada:	f840 3f04 	str.w	r3, [r0, #4]!
 800aade:	4288      	cmp	r0, r1
 800aae0:	d3f4      	bcc.n	800aacc <L_shift+0xc>
 800aae2:	bd70      	pop	{r4, r5, r6, pc}

0800aae4 <__match>:
 800aae4:	b530      	push	{r4, r5, lr}
 800aae6:	6803      	ldr	r3, [r0, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaee:	b914      	cbnz	r4, 800aaf6 <__match+0x12>
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	bd30      	pop	{r4, r5, pc}
 800aaf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aafa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aafe:	2d19      	cmp	r5, #25
 800ab00:	bf98      	it	ls
 800ab02:	3220      	addls	r2, #32
 800ab04:	42a2      	cmp	r2, r4
 800ab06:	d0f0      	beq.n	800aaea <__match+0x6>
 800ab08:	2000      	movs	r0, #0
 800ab0a:	e7f3      	b.n	800aaf4 <__match+0x10>

0800ab0c <__hexnan>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	680b      	ldr	r3, [r1, #0]
 800ab12:	115e      	asrs	r6, r3, #5
 800ab14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab18:	f013 031f 	ands.w	r3, r3, #31
 800ab1c:	b087      	sub	sp, #28
 800ab1e:	bf18      	it	ne
 800ab20:	3604      	addne	r6, #4
 800ab22:	2500      	movs	r5, #0
 800ab24:	1f37      	subs	r7, r6, #4
 800ab26:	4690      	mov	r8, r2
 800ab28:	6802      	ldr	r2, [r0, #0]
 800ab2a:	9301      	str	r3, [sp, #4]
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab32:	46b9      	mov	r9, r7
 800ab34:	463c      	mov	r4, r7
 800ab36:	9502      	str	r5, [sp, #8]
 800ab38:	46ab      	mov	fp, r5
 800ab3a:	7851      	ldrb	r1, [r2, #1]
 800ab3c:	1c53      	adds	r3, r2, #1
 800ab3e:	9303      	str	r3, [sp, #12]
 800ab40:	b341      	cbz	r1, 800ab94 <__hexnan+0x88>
 800ab42:	4608      	mov	r0, r1
 800ab44:	9205      	str	r2, [sp, #20]
 800ab46:	9104      	str	r1, [sp, #16]
 800ab48:	f7ff fd5e 	bl	800a608 <__hexdig_fun>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d14f      	bne.n	800abf0 <__hexnan+0xe4>
 800ab50:	9904      	ldr	r1, [sp, #16]
 800ab52:	9a05      	ldr	r2, [sp, #20]
 800ab54:	2920      	cmp	r1, #32
 800ab56:	d818      	bhi.n	800ab8a <__hexnan+0x7e>
 800ab58:	9b02      	ldr	r3, [sp, #8]
 800ab5a:	459b      	cmp	fp, r3
 800ab5c:	dd13      	ble.n	800ab86 <__hexnan+0x7a>
 800ab5e:	454c      	cmp	r4, r9
 800ab60:	d206      	bcs.n	800ab70 <__hexnan+0x64>
 800ab62:	2d07      	cmp	r5, #7
 800ab64:	dc04      	bgt.n	800ab70 <__hexnan+0x64>
 800ab66:	462a      	mov	r2, r5
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff ffa8 	bl	800aac0 <L_shift>
 800ab70:	4544      	cmp	r4, r8
 800ab72:	d950      	bls.n	800ac16 <__hexnan+0x10a>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f1a4 0904 	sub.w	r9, r4, #4
 800ab7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab82:	464c      	mov	r4, r9
 800ab84:	461d      	mov	r5, r3
 800ab86:	9a03      	ldr	r2, [sp, #12]
 800ab88:	e7d7      	b.n	800ab3a <__hexnan+0x2e>
 800ab8a:	2929      	cmp	r1, #41	; 0x29
 800ab8c:	d156      	bne.n	800ac3c <__hexnan+0x130>
 800ab8e:	3202      	adds	r2, #2
 800ab90:	f8ca 2000 	str.w	r2, [sl]
 800ab94:	f1bb 0f00 	cmp.w	fp, #0
 800ab98:	d050      	beq.n	800ac3c <__hexnan+0x130>
 800ab9a:	454c      	cmp	r4, r9
 800ab9c:	d206      	bcs.n	800abac <__hexnan+0xa0>
 800ab9e:	2d07      	cmp	r5, #7
 800aba0:	dc04      	bgt.n	800abac <__hexnan+0xa0>
 800aba2:	462a      	mov	r2, r5
 800aba4:	4649      	mov	r1, r9
 800aba6:	4620      	mov	r0, r4
 800aba8:	f7ff ff8a 	bl	800aac0 <L_shift>
 800abac:	4544      	cmp	r4, r8
 800abae:	d934      	bls.n	800ac1a <__hexnan+0x10e>
 800abb0:	f1a8 0204 	sub.w	r2, r8, #4
 800abb4:	4623      	mov	r3, r4
 800abb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800abba:	f842 1f04 	str.w	r1, [r2, #4]!
 800abbe:	429f      	cmp	r7, r3
 800abc0:	d2f9      	bcs.n	800abb6 <__hexnan+0xaa>
 800abc2:	1b3b      	subs	r3, r7, r4
 800abc4:	f023 0303 	bic.w	r3, r3, #3
 800abc8:	3304      	adds	r3, #4
 800abca:	3401      	adds	r4, #1
 800abcc:	3e03      	subs	r6, #3
 800abce:	42b4      	cmp	r4, r6
 800abd0:	bf88      	it	hi
 800abd2:	2304      	movhi	r3, #4
 800abd4:	4443      	add	r3, r8
 800abd6:	2200      	movs	r2, #0
 800abd8:	f843 2b04 	str.w	r2, [r3], #4
 800abdc:	429f      	cmp	r7, r3
 800abde:	d2fb      	bcs.n	800abd8 <__hexnan+0xcc>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	b91b      	cbnz	r3, 800abec <__hexnan+0xe0>
 800abe4:	4547      	cmp	r7, r8
 800abe6:	d127      	bne.n	800ac38 <__hexnan+0x12c>
 800abe8:	2301      	movs	r3, #1
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	2005      	movs	r0, #5
 800abee:	e026      	b.n	800ac3e <__hexnan+0x132>
 800abf0:	3501      	adds	r5, #1
 800abf2:	2d08      	cmp	r5, #8
 800abf4:	f10b 0b01 	add.w	fp, fp, #1
 800abf8:	dd06      	ble.n	800ac08 <__hexnan+0xfc>
 800abfa:	4544      	cmp	r4, r8
 800abfc:	d9c3      	bls.n	800ab86 <__hexnan+0x7a>
 800abfe:	2300      	movs	r3, #0
 800ac00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac04:	2501      	movs	r5, #1
 800ac06:	3c04      	subs	r4, #4
 800ac08:	6822      	ldr	r2, [r4, #0]
 800ac0a:	f000 000f 	and.w	r0, r0, #15
 800ac0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	e7b7      	b.n	800ab86 <__hexnan+0x7a>
 800ac16:	2508      	movs	r5, #8
 800ac18:	e7b5      	b.n	800ab86 <__hexnan+0x7a>
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0df      	beq.n	800abe0 <__hexnan+0xd4>
 800ac20:	f04f 32ff 	mov.w	r2, #4294967295
 800ac24:	f1c3 0320 	rsb	r3, r3, #32
 800ac28:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac30:	401a      	ands	r2, r3
 800ac32:	f846 2c04 	str.w	r2, [r6, #-4]
 800ac36:	e7d3      	b.n	800abe0 <__hexnan+0xd4>
 800ac38:	3f04      	subs	r7, #4
 800ac3a:	e7d1      	b.n	800abe0 <__hexnan+0xd4>
 800ac3c:	2004      	movs	r0, #4
 800ac3e:	b007      	add	sp, #28
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac44 <__ascii_mbtowc>:
 800ac44:	b082      	sub	sp, #8
 800ac46:	b901      	cbnz	r1, 800ac4a <__ascii_mbtowc+0x6>
 800ac48:	a901      	add	r1, sp, #4
 800ac4a:	b142      	cbz	r2, 800ac5e <__ascii_mbtowc+0x1a>
 800ac4c:	b14b      	cbz	r3, 800ac62 <__ascii_mbtowc+0x1e>
 800ac4e:	7813      	ldrb	r3, [r2, #0]
 800ac50:	600b      	str	r3, [r1, #0]
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	1e10      	subs	r0, r2, #0
 800ac56:	bf18      	it	ne
 800ac58:	2001      	movne	r0, #1
 800ac5a:	b002      	add	sp, #8
 800ac5c:	4770      	bx	lr
 800ac5e:	4610      	mov	r0, r2
 800ac60:	e7fb      	b.n	800ac5a <__ascii_mbtowc+0x16>
 800ac62:	f06f 0001 	mvn.w	r0, #1
 800ac66:	e7f8      	b.n	800ac5a <__ascii_mbtowc+0x16>

0800ac68 <memcpy>:
 800ac68:	440a      	add	r2, r1
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac70:	d100      	bne.n	800ac74 <memcpy+0xc>
 800ac72:	4770      	bx	lr
 800ac74:	b510      	push	{r4, lr}
 800ac76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac7e:	4291      	cmp	r1, r2
 800ac80:	d1f9      	bne.n	800ac76 <memcpy+0xe>
 800ac82:	bd10      	pop	{r4, pc}

0800ac84 <_Balloc>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac88:	4604      	mov	r4, r0
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	b976      	cbnz	r6, 800acac <_Balloc+0x28>
 800ac8e:	2010      	movs	r0, #16
 800ac90:	f001 f8c0 	bl	800be14 <malloc>
 800ac94:	4602      	mov	r2, r0
 800ac96:	6260      	str	r0, [r4, #36]	; 0x24
 800ac98:	b920      	cbnz	r0, 800aca4 <_Balloc+0x20>
 800ac9a:	4b18      	ldr	r3, [pc, #96]	; (800acfc <_Balloc+0x78>)
 800ac9c:	4818      	ldr	r0, [pc, #96]	; (800ad00 <_Balloc+0x7c>)
 800ac9e:	2166      	movs	r1, #102	; 0x66
 800aca0:	f001 f888 	bl	800bdb4 <__assert_func>
 800aca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca8:	6006      	str	r6, [r0, #0]
 800acaa:	60c6      	str	r6, [r0, #12]
 800acac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acae:	68f3      	ldr	r3, [r6, #12]
 800acb0:	b183      	cbz	r3, 800acd4 <_Balloc+0x50>
 800acb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acba:	b9b8      	cbnz	r0, 800acec <_Balloc+0x68>
 800acbc:	2101      	movs	r1, #1
 800acbe:	fa01 f605 	lsl.w	r6, r1, r5
 800acc2:	1d72      	adds	r2, r6, #5
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fc9d 	bl	800b606 <_calloc_r>
 800accc:	b160      	cbz	r0, 800ace8 <_Balloc+0x64>
 800acce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acd2:	e00e      	b.n	800acf2 <_Balloc+0x6e>
 800acd4:	2221      	movs	r2, #33	; 0x21
 800acd6:	2104      	movs	r1, #4
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fc94 	bl	800b606 <_calloc_r>
 800acde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace0:	60f0      	str	r0, [r6, #12]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e4      	bne.n	800acb2 <_Balloc+0x2e>
 800ace8:	2000      	movs	r0, #0
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	6802      	ldr	r2, [r0, #0]
 800acee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acf2:	2300      	movs	r3, #0
 800acf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acf8:	e7f7      	b.n	800acea <_Balloc+0x66>
 800acfa:	bf00      	nop
 800acfc:	0800cb6c 	.word	0x0800cb6c
 800ad00:	0800cb83 	.word	0x0800cb83

0800ad04 <_Bfree>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b976      	cbnz	r6, 800ad2c <_Bfree+0x28>
 800ad0e:	2010      	movs	r0, #16
 800ad10:	f001 f880 	bl	800be14 <malloc>
 800ad14:	4602      	mov	r2, r0
 800ad16:	6268      	str	r0, [r5, #36]	; 0x24
 800ad18:	b920      	cbnz	r0, 800ad24 <_Bfree+0x20>
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <_Bfree+0x3c>)
 800ad1c:	4809      	ldr	r0, [pc, #36]	; (800ad44 <_Bfree+0x40>)
 800ad1e:	218a      	movs	r1, #138	; 0x8a
 800ad20:	f001 f848 	bl	800bdb4 <__assert_func>
 800ad24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad28:	6006      	str	r6, [r0, #0]
 800ad2a:	60c6      	str	r6, [r0, #12]
 800ad2c:	b13c      	cbz	r4, 800ad3e <_Bfree+0x3a>
 800ad2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad30:	6862      	ldr	r2, [r4, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad38:	6021      	str	r1, [r4, #0]
 800ad3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	0800cb6c 	.word	0x0800cb6c
 800ad44:	0800cb83 	.word	0x0800cb83

0800ad48 <__multadd>:
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	690d      	ldr	r5, [r1, #16]
 800ad4e:	4607      	mov	r7, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	461e      	mov	r6, r3
 800ad54:	f101 0c14 	add.w	ip, r1, #20
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad5e:	b299      	uxth	r1, r3
 800ad60:	fb02 6101 	mla	r1, r2, r1, r6
 800ad64:	0c1e      	lsrs	r6, r3, #16
 800ad66:	0c0b      	lsrs	r3, r1, #16
 800ad68:	fb02 3306 	mla	r3, r2, r6, r3
 800ad6c:	b289      	uxth	r1, r1
 800ad6e:	3001      	adds	r0, #1
 800ad70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad74:	4285      	cmp	r5, r0
 800ad76:	f84c 1b04 	str.w	r1, [ip], #4
 800ad7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad7e:	dcec      	bgt.n	800ad5a <__multadd+0x12>
 800ad80:	b30e      	cbz	r6, 800adc6 <__multadd+0x7e>
 800ad82:	68a3      	ldr	r3, [r4, #8]
 800ad84:	42ab      	cmp	r3, r5
 800ad86:	dc19      	bgt.n	800adbc <__multadd+0x74>
 800ad88:	6861      	ldr	r1, [r4, #4]
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	f7ff ff79 	bl	800ac84 <_Balloc>
 800ad92:	4680      	mov	r8, r0
 800ad94:	b928      	cbnz	r0, 800ada2 <__multadd+0x5a>
 800ad96:	4602      	mov	r2, r0
 800ad98:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <__multadd+0x84>)
 800ad9a:	480d      	ldr	r0, [pc, #52]	; (800add0 <__multadd+0x88>)
 800ad9c:	21b5      	movs	r1, #181	; 0xb5
 800ad9e:	f001 f809 	bl	800bdb4 <__assert_func>
 800ada2:	6922      	ldr	r2, [r4, #16]
 800ada4:	3202      	adds	r2, #2
 800ada6:	f104 010c 	add.w	r1, r4, #12
 800adaa:	0092      	lsls	r2, r2, #2
 800adac:	300c      	adds	r0, #12
 800adae:	f7ff ff5b 	bl	800ac68 <memcpy>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4638      	mov	r0, r7
 800adb6:	f7ff ffa5 	bl	800ad04 <_Bfree>
 800adba:	4644      	mov	r4, r8
 800adbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adc0:	3501      	adds	r5, #1
 800adc2:	615e      	str	r6, [r3, #20]
 800adc4:	6125      	str	r5, [r4, #16]
 800adc6:	4620      	mov	r0, r4
 800adc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adcc:	0800cae0 	.word	0x0800cae0
 800add0:	0800cb83 	.word	0x0800cb83

0800add4 <__s2b>:
 800add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add8:	460c      	mov	r4, r1
 800adda:	4615      	mov	r5, r2
 800addc:	461f      	mov	r7, r3
 800adde:	2209      	movs	r2, #9
 800ade0:	3308      	adds	r3, #8
 800ade2:	4606      	mov	r6, r0
 800ade4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ade8:	2100      	movs	r1, #0
 800adea:	2201      	movs	r2, #1
 800adec:	429a      	cmp	r2, r3
 800adee:	db09      	blt.n	800ae04 <__s2b+0x30>
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7ff ff47 	bl	800ac84 <_Balloc>
 800adf6:	b940      	cbnz	r0, 800ae0a <__s2b+0x36>
 800adf8:	4602      	mov	r2, r0
 800adfa:	4b19      	ldr	r3, [pc, #100]	; (800ae60 <__s2b+0x8c>)
 800adfc:	4819      	ldr	r0, [pc, #100]	; (800ae64 <__s2b+0x90>)
 800adfe:	21ce      	movs	r1, #206	; 0xce
 800ae00:	f000 ffd8 	bl	800bdb4 <__assert_func>
 800ae04:	0052      	lsls	r2, r2, #1
 800ae06:	3101      	adds	r1, #1
 800ae08:	e7f0      	b.n	800adec <__s2b+0x18>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	6143      	str	r3, [r0, #20]
 800ae0e:	2d09      	cmp	r5, #9
 800ae10:	f04f 0301 	mov.w	r3, #1
 800ae14:	6103      	str	r3, [r0, #16]
 800ae16:	dd16      	ble.n	800ae46 <__s2b+0x72>
 800ae18:	f104 0909 	add.w	r9, r4, #9
 800ae1c:	46c8      	mov	r8, r9
 800ae1e:	442c      	add	r4, r5
 800ae20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae24:	4601      	mov	r1, r0
 800ae26:	3b30      	subs	r3, #48	; 0x30
 800ae28:	220a      	movs	r2, #10
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7ff ff8c 	bl	800ad48 <__multadd>
 800ae30:	45a0      	cmp	r8, r4
 800ae32:	d1f5      	bne.n	800ae20 <__s2b+0x4c>
 800ae34:	f1a5 0408 	sub.w	r4, r5, #8
 800ae38:	444c      	add	r4, r9
 800ae3a:	1b2d      	subs	r5, r5, r4
 800ae3c:	1963      	adds	r3, r4, r5
 800ae3e:	42bb      	cmp	r3, r7
 800ae40:	db04      	blt.n	800ae4c <__s2b+0x78>
 800ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae46:	340a      	adds	r4, #10
 800ae48:	2509      	movs	r5, #9
 800ae4a:	e7f6      	b.n	800ae3a <__s2b+0x66>
 800ae4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae50:	4601      	mov	r1, r0
 800ae52:	3b30      	subs	r3, #48	; 0x30
 800ae54:	220a      	movs	r2, #10
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ff76 	bl	800ad48 <__multadd>
 800ae5c:	e7ee      	b.n	800ae3c <__s2b+0x68>
 800ae5e:	bf00      	nop
 800ae60:	0800cae0 	.word	0x0800cae0
 800ae64:	0800cb83 	.word	0x0800cb83

0800ae68 <__hi0bits>:
 800ae68:	0c03      	lsrs	r3, r0, #16
 800ae6a:	041b      	lsls	r3, r3, #16
 800ae6c:	b9d3      	cbnz	r3, 800aea4 <__hi0bits+0x3c>
 800ae6e:	0400      	lsls	r0, r0, #16
 800ae70:	2310      	movs	r3, #16
 800ae72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae76:	bf04      	itt	eq
 800ae78:	0200      	lsleq	r0, r0, #8
 800ae7a:	3308      	addeq	r3, #8
 800ae7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae80:	bf04      	itt	eq
 800ae82:	0100      	lsleq	r0, r0, #4
 800ae84:	3304      	addeq	r3, #4
 800ae86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae8a:	bf04      	itt	eq
 800ae8c:	0080      	lsleq	r0, r0, #2
 800ae8e:	3302      	addeq	r3, #2
 800ae90:	2800      	cmp	r0, #0
 800ae92:	db05      	blt.n	800aea0 <__hi0bits+0x38>
 800ae94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae98:	f103 0301 	add.w	r3, r3, #1
 800ae9c:	bf08      	it	eq
 800ae9e:	2320      	moveq	r3, #32
 800aea0:	4618      	mov	r0, r3
 800aea2:	4770      	bx	lr
 800aea4:	2300      	movs	r3, #0
 800aea6:	e7e4      	b.n	800ae72 <__hi0bits+0xa>

0800aea8 <__lo0bits>:
 800aea8:	6803      	ldr	r3, [r0, #0]
 800aeaa:	f013 0207 	ands.w	r2, r3, #7
 800aeae:	4601      	mov	r1, r0
 800aeb0:	d00b      	beq.n	800aeca <__lo0bits+0x22>
 800aeb2:	07da      	lsls	r2, r3, #31
 800aeb4:	d423      	bmi.n	800aefe <__lo0bits+0x56>
 800aeb6:	0798      	lsls	r0, r3, #30
 800aeb8:	bf49      	itett	mi
 800aeba:	085b      	lsrmi	r3, r3, #1
 800aebc:	089b      	lsrpl	r3, r3, #2
 800aebe:	2001      	movmi	r0, #1
 800aec0:	600b      	strmi	r3, [r1, #0]
 800aec2:	bf5c      	itt	pl
 800aec4:	600b      	strpl	r3, [r1, #0]
 800aec6:	2002      	movpl	r0, #2
 800aec8:	4770      	bx	lr
 800aeca:	b298      	uxth	r0, r3
 800aecc:	b9a8      	cbnz	r0, 800aefa <__lo0bits+0x52>
 800aece:	0c1b      	lsrs	r3, r3, #16
 800aed0:	2010      	movs	r0, #16
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	b90a      	cbnz	r2, 800aeda <__lo0bits+0x32>
 800aed6:	3008      	adds	r0, #8
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	071a      	lsls	r2, r3, #28
 800aedc:	bf04      	itt	eq
 800aede:	091b      	lsreq	r3, r3, #4
 800aee0:	3004      	addeq	r0, #4
 800aee2:	079a      	lsls	r2, r3, #30
 800aee4:	bf04      	itt	eq
 800aee6:	089b      	lsreq	r3, r3, #2
 800aee8:	3002      	addeq	r0, #2
 800aeea:	07da      	lsls	r2, r3, #31
 800aeec:	d403      	bmi.n	800aef6 <__lo0bits+0x4e>
 800aeee:	085b      	lsrs	r3, r3, #1
 800aef0:	f100 0001 	add.w	r0, r0, #1
 800aef4:	d005      	beq.n	800af02 <__lo0bits+0x5a>
 800aef6:	600b      	str	r3, [r1, #0]
 800aef8:	4770      	bx	lr
 800aefa:	4610      	mov	r0, r2
 800aefc:	e7e9      	b.n	800aed2 <__lo0bits+0x2a>
 800aefe:	2000      	movs	r0, #0
 800af00:	4770      	bx	lr
 800af02:	2020      	movs	r0, #32
 800af04:	4770      	bx	lr
	...

0800af08 <__i2b>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	460c      	mov	r4, r1
 800af0c:	2101      	movs	r1, #1
 800af0e:	f7ff feb9 	bl	800ac84 <_Balloc>
 800af12:	4602      	mov	r2, r0
 800af14:	b928      	cbnz	r0, 800af22 <__i2b+0x1a>
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <__i2b+0x24>)
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <__i2b+0x28>)
 800af1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af1e:	f000 ff49 	bl	800bdb4 <__assert_func>
 800af22:	2301      	movs	r3, #1
 800af24:	6144      	str	r4, [r0, #20]
 800af26:	6103      	str	r3, [r0, #16]
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	bf00      	nop
 800af2c:	0800cae0 	.word	0x0800cae0
 800af30:	0800cb83 	.word	0x0800cb83

0800af34 <__multiply>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	4691      	mov	r9, r2
 800af3a:	690a      	ldr	r2, [r1, #16]
 800af3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af40:	429a      	cmp	r2, r3
 800af42:	bfb8      	it	lt
 800af44:	460b      	movlt	r3, r1
 800af46:	460c      	mov	r4, r1
 800af48:	bfbc      	itt	lt
 800af4a:	464c      	movlt	r4, r9
 800af4c:	4699      	movlt	r9, r3
 800af4e:	6927      	ldr	r7, [r4, #16]
 800af50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af54:	68a3      	ldr	r3, [r4, #8]
 800af56:	6861      	ldr	r1, [r4, #4]
 800af58:	eb07 060a 	add.w	r6, r7, sl
 800af5c:	42b3      	cmp	r3, r6
 800af5e:	b085      	sub	sp, #20
 800af60:	bfb8      	it	lt
 800af62:	3101      	addlt	r1, #1
 800af64:	f7ff fe8e 	bl	800ac84 <_Balloc>
 800af68:	b930      	cbnz	r0, 800af78 <__multiply+0x44>
 800af6a:	4602      	mov	r2, r0
 800af6c:	4b44      	ldr	r3, [pc, #272]	; (800b080 <__multiply+0x14c>)
 800af6e:	4845      	ldr	r0, [pc, #276]	; (800b084 <__multiply+0x150>)
 800af70:	f240 115d 	movw	r1, #349	; 0x15d
 800af74:	f000 ff1e 	bl	800bdb4 <__assert_func>
 800af78:	f100 0514 	add.w	r5, r0, #20
 800af7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af80:	462b      	mov	r3, r5
 800af82:	2200      	movs	r2, #0
 800af84:	4543      	cmp	r3, r8
 800af86:	d321      	bcc.n	800afcc <__multiply+0x98>
 800af88:	f104 0314 	add.w	r3, r4, #20
 800af8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af90:	f109 0314 	add.w	r3, r9, #20
 800af94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af98:	9202      	str	r2, [sp, #8]
 800af9a:	1b3a      	subs	r2, r7, r4
 800af9c:	3a15      	subs	r2, #21
 800af9e:	f022 0203 	bic.w	r2, r2, #3
 800afa2:	3204      	adds	r2, #4
 800afa4:	f104 0115 	add.w	r1, r4, #21
 800afa8:	428f      	cmp	r7, r1
 800afaa:	bf38      	it	cc
 800afac:	2204      	movcc	r2, #4
 800afae:	9201      	str	r2, [sp, #4]
 800afb0:	9a02      	ldr	r2, [sp, #8]
 800afb2:	9303      	str	r3, [sp, #12]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d80c      	bhi.n	800afd2 <__multiply+0x9e>
 800afb8:	2e00      	cmp	r6, #0
 800afba:	dd03      	ble.n	800afc4 <__multiply+0x90>
 800afbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d05a      	beq.n	800b07a <__multiply+0x146>
 800afc4:	6106      	str	r6, [r0, #16]
 800afc6:	b005      	add	sp, #20
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	f843 2b04 	str.w	r2, [r3], #4
 800afd0:	e7d8      	b.n	800af84 <__multiply+0x50>
 800afd2:	f8b3 a000 	ldrh.w	sl, [r3]
 800afd6:	f1ba 0f00 	cmp.w	sl, #0
 800afda:	d024      	beq.n	800b026 <__multiply+0xf2>
 800afdc:	f104 0e14 	add.w	lr, r4, #20
 800afe0:	46a9      	mov	r9, r5
 800afe2:	f04f 0c00 	mov.w	ip, #0
 800afe6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800afea:	f8d9 1000 	ldr.w	r1, [r9]
 800afee:	fa1f fb82 	uxth.w	fp, r2
 800aff2:	b289      	uxth	r1, r1
 800aff4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aff8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800affc:	f8d9 2000 	ldr.w	r2, [r9]
 800b000:	4461      	add	r1, ip
 800b002:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b006:	fb0a c20b 	mla	r2, sl, fp, ip
 800b00a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b00e:	b289      	uxth	r1, r1
 800b010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b014:	4577      	cmp	r7, lr
 800b016:	f849 1b04 	str.w	r1, [r9], #4
 800b01a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b01e:	d8e2      	bhi.n	800afe6 <__multiply+0xb2>
 800b020:	9a01      	ldr	r2, [sp, #4]
 800b022:	f845 c002 	str.w	ip, [r5, r2]
 800b026:	9a03      	ldr	r2, [sp, #12]
 800b028:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b02c:	3304      	adds	r3, #4
 800b02e:	f1b9 0f00 	cmp.w	r9, #0
 800b032:	d020      	beq.n	800b076 <__multiply+0x142>
 800b034:	6829      	ldr	r1, [r5, #0]
 800b036:	f104 0c14 	add.w	ip, r4, #20
 800b03a:	46ae      	mov	lr, r5
 800b03c:	f04f 0a00 	mov.w	sl, #0
 800b040:	f8bc b000 	ldrh.w	fp, [ip]
 800b044:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b048:	fb09 220b 	mla	r2, r9, fp, r2
 800b04c:	4492      	add	sl, r2
 800b04e:	b289      	uxth	r1, r1
 800b050:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b054:	f84e 1b04 	str.w	r1, [lr], #4
 800b058:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b05c:	f8be 1000 	ldrh.w	r1, [lr]
 800b060:	0c12      	lsrs	r2, r2, #16
 800b062:	fb09 1102 	mla	r1, r9, r2, r1
 800b066:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b06a:	4567      	cmp	r7, ip
 800b06c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b070:	d8e6      	bhi.n	800b040 <__multiply+0x10c>
 800b072:	9a01      	ldr	r2, [sp, #4]
 800b074:	50a9      	str	r1, [r5, r2]
 800b076:	3504      	adds	r5, #4
 800b078:	e79a      	b.n	800afb0 <__multiply+0x7c>
 800b07a:	3e01      	subs	r6, #1
 800b07c:	e79c      	b.n	800afb8 <__multiply+0x84>
 800b07e:	bf00      	nop
 800b080:	0800cae0 	.word	0x0800cae0
 800b084:	0800cb83 	.word	0x0800cb83

0800b088 <__pow5mult>:
 800b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b08c:	4615      	mov	r5, r2
 800b08e:	f012 0203 	ands.w	r2, r2, #3
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	d007      	beq.n	800b0a8 <__pow5mult+0x20>
 800b098:	4c25      	ldr	r4, [pc, #148]	; (800b130 <__pow5mult+0xa8>)
 800b09a:	3a01      	subs	r2, #1
 800b09c:	2300      	movs	r3, #0
 800b09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0a2:	f7ff fe51 	bl	800ad48 <__multadd>
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	10ad      	asrs	r5, r5, #2
 800b0aa:	d03d      	beq.n	800b128 <__pow5mult+0xa0>
 800b0ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0ae:	b97c      	cbnz	r4, 800b0d0 <__pow5mult+0x48>
 800b0b0:	2010      	movs	r0, #16
 800b0b2:	f000 feaf 	bl	800be14 <malloc>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ba:	b928      	cbnz	r0, 800b0c8 <__pow5mult+0x40>
 800b0bc:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <__pow5mult+0xac>)
 800b0be:	481e      	ldr	r0, [pc, #120]	; (800b138 <__pow5mult+0xb0>)
 800b0c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0c4:	f000 fe76 	bl	800bdb4 <__assert_func>
 800b0c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0cc:	6004      	str	r4, [r0, #0]
 800b0ce:	60c4      	str	r4, [r0, #12]
 800b0d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0d8:	b94c      	cbnz	r4, 800b0ee <__pow5mult+0x66>
 800b0da:	f240 2171 	movw	r1, #625	; 0x271
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff ff12 	bl	800af08 <__i2b>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	07eb      	lsls	r3, r5, #31
 800b0f4:	d50a      	bpl.n	800b10c <__pow5mult+0x84>
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ff1a 	bl	800af34 <__multiply>
 800b100:	4639      	mov	r1, r7
 800b102:	4680      	mov	r8, r0
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff fdfd 	bl	800ad04 <_Bfree>
 800b10a:	4647      	mov	r7, r8
 800b10c:	106d      	asrs	r5, r5, #1
 800b10e:	d00b      	beq.n	800b128 <__pow5mult+0xa0>
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	b938      	cbnz	r0, 800b124 <__pow5mult+0x9c>
 800b114:	4622      	mov	r2, r4
 800b116:	4621      	mov	r1, r4
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff ff0b 	bl	800af34 <__multiply>
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	f8c0 9000 	str.w	r9, [r0]
 800b124:	4604      	mov	r4, r0
 800b126:	e7e4      	b.n	800b0f2 <__pow5mult+0x6a>
 800b128:	4638      	mov	r0, r7
 800b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12e:	bf00      	nop
 800b130:	0800ccd0 	.word	0x0800ccd0
 800b134:	0800cb6c 	.word	0x0800cb6c
 800b138:	0800cb83 	.word	0x0800cb83

0800b13c <__lshift>:
 800b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	460c      	mov	r4, r1
 800b142:	6849      	ldr	r1, [r1, #4]
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	4607      	mov	r7, r0
 800b14e:	4691      	mov	r9, r2
 800b150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b154:	f108 0601 	add.w	r6, r8, #1
 800b158:	42b3      	cmp	r3, r6
 800b15a:	db0b      	blt.n	800b174 <__lshift+0x38>
 800b15c:	4638      	mov	r0, r7
 800b15e:	f7ff fd91 	bl	800ac84 <_Balloc>
 800b162:	4605      	mov	r5, r0
 800b164:	b948      	cbnz	r0, 800b17a <__lshift+0x3e>
 800b166:	4602      	mov	r2, r0
 800b168:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <__lshift+0xd8>)
 800b16a:	482b      	ldr	r0, [pc, #172]	; (800b218 <__lshift+0xdc>)
 800b16c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b170:	f000 fe20 	bl	800bdb4 <__assert_func>
 800b174:	3101      	adds	r1, #1
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	e7ee      	b.n	800b158 <__lshift+0x1c>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f100 0114 	add.w	r1, r0, #20
 800b180:	f100 0210 	add.w	r2, r0, #16
 800b184:	4618      	mov	r0, r3
 800b186:	4553      	cmp	r3, sl
 800b188:	db37      	blt.n	800b1fa <__lshift+0xbe>
 800b18a:	6920      	ldr	r0, [r4, #16]
 800b18c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b190:	f104 0314 	add.w	r3, r4, #20
 800b194:	f019 091f 	ands.w	r9, r9, #31
 800b198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b19c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1a0:	d02f      	beq.n	800b202 <__lshift+0xc6>
 800b1a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1a6:	468a      	mov	sl, r1
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	fa02 f209 	lsl.w	r2, r2, r9
 800b1b2:	ea42 020c 	orr.w	r2, r2, ip
 800b1b6:	f84a 2b04 	str.w	r2, [sl], #4
 800b1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1c4:	d8f2      	bhi.n	800b1ac <__lshift+0x70>
 800b1c6:	1b03      	subs	r3, r0, r4
 800b1c8:	3b15      	subs	r3, #21
 800b1ca:	f023 0303 	bic.w	r3, r3, #3
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	f104 0215 	add.w	r2, r4, #21
 800b1d4:	4290      	cmp	r0, r2
 800b1d6:	bf38      	it	cc
 800b1d8:	2304      	movcc	r3, #4
 800b1da:	f841 c003 	str.w	ip, [r1, r3]
 800b1de:	f1bc 0f00 	cmp.w	ip, #0
 800b1e2:	d001      	beq.n	800b1e8 <__lshift+0xac>
 800b1e4:	f108 0602 	add.w	r6, r8, #2
 800b1e8:	3e01      	subs	r6, #1
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	612e      	str	r6, [r5, #16]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f7ff fd88 	bl	800ad04 <_Bfree>
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1fe:	3301      	adds	r3, #1
 800b200:	e7c1      	b.n	800b186 <__lshift+0x4a>
 800b202:	3904      	subs	r1, #4
 800b204:	f853 2b04 	ldr.w	r2, [r3], #4
 800b208:	f841 2f04 	str.w	r2, [r1, #4]!
 800b20c:	4298      	cmp	r0, r3
 800b20e:	d8f9      	bhi.n	800b204 <__lshift+0xc8>
 800b210:	e7ea      	b.n	800b1e8 <__lshift+0xac>
 800b212:	bf00      	nop
 800b214:	0800cae0 	.word	0x0800cae0
 800b218:	0800cb83 	.word	0x0800cb83

0800b21c <__mcmp>:
 800b21c:	b530      	push	{r4, r5, lr}
 800b21e:	6902      	ldr	r2, [r0, #16]
 800b220:	690c      	ldr	r4, [r1, #16]
 800b222:	1b12      	subs	r2, r2, r4
 800b224:	d10e      	bne.n	800b244 <__mcmp+0x28>
 800b226:	f100 0314 	add.w	r3, r0, #20
 800b22a:	3114      	adds	r1, #20
 800b22c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b23c:	42a5      	cmp	r5, r4
 800b23e:	d003      	beq.n	800b248 <__mcmp+0x2c>
 800b240:	d305      	bcc.n	800b24e <__mcmp+0x32>
 800b242:	2201      	movs	r2, #1
 800b244:	4610      	mov	r0, r2
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	4283      	cmp	r3, r0
 800b24a:	d3f3      	bcc.n	800b234 <__mcmp+0x18>
 800b24c:	e7fa      	b.n	800b244 <__mcmp+0x28>
 800b24e:	f04f 32ff 	mov.w	r2, #4294967295
 800b252:	e7f7      	b.n	800b244 <__mcmp+0x28>

0800b254 <__mdiff>:
 800b254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	460c      	mov	r4, r1
 800b25a:	4606      	mov	r6, r0
 800b25c:	4611      	mov	r1, r2
 800b25e:	4620      	mov	r0, r4
 800b260:	4690      	mov	r8, r2
 800b262:	f7ff ffdb 	bl	800b21c <__mcmp>
 800b266:	1e05      	subs	r5, r0, #0
 800b268:	d110      	bne.n	800b28c <__mdiff+0x38>
 800b26a:	4629      	mov	r1, r5
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff fd09 	bl	800ac84 <_Balloc>
 800b272:	b930      	cbnz	r0, 800b282 <__mdiff+0x2e>
 800b274:	4b3a      	ldr	r3, [pc, #232]	; (800b360 <__mdiff+0x10c>)
 800b276:	4602      	mov	r2, r0
 800b278:	f240 2132 	movw	r1, #562	; 0x232
 800b27c:	4839      	ldr	r0, [pc, #228]	; (800b364 <__mdiff+0x110>)
 800b27e:	f000 fd99 	bl	800bdb4 <__assert_func>
 800b282:	2301      	movs	r3, #1
 800b284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28c:	bfa4      	itt	ge
 800b28e:	4643      	movge	r3, r8
 800b290:	46a0      	movge	r8, r4
 800b292:	4630      	mov	r0, r6
 800b294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b298:	bfa6      	itte	ge
 800b29a:	461c      	movge	r4, r3
 800b29c:	2500      	movge	r5, #0
 800b29e:	2501      	movlt	r5, #1
 800b2a0:	f7ff fcf0 	bl	800ac84 <_Balloc>
 800b2a4:	b920      	cbnz	r0, 800b2b0 <__mdiff+0x5c>
 800b2a6:	4b2e      	ldr	r3, [pc, #184]	; (800b360 <__mdiff+0x10c>)
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2ae:	e7e5      	b.n	800b27c <__mdiff+0x28>
 800b2b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2b4:	6926      	ldr	r6, [r4, #16]
 800b2b6:	60c5      	str	r5, [r0, #12]
 800b2b8:	f104 0914 	add.w	r9, r4, #20
 800b2bc:	f108 0514 	add.w	r5, r8, #20
 800b2c0:	f100 0e14 	add.w	lr, r0, #20
 800b2c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2cc:	f108 0210 	add.w	r2, r8, #16
 800b2d0:	46f2      	mov	sl, lr
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2dc:	fa1f f883 	uxth.w	r8, r3
 800b2e0:	fa11 f18b 	uxtah	r1, r1, fp
 800b2e4:	0c1b      	lsrs	r3, r3, #16
 800b2e6:	eba1 0808 	sub.w	r8, r1, r8
 800b2ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2f2:	fa1f f888 	uxth.w	r8, r8
 800b2f6:	1419      	asrs	r1, r3, #16
 800b2f8:	454e      	cmp	r6, r9
 800b2fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2fe:	f84a 3b04 	str.w	r3, [sl], #4
 800b302:	d8e7      	bhi.n	800b2d4 <__mdiff+0x80>
 800b304:	1b33      	subs	r3, r6, r4
 800b306:	3b15      	subs	r3, #21
 800b308:	f023 0303 	bic.w	r3, r3, #3
 800b30c:	3304      	adds	r3, #4
 800b30e:	3415      	adds	r4, #21
 800b310:	42a6      	cmp	r6, r4
 800b312:	bf38      	it	cc
 800b314:	2304      	movcc	r3, #4
 800b316:	441d      	add	r5, r3
 800b318:	4473      	add	r3, lr
 800b31a:	469e      	mov	lr, r3
 800b31c:	462e      	mov	r6, r5
 800b31e:	4566      	cmp	r6, ip
 800b320:	d30e      	bcc.n	800b340 <__mdiff+0xec>
 800b322:	f10c 0203 	add.w	r2, ip, #3
 800b326:	1b52      	subs	r2, r2, r5
 800b328:	f022 0203 	bic.w	r2, r2, #3
 800b32c:	3d03      	subs	r5, #3
 800b32e:	45ac      	cmp	ip, r5
 800b330:	bf38      	it	cc
 800b332:	2200      	movcc	r2, #0
 800b334:	441a      	add	r2, r3
 800b336:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b33a:	b17b      	cbz	r3, 800b35c <__mdiff+0x108>
 800b33c:	6107      	str	r7, [r0, #16]
 800b33e:	e7a3      	b.n	800b288 <__mdiff+0x34>
 800b340:	f856 8b04 	ldr.w	r8, [r6], #4
 800b344:	fa11 f288 	uxtah	r2, r1, r8
 800b348:	1414      	asrs	r4, r2, #16
 800b34a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b34e:	b292      	uxth	r2, r2
 800b350:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b354:	f84e 2b04 	str.w	r2, [lr], #4
 800b358:	1421      	asrs	r1, r4, #16
 800b35a:	e7e0      	b.n	800b31e <__mdiff+0xca>
 800b35c:	3f01      	subs	r7, #1
 800b35e:	e7ea      	b.n	800b336 <__mdiff+0xe2>
 800b360:	0800cae0 	.word	0x0800cae0
 800b364:	0800cb83 	.word	0x0800cb83

0800b368 <__ulp>:
 800b368:	b082      	sub	sp, #8
 800b36a:	ed8d 0b00 	vstr	d0, [sp]
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	4912      	ldr	r1, [pc, #72]	; (800b3bc <__ulp+0x54>)
 800b372:	4019      	ands	r1, r3
 800b374:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b378:	2900      	cmp	r1, #0
 800b37a:	dd05      	ble.n	800b388 <__ulp+0x20>
 800b37c:	2200      	movs	r2, #0
 800b37e:	460b      	mov	r3, r1
 800b380:	ec43 2b10 	vmov	d0, r2, r3
 800b384:	b002      	add	sp, #8
 800b386:	4770      	bx	lr
 800b388:	4249      	negs	r1, r1
 800b38a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b38e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	da04      	bge.n	800b3a6 <__ulp+0x3e>
 800b39c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b3a0:	fa41 f300 	asr.w	r3, r1, r0
 800b3a4:	e7ec      	b.n	800b380 <__ulp+0x18>
 800b3a6:	f1a0 0114 	sub.w	r1, r0, #20
 800b3aa:	291e      	cmp	r1, #30
 800b3ac:	bfda      	itte	le
 800b3ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b3b2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b3b6:	2101      	movgt	r1, #1
 800b3b8:	460a      	mov	r2, r1
 800b3ba:	e7e1      	b.n	800b380 <__ulp+0x18>
 800b3bc:	7ff00000 	.word	0x7ff00000

0800b3c0 <__b2d>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	6905      	ldr	r5, [r0, #16]
 800b3c4:	f100 0714 	add.w	r7, r0, #20
 800b3c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3cc:	1f2e      	subs	r6, r5, #4
 800b3ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7ff fd48 	bl	800ae68 <__hi0bits>
 800b3d8:	f1c0 0320 	rsb	r3, r0, #32
 800b3dc:	280a      	cmp	r0, #10
 800b3de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b45c <__b2d+0x9c>
 800b3e2:	600b      	str	r3, [r1, #0]
 800b3e4:	dc14      	bgt.n	800b410 <__b2d+0x50>
 800b3e6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3ea:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3ee:	42b7      	cmp	r7, r6
 800b3f0:	ea41 030c 	orr.w	r3, r1, ip
 800b3f4:	bf34      	ite	cc
 800b3f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3fa:	2100      	movcs	r1, #0
 800b3fc:	3015      	adds	r0, #21
 800b3fe:	fa04 f000 	lsl.w	r0, r4, r0
 800b402:	fa21 f10e 	lsr.w	r1, r1, lr
 800b406:	ea40 0201 	orr.w	r2, r0, r1
 800b40a:	ec43 2b10 	vmov	d0, r2, r3
 800b40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b410:	42b7      	cmp	r7, r6
 800b412:	bf3a      	itte	cc
 800b414:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b418:	f1a5 0608 	subcc.w	r6, r5, #8
 800b41c:	2100      	movcs	r1, #0
 800b41e:	380b      	subs	r0, #11
 800b420:	d017      	beq.n	800b452 <__b2d+0x92>
 800b422:	f1c0 0c20 	rsb	ip, r0, #32
 800b426:	fa04 f500 	lsl.w	r5, r4, r0
 800b42a:	42be      	cmp	r6, r7
 800b42c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b430:	ea45 0504 	orr.w	r5, r5, r4
 800b434:	bf8c      	ite	hi
 800b436:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b43a:	2400      	movls	r4, #0
 800b43c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b440:	fa01 f000 	lsl.w	r0, r1, r0
 800b444:	fa24 f40c 	lsr.w	r4, r4, ip
 800b448:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b44c:	ea40 0204 	orr.w	r2, r0, r4
 800b450:	e7db      	b.n	800b40a <__b2d+0x4a>
 800b452:	ea44 030c 	orr.w	r3, r4, ip
 800b456:	460a      	mov	r2, r1
 800b458:	e7d7      	b.n	800b40a <__b2d+0x4a>
 800b45a:	bf00      	nop
 800b45c:	3ff00000 	.word	0x3ff00000

0800b460 <__d2b>:
 800b460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b464:	4689      	mov	r9, r1
 800b466:	2101      	movs	r1, #1
 800b468:	ec57 6b10 	vmov	r6, r7, d0
 800b46c:	4690      	mov	r8, r2
 800b46e:	f7ff fc09 	bl	800ac84 <_Balloc>
 800b472:	4604      	mov	r4, r0
 800b474:	b930      	cbnz	r0, 800b484 <__d2b+0x24>
 800b476:	4602      	mov	r2, r0
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <__d2b+0xb0>)
 800b47a:	4826      	ldr	r0, [pc, #152]	; (800b514 <__d2b+0xb4>)
 800b47c:	f240 310a 	movw	r1, #778	; 0x30a
 800b480:	f000 fc98 	bl	800bdb4 <__assert_func>
 800b484:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b48c:	bb35      	cbnz	r5, 800b4dc <__d2b+0x7c>
 800b48e:	2e00      	cmp	r6, #0
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	d028      	beq.n	800b4e6 <__d2b+0x86>
 800b494:	4668      	mov	r0, sp
 800b496:	9600      	str	r6, [sp, #0]
 800b498:	f7ff fd06 	bl	800aea8 <__lo0bits>
 800b49c:	9900      	ldr	r1, [sp, #0]
 800b49e:	b300      	cbz	r0, 800b4e2 <__d2b+0x82>
 800b4a0:	9a01      	ldr	r2, [sp, #4]
 800b4a2:	f1c0 0320 	rsb	r3, r0, #32
 800b4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	40c2      	lsrs	r2, r0
 800b4ae:	6163      	str	r3, [r4, #20]
 800b4b0:	9201      	str	r2, [sp, #4]
 800b4b2:	9b01      	ldr	r3, [sp, #4]
 800b4b4:	61a3      	str	r3, [r4, #24]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bf14      	ite	ne
 800b4ba:	2202      	movne	r2, #2
 800b4bc:	2201      	moveq	r2, #1
 800b4be:	6122      	str	r2, [r4, #16]
 800b4c0:	b1d5      	cbz	r5, 800b4f8 <__d2b+0x98>
 800b4c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4c6:	4405      	add	r5, r0
 800b4c8:	f8c9 5000 	str.w	r5, [r9]
 800b4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4d0:	f8c8 0000 	str.w	r0, [r8]
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	b003      	add	sp, #12
 800b4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e0:	e7d5      	b.n	800b48e <__d2b+0x2e>
 800b4e2:	6161      	str	r1, [r4, #20]
 800b4e4:	e7e5      	b.n	800b4b2 <__d2b+0x52>
 800b4e6:	a801      	add	r0, sp, #4
 800b4e8:	f7ff fcde 	bl	800aea8 <__lo0bits>
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	6122      	str	r2, [r4, #16]
 800b4f4:	3020      	adds	r0, #32
 800b4f6:	e7e3      	b.n	800b4c0 <__d2b+0x60>
 800b4f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b500:	f8c9 0000 	str.w	r0, [r9]
 800b504:	6918      	ldr	r0, [r3, #16]
 800b506:	f7ff fcaf 	bl	800ae68 <__hi0bits>
 800b50a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b50e:	e7df      	b.n	800b4d0 <__d2b+0x70>
 800b510:	0800cae0 	.word	0x0800cae0
 800b514:	0800cb83 	.word	0x0800cb83

0800b518 <__ratio>:
 800b518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4688      	mov	r8, r1
 800b51e:	4669      	mov	r1, sp
 800b520:	4681      	mov	r9, r0
 800b522:	f7ff ff4d 	bl	800b3c0 <__b2d>
 800b526:	a901      	add	r1, sp, #4
 800b528:	4640      	mov	r0, r8
 800b52a:	ec55 4b10 	vmov	r4, r5, d0
 800b52e:	f7ff ff47 	bl	800b3c0 <__b2d>
 800b532:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b536:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b53a:	eba3 0c02 	sub.w	ip, r3, r2
 800b53e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b542:	1a9b      	subs	r3, r3, r2
 800b544:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b548:	ec51 0b10 	vmov	r0, r1, d0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfd6      	itet	le
 800b550:	460a      	movle	r2, r1
 800b552:	462a      	movgt	r2, r5
 800b554:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b558:	468b      	mov	fp, r1
 800b55a:	462f      	mov	r7, r5
 800b55c:	bfd4      	ite	le
 800b55e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b562:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b566:	4620      	mov	r0, r4
 800b568:	ee10 2a10 	vmov	r2, s0
 800b56c:	465b      	mov	r3, fp
 800b56e:	4639      	mov	r1, r7
 800b570:	f7f5 f96c 	bl	800084c <__aeabi_ddiv>
 800b574:	ec41 0b10 	vmov	d0, r0, r1
 800b578:	b003      	add	sp, #12
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b57e <__copybits>:
 800b57e:	3901      	subs	r1, #1
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	1149      	asrs	r1, r1, #5
 800b584:	6914      	ldr	r4, [r2, #16]
 800b586:	3101      	adds	r1, #1
 800b588:	f102 0314 	add.w	r3, r2, #20
 800b58c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b590:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b594:	1f05      	subs	r5, r0, #4
 800b596:	42a3      	cmp	r3, r4
 800b598:	d30c      	bcc.n	800b5b4 <__copybits+0x36>
 800b59a:	1aa3      	subs	r3, r4, r2
 800b59c:	3b11      	subs	r3, #17
 800b59e:	f023 0303 	bic.w	r3, r3, #3
 800b5a2:	3211      	adds	r2, #17
 800b5a4:	42a2      	cmp	r2, r4
 800b5a6:	bf88      	it	hi
 800b5a8:	2300      	movhi	r3, #0
 800b5aa:	4418      	add	r0, r3
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4288      	cmp	r0, r1
 800b5b0:	d305      	bcc.n	800b5be <__copybits+0x40>
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5bc:	e7eb      	b.n	800b596 <__copybits+0x18>
 800b5be:	f840 3b04 	str.w	r3, [r0], #4
 800b5c2:	e7f4      	b.n	800b5ae <__copybits+0x30>

0800b5c4 <__any_on>:
 800b5c4:	f100 0214 	add.w	r2, r0, #20
 800b5c8:	6900      	ldr	r0, [r0, #16]
 800b5ca:	114b      	asrs	r3, r1, #5
 800b5cc:	4298      	cmp	r0, r3
 800b5ce:	b510      	push	{r4, lr}
 800b5d0:	db11      	blt.n	800b5f6 <__any_on+0x32>
 800b5d2:	dd0a      	ble.n	800b5ea <__any_on+0x26>
 800b5d4:	f011 011f 	ands.w	r1, r1, #31
 800b5d8:	d007      	beq.n	800b5ea <__any_on+0x26>
 800b5da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5de:	fa24 f001 	lsr.w	r0, r4, r1
 800b5e2:	fa00 f101 	lsl.w	r1, r0, r1
 800b5e6:	428c      	cmp	r4, r1
 800b5e8:	d10b      	bne.n	800b602 <__any_on+0x3e>
 800b5ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d803      	bhi.n	800b5fa <__any_on+0x36>
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	e7f7      	b.n	800b5ea <__any_on+0x26>
 800b5fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5fe:	2900      	cmp	r1, #0
 800b600:	d0f5      	beq.n	800b5ee <__any_on+0x2a>
 800b602:	2001      	movs	r0, #1
 800b604:	e7f6      	b.n	800b5f4 <__any_on+0x30>

0800b606 <_calloc_r>:
 800b606:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b608:	fba1 2402 	umull	r2, r4, r1, r2
 800b60c:	b94c      	cbnz	r4, 800b622 <_calloc_r+0x1c>
 800b60e:	4611      	mov	r1, r2
 800b610:	9201      	str	r2, [sp, #4]
 800b612:	f000 f82f 	bl	800b674 <_malloc_r>
 800b616:	9a01      	ldr	r2, [sp, #4]
 800b618:	4605      	mov	r5, r0
 800b61a:	b930      	cbnz	r0, 800b62a <_calloc_r+0x24>
 800b61c:	4628      	mov	r0, r5
 800b61e:	b003      	add	sp, #12
 800b620:	bd30      	pop	{r4, r5, pc}
 800b622:	220c      	movs	r2, #12
 800b624:	6002      	str	r2, [r0, #0]
 800b626:	2500      	movs	r5, #0
 800b628:	e7f8      	b.n	800b61c <_calloc_r+0x16>
 800b62a:	4621      	mov	r1, r4
 800b62c:	f7fe f92e 	bl	800988c <memset>
 800b630:	e7f4      	b.n	800b61c <_calloc_r+0x16>
	...

0800b634 <sbrk_aligned>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4e0e      	ldr	r6, [pc, #56]	; (800b670 <sbrk_aligned+0x3c>)
 800b638:	460c      	mov	r4, r1
 800b63a:	6831      	ldr	r1, [r6, #0]
 800b63c:	4605      	mov	r5, r0
 800b63e:	b911      	cbnz	r1, 800b646 <sbrk_aligned+0x12>
 800b640:	f000 fb86 	bl	800bd50 <_sbrk_r>
 800b644:	6030      	str	r0, [r6, #0]
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 fb81 	bl	800bd50 <_sbrk_r>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d00a      	beq.n	800b668 <sbrk_aligned+0x34>
 800b652:	1cc4      	adds	r4, r0, #3
 800b654:	f024 0403 	bic.w	r4, r4, #3
 800b658:	42a0      	cmp	r0, r4
 800b65a:	d007      	beq.n	800b66c <sbrk_aligned+0x38>
 800b65c:	1a21      	subs	r1, r4, r0
 800b65e:	4628      	mov	r0, r5
 800b660:	f000 fb76 	bl	800bd50 <_sbrk_r>
 800b664:	3001      	adds	r0, #1
 800b666:	d101      	bne.n	800b66c <sbrk_aligned+0x38>
 800b668:	f04f 34ff 	mov.w	r4, #4294967295
 800b66c:	4620      	mov	r0, r4
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	20002068 	.word	0x20002068

0800b674 <_malloc_r>:
 800b674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b678:	1ccd      	adds	r5, r1, #3
 800b67a:	f025 0503 	bic.w	r5, r5, #3
 800b67e:	3508      	adds	r5, #8
 800b680:	2d0c      	cmp	r5, #12
 800b682:	bf38      	it	cc
 800b684:	250c      	movcc	r5, #12
 800b686:	2d00      	cmp	r5, #0
 800b688:	4607      	mov	r7, r0
 800b68a:	db01      	blt.n	800b690 <_malloc_r+0x1c>
 800b68c:	42a9      	cmp	r1, r5
 800b68e:	d905      	bls.n	800b69c <_malloc_r+0x28>
 800b690:	230c      	movs	r3, #12
 800b692:	603b      	str	r3, [r7, #0]
 800b694:	2600      	movs	r6, #0
 800b696:	4630      	mov	r0, r6
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	4e2e      	ldr	r6, [pc, #184]	; (800b758 <_malloc_r+0xe4>)
 800b69e:	f000 fbdb 	bl	800be58 <__malloc_lock>
 800b6a2:	6833      	ldr	r3, [r6, #0]
 800b6a4:	461c      	mov	r4, r3
 800b6a6:	bb34      	cbnz	r4, 800b6f6 <_malloc_r+0x82>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	f7ff ffc2 	bl	800b634 <sbrk_aligned>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	d14d      	bne.n	800b752 <_malloc_r+0xde>
 800b6b6:	6834      	ldr	r4, [r6, #0]
 800b6b8:	4626      	mov	r6, r4
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	d140      	bne.n	800b740 <_malloc_r+0xcc>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	eb04 0803 	add.w	r8, r4, r3
 800b6c8:	f000 fb42 	bl	800bd50 <_sbrk_r>
 800b6cc:	4580      	cmp	r8, r0
 800b6ce:	d13a      	bne.n	800b746 <_malloc_r+0xd2>
 800b6d0:	6821      	ldr	r1, [r4, #0]
 800b6d2:	3503      	adds	r5, #3
 800b6d4:	1a6d      	subs	r5, r5, r1
 800b6d6:	f025 0503 	bic.w	r5, r5, #3
 800b6da:	3508      	adds	r5, #8
 800b6dc:	2d0c      	cmp	r5, #12
 800b6de:	bf38      	it	cc
 800b6e0:	250c      	movcc	r5, #12
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	f7ff ffa5 	bl	800b634 <sbrk_aligned>
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d02b      	beq.n	800b746 <_malloc_r+0xd2>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	442b      	add	r3, r5
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	e00e      	b.n	800b714 <_malloc_r+0xa0>
 800b6f6:	6822      	ldr	r2, [r4, #0]
 800b6f8:	1b52      	subs	r2, r2, r5
 800b6fa:	d41e      	bmi.n	800b73a <_malloc_r+0xc6>
 800b6fc:	2a0b      	cmp	r2, #11
 800b6fe:	d916      	bls.n	800b72e <_malloc_r+0xba>
 800b700:	1961      	adds	r1, r4, r5
 800b702:	42a3      	cmp	r3, r4
 800b704:	6025      	str	r5, [r4, #0]
 800b706:	bf18      	it	ne
 800b708:	6059      	strne	r1, [r3, #4]
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	bf08      	it	eq
 800b70e:	6031      	streq	r1, [r6, #0]
 800b710:	5162      	str	r2, [r4, r5]
 800b712:	604b      	str	r3, [r1, #4]
 800b714:	4638      	mov	r0, r7
 800b716:	f104 060b 	add.w	r6, r4, #11
 800b71a:	f000 fba3 	bl	800be64 <__malloc_unlock>
 800b71e:	f026 0607 	bic.w	r6, r6, #7
 800b722:	1d23      	adds	r3, r4, #4
 800b724:	1af2      	subs	r2, r6, r3
 800b726:	d0b6      	beq.n	800b696 <_malloc_r+0x22>
 800b728:	1b9b      	subs	r3, r3, r6
 800b72a:	50a3      	str	r3, [r4, r2]
 800b72c:	e7b3      	b.n	800b696 <_malloc_r+0x22>
 800b72e:	6862      	ldr	r2, [r4, #4]
 800b730:	42a3      	cmp	r3, r4
 800b732:	bf0c      	ite	eq
 800b734:	6032      	streq	r2, [r6, #0]
 800b736:	605a      	strne	r2, [r3, #4]
 800b738:	e7ec      	b.n	800b714 <_malloc_r+0xa0>
 800b73a:	4623      	mov	r3, r4
 800b73c:	6864      	ldr	r4, [r4, #4]
 800b73e:	e7b2      	b.n	800b6a6 <_malloc_r+0x32>
 800b740:	4634      	mov	r4, r6
 800b742:	6876      	ldr	r6, [r6, #4]
 800b744:	e7b9      	b.n	800b6ba <_malloc_r+0x46>
 800b746:	230c      	movs	r3, #12
 800b748:	603b      	str	r3, [r7, #0]
 800b74a:	4638      	mov	r0, r7
 800b74c:	f000 fb8a 	bl	800be64 <__malloc_unlock>
 800b750:	e7a1      	b.n	800b696 <_malloc_r+0x22>
 800b752:	6025      	str	r5, [r4, #0]
 800b754:	e7de      	b.n	800b714 <_malloc_r+0xa0>
 800b756:	bf00      	nop
 800b758:	20002064 	.word	0x20002064

0800b75c <__ssputs_r>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	688e      	ldr	r6, [r1, #8]
 800b762:	429e      	cmp	r6, r3
 800b764:	4682      	mov	sl, r0
 800b766:	460c      	mov	r4, r1
 800b768:	4690      	mov	r8, r2
 800b76a:	461f      	mov	r7, r3
 800b76c:	d838      	bhi.n	800b7e0 <__ssputs_r+0x84>
 800b76e:	898a      	ldrh	r2, [r1, #12]
 800b770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b774:	d032      	beq.n	800b7dc <__ssputs_r+0x80>
 800b776:	6825      	ldr	r5, [r4, #0]
 800b778:	6909      	ldr	r1, [r1, #16]
 800b77a:	eba5 0901 	sub.w	r9, r5, r1
 800b77e:	6965      	ldr	r5, [r4, #20]
 800b780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b788:	3301      	adds	r3, #1
 800b78a:	444b      	add	r3, r9
 800b78c:	106d      	asrs	r5, r5, #1
 800b78e:	429d      	cmp	r5, r3
 800b790:	bf38      	it	cc
 800b792:	461d      	movcc	r5, r3
 800b794:	0553      	lsls	r3, r2, #21
 800b796:	d531      	bpl.n	800b7fc <__ssputs_r+0xa0>
 800b798:	4629      	mov	r1, r5
 800b79a:	f7ff ff6b 	bl	800b674 <_malloc_r>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	b950      	cbnz	r0, 800b7b8 <__ssputs_r+0x5c>
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	f8ca 3000 	str.w	r3, [sl]
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	6921      	ldr	r1, [r4, #16]
 800b7ba:	464a      	mov	r2, r9
 800b7bc:	f7ff fa54 	bl	800ac68 <memcpy>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	6126      	str	r6, [r4, #16]
 800b7ce:	6165      	str	r5, [r4, #20]
 800b7d0:	444e      	add	r6, r9
 800b7d2:	eba5 0509 	sub.w	r5, r5, r9
 800b7d6:	6026      	str	r6, [r4, #0]
 800b7d8:	60a5      	str	r5, [r4, #8]
 800b7da:	463e      	mov	r6, r7
 800b7dc:	42be      	cmp	r6, r7
 800b7de:	d900      	bls.n	800b7e2 <__ssputs_r+0x86>
 800b7e0:	463e      	mov	r6, r7
 800b7e2:	6820      	ldr	r0, [r4, #0]
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	f000 fb1c 	bl	800be24 <memmove>
 800b7ec:	68a3      	ldr	r3, [r4, #8]
 800b7ee:	1b9b      	subs	r3, r3, r6
 800b7f0:	60a3      	str	r3, [r4, #8]
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	4433      	add	r3, r6
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e7db      	b.n	800b7b4 <__ssputs_r+0x58>
 800b7fc:	462a      	mov	r2, r5
 800b7fe:	f000 fb83 	bl	800bf08 <_realloc_r>
 800b802:	4606      	mov	r6, r0
 800b804:	2800      	cmp	r0, #0
 800b806:	d1e1      	bne.n	800b7cc <__ssputs_r+0x70>
 800b808:	6921      	ldr	r1, [r4, #16]
 800b80a:	4650      	mov	r0, sl
 800b80c:	f000 fb30 	bl	800be70 <_free_r>
 800b810:	e7c7      	b.n	800b7a2 <__ssputs_r+0x46>
	...

0800b814 <_svfiprintf_r>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	4698      	mov	r8, r3
 800b81a:	898b      	ldrh	r3, [r1, #12]
 800b81c:	061b      	lsls	r3, r3, #24
 800b81e:	b09d      	sub	sp, #116	; 0x74
 800b820:	4607      	mov	r7, r0
 800b822:	460d      	mov	r5, r1
 800b824:	4614      	mov	r4, r2
 800b826:	d50e      	bpl.n	800b846 <_svfiprintf_r+0x32>
 800b828:	690b      	ldr	r3, [r1, #16]
 800b82a:	b963      	cbnz	r3, 800b846 <_svfiprintf_r+0x32>
 800b82c:	2140      	movs	r1, #64	; 0x40
 800b82e:	f7ff ff21 	bl	800b674 <_malloc_r>
 800b832:	6028      	str	r0, [r5, #0]
 800b834:	6128      	str	r0, [r5, #16]
 800b836:	b920      	cbnz	r0, 800b842 <_svfiprintf_r+0x2e>
 800b838:	230c      	movs	r3, #12
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	e0d1      	b.n	800b9e6 <_svfiprintf_r+0x1d2>
 800b842:	2340      	movs	r3, #64	; 0x40
 800b844:	616b      	str	r3, [r5, #20]
 800b846:	2300      	movs	r3, #0
 800b848:	9309      	str	r3, [sp, #36]	; 0x24
 800b84a:	2320      	movs	r3, #32
 800b84c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b850:	f8cd 800c 	str.w	r8, [sp, #12]
 800b854:	2330      	movs	r3, #48	; 0x30
 800b856:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba00 <_svfiprintf_r+0x1ec>
 800b85a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b85e:	f04f 0901 	mov.w	r9, #1
 800b862:	4623      	mov	r3, r4
 800b864:	469a      	mov	sl, r3
 800b866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86a:	b10a      	cbz	r2, 800b870 <_svfiprintf_r+0x5c>
 800b86c:	2a25      	cmp	r2, #37	; 0x25
 800b86e:	d1f9      	bne.n	800b864 <_svfiprintf_r+0x50>
 800b870:	ebba 0b04 	subs.w	fp, sl, r4
 800b874:	d00b      	beq.n	800b88e <_svfiprintf_r+0x7a>
 800b876:	465b      	mov	r3, fp
 800b878:	4622      	mov	r2, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ff6d 	bl	800b75c <__ssputs_r>
 800b882:	3001      	adds	r0, #1
 800b884:	f000 80aa 	beq.w	800b9dc <_svfiprintf_r+0x1c8>
 800b888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b88a:	445a      	add	r2, fp
 800b88c:	9209      	str	r2, [sp, #36]	; 0x24
 800b88e:	f89a 3000 	ldrb.w	r3, [sl]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 80a2 	beq.w	800b9dc <_svfiprintf_r+0x1c8>
 800b898:	2300      	movs	r3, #0
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a2:	f10a 0a01 	add.w	sl, sl, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	9307      	str	r3, [sp, #28]
 800b8aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2205      	movs	r2, #5
 800b8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b8:	4851      	ldr	r0, [pc, #324]	; (800ba00 <_svfiprintf_r+0x1ec>)
 800b8ba:	f7f4 fc91 	bl	80001e0 <memchr>
 800b8be:	9a04      	ldr	r2, [sp, #16]
 800b8c0:	b9d8      	cbnz	r0, 800b8fa <_svfiprintf_r+0xe6>
 800b8c2:	06d0      	lsls	r0, r2, #27
 800b8c4:	bf44      	itt	mi
 800b8c6:	2320      	movmi	r3, #32
 800b8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8cc:	0711      	lsls	r1, r2, #28
 800b8ce:	bf44      	itt	mi
 800b8d0:	232b      	movmi	r3, #43	; 0x2b
 800b8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8da:	2b2a      	cmp	r3, #42	; 0x2a
 800b8dc:	d015      	beq.n	800b90a <_svfiprintf_r+0xf6>
 800b8de:	9a07      	ldr	r2, [sp, #28]
 800b8e0:	4654      	mov	r4, sl
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f04f 0c0a 	mov.w	ip, #10
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ee:	3b30      	subs	r3, #48	; 0x30
 800b8f0:	2b09      	cmp	r3, #9
 800b8f2:	d94e      	bls.n	800b992 <_svfiprintf_r+0x17e>
 800b8f4:	b1b0      	cbz	r0, 800b924 <_svfiprintf_r+0x110>
 800b8f6:	9207      	str	r2, [sp, #28]
 800b8f8:	e014      	b.n	800b924 <_svfiprintf_r+0x110>
 800b8fa:	eba0 0308 	sub.w	r3, r0, r8
 800b8fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b902:	4313      	orrs	r3, r2
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	46a2      	mov	sl, r4
 800b908:	e7d2      	b.n	800b8b0 <_svfiprintf_r+0x9c>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	1d19      	adds	r1, r3, #4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfbb      	ittet	lt
 800b916:	425b      	neglt	r3, r3
 800b918:	f042 0202 	orrlt.w	r2, r2, #2
 800b91c:	9307      	strge	r3, [sp, #28]
 800b91e:	9307      	strlt	r3, [sp, #28]
 800b920:	bfb8      	it	lt
 800b922:	9204      	strlt	r2, [sp, #16]
 800b924:	7823      	ldrb	r3, [r4, #0]
 800b926:	2b2e      	cmp	r3, #46	; 0x2e
 800b928:	d10c      	bne.n	800b944 <_svfiprintf_r+0x130>
 800b92a:	7863      	ldrb	r3, [r4, #1]
 800b92c:	2b2a      	cmp	r3, #42	; 0x2a
 800b92e:	d135      	bne.n	800b99c <_svfiprintf_r+0x188>
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	1d1a      	adds	r2, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	9203      	str	r2, [sp, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfb8      	it	lt
 800b93c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b940:	3402      	adds	r4, #2
 800b942:	9305      	str	r3, [sp, #20]
 800b944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba10 <_svfiprintf_r+0x1fc>
 800b948:	7821      	ldrb	r1, [r4, #0]
 800b94a:	2203      	movs	r2, #3
 800b94c:	4650      	mov	r0, sl
 800b94e:	f7f4 fc47 	bl	80001e0 <memchr>
 800b952:	b140      	cbz	r0, 800b966 <_svfiprintf_r+0x152>
 800b954:	2340      	movs	r3, #64	; 0x40
 800b956:	eba0 000a 	sub.w	r0, r0, sl
 800b95a:	fa03 f000 	lsl.w	r0, r3, r0
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	4303      	orrs	r3, r0
 800b962:	3401      	adds	r4, #1
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96a:	4826      	ldr	r0, [pc, #152]	; (800ba04 <_svfiprintf_r+0x1f0>)
 800b96c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b970:	2206      	movs	r2, #6
 800b972:	f7f4 fc35 	bl	80001e0 <memchr>
 800b976:	2800      	cmp	r0, #0
 800b978:	d038      	beq.n	800b9ec <_svfiprintf_r+0x1d8>
 800b97a:	4b23      	ldr	r3, [pc, #140]	; (800ba08 <_svfiprintf_r+0x1f4>)
 800b97c:	bb1b      	cbnz	r3, 800b9c6 <_svfiprintf_r+0x1b2>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	3307      	adds	r3, #7
 800b982:	f023 0307 	bic.w	r3, r3, #7
 800b986:	3308      	adds	r3, #8
 800b988:	9303      	str	r3, [sp, #12]
 800b98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98c:	4433      	add	r3, r6
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	e767      	b.n	800b862 <_svfiprintf_r+0x4e>
 800b992:	fb0c 3202 	mla	r2, ip, r2, r3
 800b996:	460c      	mov	r4, r1
 800b998:	2001      	movs	r0, #1
 800b99a:	e7a5      	b.n	800b8e8 <_svfiprintf_r+0xd4>
 800b99c:	2300      	movs	r3, #0
 800b99e:	3401      	adds	r4, #1
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f04f 0c0a 	mov.w	ip, #10
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ae:	3a30      	subs	r2, #48	; 0x30
 800b9b0:	2a09      	cmp	r2, #9
 800b9b2:	d903      	bls.n	800b9bc <_svfiprintf_r+0x1a8>
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0c5      	beq.n	800b944 <_svfiprintf_r+0x130>
 800b9b8:	9105      	str	r1, [sp, #20]
 800b9ba:	e7c3      	b.n	800b944 <_svfiprintf_r+0x130>
 800b9bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e7f0      	b.n	800b9a8 <_svfiprintf_r+0x194>
 800b9c6:	ab03      	add	r3, sp, #12
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	462a      	mov	r2, r5
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <_svfiprintf_r+0x1f8>)
 800b9ce:	a904      	add	r1, sp, #16
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f3af 8000 	nop.w
 800b9d6:	1c42      	adds	r2, r0, #1
 800b9d8:	4606      	mov	r6, r0
 800b9da:	d1d6      	bne.n	800b98a <_svfiprintf_r+0x176>
 800b9dc:	89ab      	ldrh	r3, [r5, #12]
 800b9de:	065b      	lsls	r3, r3, #25
 800b9e0:	f53f af2c 	bmi.w	800b83c <_svfiprintf_r+0x28>
 800b9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e6:	b01d      	add	sp, #116	; 0x74
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <_svfiprintf_r+0x1f8>)
 800b9f4:	a904      	add	r1, sp, #16
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f000 f87a 	bl	800baf0 <_printf_i>
 800b9fc:	e7eb      	b.n	800b9d6 <_svfiprintf_r+0x1c2>
 800b9fe:	bf00      	nop
 800ba00:	0800ccdc 	.word	0x0800ccdc
 800ba04:	0800cce6 	.word	0x0800cce6
 800ba08:	00000000 	.word	0x00000000
 800ba0c:	0800b75d 	.word	0x0800b75d
 800ba10:	0800cce2 	.word	0x0800cce2

0800ba14 <_printf_common>:
 800ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba18:	4616      	mov	r6, r2
 800ba1a:	4699      	mov	r9, r3
 800ba1c:	688a      	ldr	r2, [r1, #8]
 800ba1e:	690b      	ldr	r3, [r1, #16]
 800ba20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	bfb8      	it	lt
 800ba28:	4613      	movlt	r3, r2
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba30:	4607      	mov	r7, r0
 800ba32:	460c      	mov	r4, r1
 800ba34:	b10a      	cbz	r2, 800ba3a <_printf_common+0x26>
 800ba36:	3301      	adds	r3, #1
 800ba38:	6033      	str	r3, [r6, #0]
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	0699      	lsls	r1, r3, #26
 800ba3e:	bf42      	ittt	mi
 800ba40:	6833      	ldrmi	r3, [r6, #0]
 800ba42:	3302      	addmi	r3, #2
 800ba44:	6033      	strmi	r3, [r6, #0]
 800ba46:	6825      	ldr	r5, [r4, #0]
 800ba48:	f015 0506 	ands.w	r5, r5, #6
 800ba4c:	d106      	bne.n	800ba5c <_printf_common+0x48>
 800ba4e:	f104 0a19 	add.w	sl, r4, #25
 800ba52:	68e3      	ldr	r3, [r4, #12]
 800ba54:	6832      	ldr	r2, [r6, #0]
 800ba56:	1a9b      	subs	r3, r3, r2
 800ba58:	42ab      	cmp	r3, r5
 800ba5a:	dc26      	bgt.n	800baaa <_printf_common+0x96>
 800ba5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba60:	1e13      	subs	r3, r2, #0
 800ba62:	6822      	ldr	r2, [r4, #0]
 800ba64:	bf18      	it	ne
 800ba66:	2301      	movne	r3, #1
 800ba68:	0692      	lsls	r2, r2, #26
 800ba6a:	d42b      	bmi.n	800bac4 <_printf_common+0xb0>
 800ba6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba70:	4649      	mov	r1, r9
 800ba72:	4638      	mov	r0, r7
 800ba74:	47c0      	blx	r8
 800ba76:	3001      	adds	r0, #1
 800ba78:	d01e      	beq.n	800bab8 <_printf_common+0xa4>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	68e5      	ldr	r5, [r4, #12]
 800ba7e:	6832      	ldr	r2, [r6, #0]
 800ba80:	f003 0306 	and.w	r3, r3, #6
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	bf08      	it	eq
 800ba88:	1aad      	subeq	r5, r5, r2
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	6922      	ldr	r2, [r4, #16]
 800ba8e:	bf0c      	ite	eq
 800ba90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba94:	2500      	movne	r5, #0
 800ba96:	4293      	cmp	r3, r2
 800ba98:	bfc4      	itt	gt
 800ba9a:	1a9b      	subgt	r3, r3, r2
 800ba9c:	18ed      	addgt	r5, r5, r3
 800ba9e:	2600      	movs	r6, #0
 800baa0:	341a      	adds	r4, #26
 800baa2:	42b5      	cmp	r5, r6
 800baa4:	d11a      	bne.n	800badc <_printf_common+0xc8>
 800baa6:	2000      	movs	r0, #0
 800baa8:	e008      	b.n	800babc <_printf_common+0xa8>
 800baaa:	2301      	movs	r3, #1
 800baac:	4652      	mov	r2, sl
 800baae:	4649      	mov	r1, r9
 800bab0:	4638      	mov	r0, r7
 800bab2:	47c0      	blx	r8
 800bab4:	3001      	adds	r0, #1
 800bab6:	d103      	bne.n	800bac0 <_printf_common+0xac>
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac0:	3501      	adds	r5, #1
 800bac2:	e7c6      	b.n	800ba52 <_printf_common+0x3e>
 800bac4:	18e1      	adds	r1, r4, r3
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	2030      	movs	r0, #48	; 0x30
 800baca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bace:	4422      	add	r2, r4
 800bad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bad8:	3302      	adds	r3, #2
 800bada:	e7c7      	b.n	800ba6c <_printf_common+0x58>
 800badc:	2301      	movs	r3, #1
 800bade:	4622      	mov	r2, r4
 800bae0:	4649      	mov	r1, r9
 800bae2:	4638      	mov	r0, r7
 800bae4:	47c0      	blx	r8
 800bae6:	3001      	adds	r0, #1
 800bae8:	d0e6      	beq.n	800bab8 <_printf_common+0xa4>
 800baea:	3601      	adds	r6, #1
 800baec:	e7d9      	b.n	800baa2 <_printf_common+0x8e>
	...

0800baf0 <_printf_i>:
 800baf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf4:	7e0f      	ldrb	r7, [r1, #24]
 800baf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baf8:	2f78      	cmp	r7, #120	; 0x78
 800bafa:	4691      	mov	r9, r2
 800bafc:	4680      	mov	r8, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	469a      	mov	sl, r3
 800bb02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb06:	d807      	bhi.n	800bb18 <_printf_i+0x28>
 800bb08:	2f62      	cmp	r7, #98	; 0x62
 800bb0a:	d80a      	bhi.n	800bb22 <_printf_i+0x32>
 800bb0c:	2f00      	cmp	r7, #0
 800bb0e:	f000 80d8 	beq.w	800bcc2 <_printf_i+0x1d2>
 800bb12:	2f58      	cmp	r7, #88	; 0x58
 800bb14:	f000 80a3 	beq.w	800bc5e <_printf_i+0x16e>
 800bb18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb20:	e03a      	b.n	800bb98 <_printf_i+0xa8>
 800bb22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb26:	2b15      	cmp	r3, #21
 800bb28:	d8f6      	bhi.n	800bb18 <_printf_i+0x28>
 800bb2a:	a101      	add	r1, pc, #4	; (adr r1, 800bb30 <_printf_i+0x40>)
 800bb2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb30:	0800bb89 	.word	0x0800bb89
 800bb34:	0800bb9d 	.word	0x0800bb9d
 800bb38:	0800bb19 	.word	0x0800bb19
 800bb3c:	0800bb19 	.word	0x0800bb19
 800bb40:	0800bb19 	.word	0x0800bb19
 800bb44:	0800bb19 	.word	0x0800bb19
 800bb48:	0800bb9d 	.word	0x0800bb9d
 800bb4c:	0800bb19 	.word	0x0800bb19
 800bb50:	0800bb19 	.word	0x0800bb19
 800bb54:	0800bb19 	.word	0x0800bb19
 800bb58:	0800bb19 	.word	0x0800bb19
 800bb5c:	0800bca9 	.word	0x0800bca9
 800bb60:	0800bbcd 	.word	0x0800bbcd
 800bb64:	0800bc8b 	.word	0x0800bc8b
 800bb68:	0800bb19 	.word	0x0800bb19
 800bb6c:	0800bb19 	.word	0x0800bb19
 800bb70:	0800bccb 	.word	0x0800bccb
 800bb74:	0800bb19 	.word	0x0800bb19
 800bb78:	0800bbcd 	.word	0x0800bbcd
 800bb7c:	0800bb19 	.word	0x0800bb19
 800bb80:	0800bb19 	.word	0x0800bb19
 800bb84:	0800bc93 	.word	0x0800bc93
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	1d1a      	adds	r2, r3, #4
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	602a      	str	r2, [r5, #0]
 800bb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e0a3      	b.n	800bce4 <_printf_i+0x1f4>
 800bb9c:	6820      	ldr	r0, [r4, #0]
 800bb9e:	6829      	ldr	r1, [r5, #0]
 800bba0:	0606      	lsls	r6, r0, #24
 800bba2:	f101 0304 	add.w	r3, r1, #4
 800bba6:	d50a      	bpl.n	800bbbe <_printf_i+0xce>
 800bba8:	680e      	ldr	r6, [r1, #0]
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	2e00      	cmp	r6, #0
 800bbae:	da03      	bge.n	800bbb8 <_printf_i+0xc8>
 800bbb0:	232d      	movs	r3, #45	; 0x2d
 800bbb2:	4276      	negs	r6, r6
 800bbb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb8:	485e      	ldr	r0, [pc, #376]	; (800bd34 <_printf_i+0x244>)
 800bbba:	230a      	movs	r3, #10
 800bbbc:	e019      	b.n	800bbf2 <_printf_i+0x102>
 800bbbe:	680e      	ldr	r6, [r1, #0]
 800bbc0:	602b      	str	r3, [r5, #0]
 800bbc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbc6:	bf18      	it	ne
 800bbc8:	b236      	sxthne	r6, r6
 800bbca:	e7ef      	b.n	800bbac <_printf_i+0xbc>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	6820      	ldr	r0, [r4, #0]
 800bbd0:	1d19      	adds	r1, r3, #4
 800bbd2:	6029      	str	r1, [r5, #0]
 800bbd4:	0601      	lsls	r1, r0, #24
 800bbd6:	d501      	bpl.n	800bbdc <_printf_i+0xec>
 800bbd8:	681e      	ldr	r6, [r3, #0]
 800bbda:	e002      	b.n	800bbe2 <_printf_i+0xf2>
 800bbdc:	0646      	lsls	r6, r0, #25
 800bbde:	d5fb      	bpl.n	800bbd8 <_printf_i+0xe8>
 800bbe0:	881e      	ldrh	r6, [r3, #0]
 800bbe2:	4854      	ldr	r0, [pc, #336]	; (800bd34 <_printf_i+0x244>)
 800bbe4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbe6:	bf0c      	ite	eq
 800bbe8:	2308      	moveq	r3, #8
 800bbea:	230a      	movne	r3, #10
 800bbec:	2100      	movs	r1, #0
 800bbee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbf2:	6865      	ldr	r5, [r4, #4]
 800bbf4:	60a5      	str	r5, [r4, #8]
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	bfa2      	ittt	ge
 800bbfa:	6821      	ldrge	r1, [r4, #0]
 800bbfc:	f021 0104 	bicge.w	r1, r1, #4
 800bc00:	6021      	strge	r1, [r4, #0]
 800bc02:	b90e      	cbnz	r6, 800bc08 <_printf_i+0x118>
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	d04d      	beq.n	800bca4 <_printf_i+0x1b4>
 800bc08:	4615      	mov	r5, r2
 800bc0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc0e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc12:	5dc7      	ldrb	r7, [r0, r7]
 800bc14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc18:	4637      	mov	r7, r6
 800bc1a:	42bb      	cmp	r3, r7
 800bc1c:	460e      	mov	r6, r1
 800bc1e:	d9f4      	bls.n	800bc0a <_printf_i+0x11a>
 800bc20:	2b08      	cmp	r3, #8
 800bc22:	d10b      	bne.n	800bc3c <_printf_i+0x14c>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	07de      	lsls	r6, r3, #31
 800bc28:	d508      	bpl.n	800bc3c <_printf_i+0x14c>
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	6861      	ldr	r1, [r4, #4]
 800bc2e:	4299      	cmp	r1, r3
 800bc30:	bfde      	ittt	le
 800bc32:	2330      	movle	r3, #48	; 0x30
 800bc34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc3c:	1b52      	subs	r2, r2, r5
 800bc3e:	6122      	str	r2, [r4, #16]
 800bc40:	f8cd a000 	str.w	sl, [sp]
 800bc44:	464b      	mov	r3, r9
 800bc46:	aa03      	add	r2, sp, #12
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	f7ff fee2 	bl	800ba14 <_printf_common>
 800bc50:	3001      	adds	r0, #1
 800bc52:	d14c      	bne.n	800bcee <_printf_i+0x1fe>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	b004      	add	sp, #16
 800bc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5e:	4835      	ldr	r0, [pc, #212]	; (800bd34 <_printf_i+0x244>)
 800bc60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc64:	6829      	ldr	r1, [r5, #0]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc6c:	6029      	str	r1, [r5, #0]
 800bc6e:	061d      	lsls	r5, r3, #24
 800bc70:	d514      	bpl.n	800bc9c <_printf_i+0x1ac>
 800bc72:	07df      	lsls	r7, r3, #31
 800bc74:	bf44      	itt	mi
 800bc76:	f043 0320 	orrmi.w	r3, r3, #32
 800bc7a:	6023      	strmi	r3, [r4, #0]
 800bc7c:	b91e      	cbnz	r6, 800bc86 <_printf_i+0x196>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	f023 0320 	bic.w	r3, r3, #32
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	2310      	movs	r3, #16
 800bc88:	e7b0      	b.n	800bbec <_printf_i+0xfc>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	f043 0320 	orr.w	r3, r3, #32
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	2378      	movs	r3, #120	; 0x78
 800bc94:	4828      	ldr	r0, [pc, #160]	; (800bd38 <_printf_i+0x248>)
 800bc96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc9a:	e7e3      	b.n	800bc64 <_printf_i+0x174>
 800bc9c:	0659      	lsls	r1, r3, #25
 800bc9e:	bf48      	it	mi
 800bca0:	b2b6      	uxthmi	r6, r6
 800bca2:	e7e6      	b.n	800bc72 <_printf_i+0x182>
 800bca4:	4615      	mov	r5, r2
 800bca6:	e7bb      	b.n	800bc20 <_printf_i+0x130>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	6826      	ldr	r6, [r4, #0]
 800bcac:	6961      	ldr	r1, [r4, #20]
 800bcae:	1d18      	adds	r0, r3, #4
 800bcb0:	6028      	str	r0, [r5, #0]
 800bcb2:	0635      	lsls	r5, r6, #24
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	d501      	bpl.n	800bcbc <_printf_i+0x1cc>
 800bcb8:	6019      	str	r1, [r3, #0]
 800bcba:	e002      	b.n	800bcc2 <_printf_i+0x1d2>
 800bcbc:	0670      	lsls	r0, r6, #25
 800bcbe:	d5fb      	bpl.n	800bcb8 <_printf_i+0x1c8>
 800bcc0:	8019      	strh	r1, [r3, #0]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	4615      	mov	r5, r2
 800bcc8:	e7ba      	b.n	800bc40 <_printf_i+0x150>
 800bcca:	682b      	ldr	r3, [r5, #0]
 800bccc:	1d1a      	adds	r2, r3, #4
 800bcce:	602a      	str	r2, [r5, #0]
 800bcd0:	681d      	ldr	r5, [r3, #0]
 800bcd2:	6862      	ldr	r2, [r4, #4]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f7f4 fa82 	bl	80001e0 <memchr>
 800bcdc:	b108      	cbz	r0, 800bce2 <_printf_i+0x1f2>
 800bcde:	1b40      	subs	r0, r0, r5
 800bce0:	6060      	str	r0, [r4, #4]
 800bce2:	6863      	ldr	r3, [r4, #4]
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	2300      	movs	r3, #0
 800bce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcec:	e7a8      	b.n	800bc40 <_printf_i+0x150>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	47d0      	blx	sl
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d0ab      	beq.n	800bc54 <_printf_i+0x164>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	079b      	lsls	r3, r3, #30
 800bd00:	d413      	bmi.n	800bd2a <_printf_i+0x23a>
 800bd02:	68e0      	ldr	r0, [r4, #12]
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	4298      	cmp	r0, r3
 800bd08:	bfb8      	it	lt
 800bd0a:	4618      	movlt	r0, r3
 800bd0c:	e7a4      	b.n	800bc58 <_printf_i+0x168>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	4632      	mov	r2, r6
 800bd12:	4649      	mov	r1, r9
 800bd14:	4640      	mov	r0, r8
 800bd16:	47d0      	blx	sl
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d09b      	beq.n	800bc54 <_printf_i+0x164>
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	9903      	ldr	r1, [sp, #12]
 800bd22:	1a5b      	subs	r3, r3, r1
 800bd24:	42ab      	cmp	r3, r5
 800bd26:	dcf2      	bgt.n	800bd0e <_printf_i+0x21e>
 800bd28:	e7eb      	b.n	800bd02 <_printf_i+0x212>
 800bd2a:	2500      	movs	r5, #0
 800bd2c:	f104 0619 	add.w	r6, r4, #25
 800bd30:	e7f5      	b.n	800bd1e <_printf_i+0x22e>
 800bd32:	bf00      	nop
 800bd34:	0800cced 	.word	0x0800cced
 800bd38:	0800ccfe 	.word	0x0800ccfe
 800bd3c:	00000000 	.word	0x00000000

0800bd40 <nan>:
 800bd40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd48 <nan+0x8>
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	7ff80000 	.word	0x7ff80000

0800bd50 <_sbrk_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_sbrk_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f5 ff02 	bl	8001b64 <_sbrk>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_sbrk_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_sbrk_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	2000206c 	.word	0x2000206c

0800bd70 <strncmp>:
 800bd70:	b510      	push	{r4, lr}
 800bd72:	b17a      	cbz	r2, 800bd94 <strncmp+0x24>
 800bd74:	4603      	mov	r3, r0
 800bd76:	3901      	subs	r1, #1
 800bd78:	1884      	adds	r4, r0, r2
 800bd7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd82:	4290      	cmp	r0, r2
 800bd84:	d101      	bne.n	800bd8a <strncmp+0x1a>
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	d101      	bne.n	800bd8e <strncmp+0x1e>
 800bd8a:	1a80      	subs	r0, r0, r2
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1f3      	bne.n	800bd7a <strncmp+0xa>
 800bd92:	e7fa      	b.n	800bd8a <strncmp+0x1a>
 800bd94:	4610      	mov	r0, r2
 800bd96:	e7f9      	b.n	800bd8c <strncmp+0x1c>

0800bd98 <__ascii_wctomb>:
 800bd98:	b149      	cbz	r1, 800bdae <__ascii_wctomb+0x16>
 800bd9a:	2aff      	cmp	r2, #255	; 0xff
 800bd9c:	bf85      	ittet	hi
 800bd9e:	238a      	movhi	r3, #138	; 0x8a
 800bda0:	6003      	strhi	r3, [r0, #0]
 800bda2:	700a      	strbls	r2, [r1, #0]
 800bda4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bda8:	bf98      	it	ls
 800bdaa:	2001      	movls	r0, #1
 800bdac:	4770      	bx	lr
 800bdae:	4608      	mov	r0, r1
 800bdb0:	4770      	bx	lr
	...

0800bdb4 <__assert_func>:
 800bdb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdb6:	4614      	mov	r4, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <__assert_func+0x2c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	68d8      	ldr	r0, [r3, #12]
 800bdc2:	b14c      	cbz	r4, 800bdd8 <__assert_func+0x24>
 800bdc4:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <__assert_func+0x30>)
 800bdc6:	9100      	str	r1, [sp, #0]
 800bdc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdcc:	4906      	ldr	r1, [pc, #24]	; (800bde8 <__assert_func+0x34>)
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f000 f80e 	bl	800bdf0 <fiprintf>
 800bdd4:	f000 fae0 	bl	800c398 <abort>
 800bdd8:	4b04      	ldr	r3, [pc, #16]	; (800bdec <__assert_func+0x38>)
 800bdda:	461c      	mov	r4, r3
 800bddc:	e7f3      	b.n	800bdc6 <__assert_func+0x12>
 800bdde:	bf00      	nop
 800bde0:	2000011c 	.word	0x2000011c
 800bde4:	0800cd0f 	.word	0x0800cd0f
 800bde8:	0800cd1c 	.word	0x0800cd1c
 800bdec:	0800cd4a 	.word	0x0800cd4a

0800bdf0 <fiprintf>:
 800bdf0:	b40e      	push	{r1, r2, r3}
 800bdf2:	b503      	push	{r0, r1, lr}
 800bdf4:	4601      	mov	r1, r0
 800bdf6:	ab03      	add	r3, sp, #12
 800bdf8:	4805      	ldr	r0, [pc, #20]	; (800be10 <fiprintf+0x20>)
 800bdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdfe:	6800      	ldr	r0, [r0, #0]
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	f000 f8d9 	bl	800bfb8 <_vfiprintf_r>
 800be06:	b002      	add	sp, #8
 800be08:	f85d eb04 	ldr.w	lr, [sp], #4
 800be0c:	b003      	add	sp, #12
 800be0e:	4770      	bx	lr
 800be10:	2000011c 	.word	0x2000011c

0800be14 <malloc>:
 800be14:	4b02      	ldr	r3, [pc, #8]	; (800be20 <malloc+0xc>)
 800be16:	4601      	mov	r1, r0
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	f7ff bc2b 	b.w	800b674 <_malloc_r>
 800be1e:	bf00      	nop
 800be20:	2000011c 	.word	0x2000011c

0800be24 <memmove>:
 800be24:	4288      	cmp	r0, r1
 800be26:	b510      	push	{r4, lr}
 800be28:	eb01 0402 	add.w	r4, r1, r2
 800be2c:	d902      	bls.n	800be34 <memmove+0x10>
 800be2e:	4284      	cmp	r4, r0
 800be30:	4623      	mov	r3, r4
 800be32:	d807      	bhi.n	800be44 <memmove+0x20>
 800be34:	1e43      	subs	r3, r0, #1
 800be36:	42a1      	cmp	r1, r4
 800be38:	d008      	beq.n	800be4c <memmove+0x28>
 800be3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be42:	e7f8      	b.n	800be36 <memmove+0x12>
 800be44:	4402      	add	r2, r0
 800be46:	4601      	mov	r1, r0
 800be48:	428a      	cmp	r2, r1
 800be4a:	d100      	bne.n	800be4e <memmove+0x2a>
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be56:	e7f7      	b.n	800be48 <memmove+0x24>

0800be58 <__malloc_lock>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__malloc_lock+0x8>)
 800be5a:	f000 bc5d 	b.w	800c718 <__retarget_lock_acquire_recursive>
 800be5e:	bf00      	nop
 800be60:	20002070 	.word	0x20002070

0800be64 <__malloc_unlock>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__malloc_unlock+0x8>)
 800be66:	f000 bc58 	b.w	800c71a <__retarget_lock_release_recursive>
 800be6a:	bf00      	nop
 800be6c:	20002070 	.word	0x20002070

0800be70 <_free_r>:
 800be70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be72:	2900      	cmp	r1, #0
 800be74:	d044      	beq.n	800bf00 <_free_r+0x90>
 800be76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7a:	9001      	str	r0, [sp, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f1a1 0404 	sub.w	r4, r1, #4
 800be82:	bfb8      	it	lt
 800be84:	18e4      	addlt	r4, r4, r3
 800be86:	f7ff ffe7 	bl	800be58 <__malloc_lock>
 800be8a:	4a1e      	ldr	r2, [pc, #120]	; (800bf04 <_free_r+0x94>)
 800be8c:	9801      	ldr	r0, [sp, #4]
 800be8e:	6813      	ldr	r3, [r2, #0]
 800be90:	b933      	cbnz	r3, 800bea0 <_free_r+0x30>
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	6014      	str	r4, [r2, #0]
 800be96:	b003      	add	sp, #12
 800be98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be9c:	f7ff bfe2 	b.w	800be64 <__malloc_unlock>
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d908      	bls.n	800beb6 <_free_r+0x46>
 800bea4:	6825      	ldr	r5, [r4, #0]
 800bea6:	1961      	adds	r1, r4, r5
 800bea8:	428b      	cmp	r3, r1
 800beaa:	bf01      	itttt	eq
 800beac:	6819      	ldreq	r1, [r3, #0]
 800beae:	685b      	ldreq	r3, [r3, #4]
 800beb0:	1949      	addeq	r1, r1, r5
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	e7ed      	b.n	800be92 <_free_r+0x22>
 800beb6:	461a      	mov	r2, r3
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	b10b      	cbz	r3, 800bec0 <_free_r+0x50>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d9fa      	bls.n	800beb6 <_free_r+0x46>
 800bec0:	6811      	ldr	r1, [r2, #0]
 800bec2:	1855      	adds	r5, r2, r1
 800bec4:	42a5      	cmp	r5, r4
 800bec6:	d10b      	bne.n	800bee0 <_free_r+0x70>
 800bec8:	6824      	ldr	r4, [r4, #0]
 800beca:	4421      	add	r1, r4
 800becc:	1854      	adds	r4, r2, r1
 800bece:	42a3      	cmp	r3, r4
 800bed0:	6011      	str	r1, [r2, #0]
 800bed2:	d1e0      	bne.n	800be96 <_free_r+0x26>
 800bed4:	681c      	ldr	r4, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	6053      	str	r3, [r2, #4]
 800beda:	4421      	add	r1, r4
 800bedc:	6011      	str	r1, [r2, #0]
 800bede:	e7da      	b.n	800be96 <_free_r+0x26>
 800bee0:	d902      	bls.n	800bee8 <_free_r+0x78>
 800bee2:	230c      	movs	r3, #12
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	e7d6      	b.n	800be96 <_free_r+0x26>
 800bee8:	6825      	ldr	r5, [r4, #0]
 800beea:	1961      	adds	r1, r4, r5
 800beec:	428b      	cmp	r3, r1
 800beee:	bf04      	itt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	6063      	str	r3, [r4, #4]
 800bef6:	bf04      	itt	eq
 800bef8:	1949      	addeq	r1, r1, r5
 800befa:	6021      	streq	r1, [r4, #0]
 800befc:	6054      	str	r4, [r2, #4]
 800befe:	e7ca      	b.n	800be96 <_free_r+0x26>
 800bf00:	b003      	add	sp, #12
 800bf02:	bd30      	pop	{r4, r5, pc}
 800bf04:	20002064 	.word	0x20002064

0800bf08 <_realloc_r>:
 800bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0c:	4680      	mov	r8, r0
 800bf0e:	4614      	mov	r4, r2
 800bf10:	460e      	mov	r6, r1
 800bf12:	b921      	cbnz	r1, 800bf1e <_realloc_r+0x16>
 800bf14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf18:	4611      	mov	r1, r2
 800bf1a:	f7ff bbab 	b.w	800b674 <_malloc_r>
 800bf1e:	b92a      	cbnz	r2, 800bf2c <_realloc_r+0x24>
 800bf20:	f7ff ffa6 	bl	800be70 <_free_r>
 800bf24:	4625      	mov	r5, r4
 800bf26:	4628      	mov	r0, r5
 800bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2c:	f000 fc5c 	bl	800c7e8 <_malloc_usable_size_r>
 800bf30:	4284      	cmp	r4, r0
 800bf32:	4607      	mov	r7, r0
 800bf34:	d802      	bhi.n	800bf3c <_realloc_r+0x34>
 800bf36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf3a:	d812      	bhi.n	800bf62 <_realloc_r+0x5a>
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4640      	mov	r0, r8
 800bf40:	f7ff fb98 	bl	800b674 <_malloc_r>
 800bf44:	4605      	mov	r5, r0
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0ed      	beq.n	800bf26 <_realloc_r+0x1e>
 800bf4a:	42bc      	cmp	r4, r7
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	4631      	mov	r1, r6
 800bf50:	bf28      	it	cs
 800bf52:	463a      	movcs	r2, r7
 800bf54:	f7fe fe88 	bl	800ac68 <memcpy>
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	f7ff ff88 	bl	800be70 <_free_r>
 800bf60:	e7e1      	b.n	800bf26 <_realloc_r+0x1e>
 800bf62:	4635      	mov	r5, r6
 800bf64:	e7df      	b.n	800bf26 <_realloc_r+0x1e>

0800bf66 <__sfputc_r>:
 800bf66:	6893      	ldr	r3, [r2, #8]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	b410      	push	{r4}
 800bf6e:	6093      	str	r3, [r2, #8]
 800bf70:	da08      	bge.n	800bf84 <__sfputc_r+0x1e>
 800bf72:	6994      	ldr	r4, [r2, #24]
 800bf74:	42a3      	cmp	r3, r4
 800bf76:	db01      	blt.n	800bf7c <__sfputc_r+0x16>
 800bf78:	290a      	cmp	r1, #10
 800bf7a:	d103      	bne.n	800bf84 <__sfputc_r+0x1e>
 800bf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf80:	f000 b94a 	b.w	800c218 <__swbuf_r>
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	1c58      	adds	r0, r3, #1
 800bf88:	6010      	str	r0, [r2, #0]
 800bf8a:	7019      	strb	r1, [r3, #0]
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <__sfputs_r>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	4614      	mov	r4, r2
 800bf9c:	18d5      	adds	r5, r2, r3
 800bf9e:	42ac      	cmp	r4, r5
 800bfa0:	d101      	bne.n	800bfa6 <__sfputs_r+0x12>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	e007      	b.n	800bfb6 <__sfputs_r+0x22>
 800bfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfaa:	463a      	mov	r2, r7
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffda 	bl	800bf66 <__sfputc_r>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d1f3      	bne.n	800bf9e <__sfputs_r+0xa>
 800bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfb8 <_vfiprintf_r>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	b09d      	sub	sp, #116	; 0x74
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	4698      	mov	r8, r3
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	b118      	cbz	r0, 800bfd0 <_vfiprintf_r+0x18>
 800bfc8:	6983      	ldr	r3, [r0, #24]
 800bfca:	b90b      	cbnz	r3, 800bfd0 <_vfiprintf_r+0x18>
 800bfcc:	f000 fb06 	bl	800c5dc <__sinit>
 800bfd0:	4b89      	ldr	r3, [pc, #548]	; (800c1f8 <_vfiprintf_r+0x240>)
 800bfd2:	429d      	cmp	r5, r3
 800bfd4:	d11b      	bne.n	800c00e <_vfiprintf_r+0x56>
 800bfd6:	6875      	ldr	r5, [r6, #4]
 800bfd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfda:	07d9      	lsls	r1, r3, #31
 800bfdc:	d405      	bmi.n	800bfea <_vfiprintf_r+0x32>
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	059a      	lsls	r2, r3, #22
 800bfe2:	d402      	bmi.n	800bfea <_vfiprintf_r+0x32>
 800bfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe6:	f000 fb97 	bl	800c718 <__retarget_lock_acquire_recursive>
 800bfea:	89ab      	ldrh	r3, [r5, #12]
 800bfec:	071b      	lsls	r3, r3, #28
 800bfee:	d501      	bpl.n	800bff4 <_vfiprintf_r+0x3c>
 800bff0:	692b      	ldr	r3, [r5, #16]
 800bff2:	b9eb      	cbnz	r3, 800c030 <_vfiprintf_r+0x78>
 800bff4:	4629      	mov	r1, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	f000 f960 	bl	800c2bc <__swsetup_r>
 800bffc:	b1c0      	cbz	r0, 800c030 <_vfiprintf_r+0x78>
 800bffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c000:	07dc      	lsls	r4, r3, #31
 800c002:	d50e      	bpl.n	800c022 <_vfiprintf_r+0x6a>
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	b01d      	add	sp, #116	; 0x74
 800c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00e:	4b7b      	ldr	r3, [pc, #492]	; (800c1fc <_vfiprintf_r+0x244>)
 800c010:	429d      	cmp	r5, r3
 800c012:	d101      	bne.n	800c018 <_vfiprintf_r+0x60>
 800c014:	68b5      	ldr	r5, [r6, #8]
 800c016:	e7df      	b.n	800bfd8 <_vfiprintf_r+0x20>
 800c018:	4b79      	ldr	r3, [pc, #484]	; (800c200 <_vfiprintf_r+0x248>)
 800c01a:	429d      	cmp	r5, r3
 800c01c:	bf08      	it	eq
 800c01e:	68f5      	ldreq	r5, [r6, #12]
 800c020:	e7da      	b.n	800bfd8 <_vfiprintf_r+0x20>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	0598      	lsls	r0, r3, #22
 800c026:	d4ed      	bmi.n	800c004 <_vfiprintf_r+0x4c>
 800c028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c02a:	f000 fb76 	bl	800c71a <__retarget_lock_release_recursive>
 800c02e:	e7e9      	b.n	800c004 <_vfiprintf_r+0x4c>
 800c030:	2300      	movs	r3, #0
 800c032:	9309      	str	r3, [sp, #36]	; 0x24
 800c034:	2320      	movs	r3, #32
 800c036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c03e:	2330      	movs	r3, #48	; 0x30
 800c040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c204 <_vfiprintf_r+0x24c>
 800c044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c048:	f04f 0901 	mov.w	r9, #1
 800c04c:	4623      	mov	r3, r4
 800c04e:	469a      	mov	sl, r3
 800c050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c054:	b10a      	cbz	r2, 800c05a <_vfiprintf_r+0xa2>
 800c056:	2a25      	cmp	r2, #37	; 0x25
 800c058:	d1f9      	bne.n	800c04e <_vfiprintf_r+0x96>
 800c05a:	ebba 0b04 	subs.w	fp, sl, r4
 800c05e:	d00b      	beq.n	800c078 <_vfiprintf_r+0xc0>
 800c060:	465b      	mov	r3, fp
 800c062:	4622      	mov	r2, r4
 800c064:	4629      	mov	r1, r5
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff ff94 	bl	800bf94 <__sfputs_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	f000 80aa 	beq.w	800c1c6 <_vfiprintf_r+0x20e>
 800c072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c074:	445a      	add	r2, fp
 800c076:	9209      	str	r2, [sp, #36]	; 0x24
 800c078:	f89a 3000 	ldrb.w	r3, [sl]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80a2 	beq.w	800c1c6 <_vfiprintf_r+0x20e>
 800c082:	2300      	movs	r3, #0
 800c084:	f04f 32ff 	mov.w	r2, #4294967295
 800c088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c08c:	f10a 0a01 	add.w	sl, sl, #1
 800c090:	9304      	str	r3, [sp, #16]
 800c092:	9307      	str	r3, [sp, #28]
 800c094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c098:	931a      	str	r3, [sp, #104]	; 0x68
 800c09a:	4654      	mov	r4, sl
 800c09c:	2205      	movs	r2, #5
 800c09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a2:	4858      	ldr	r0, [pc, #352]	; (800c204 <_vfiprintf_r+0x24c>)
 800c0a4:	f7f4 f89c 	bl	80001e0 <memchr>
 800c0a8:	9a04      	ldr	r2, [sp, #16]
 800c0aa:	b9d8      	cbnz	r0, 800c0e4 <_vfiprintf_r+0x12c>
 800c0ac:	06d1      	lsls	r1, r2, #27
 800c0ae:	bf44      	itt	mi
 800c0b0:	2320      	movmi	r3, #32
 800c0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0b6:	0713      	lsls	r3, r2, #28
 800c0b8:	bf44      	itt	mi
 800c0ba:	232b      	movmi	r3, #43	; 0x2b
 800c0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c6:	d015      	beq.n	800c0f4 <_vfiprintf_r+0x13c>
 800c0c8:	9a07      	ldr	r2, [sp, #28]
 800c0ca:	4654      	mov	r4, sl
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	f04f 0c0a 	mov.w	ip, #10
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0d8:	3b30      	subs	r3, #48	; 0x30
 800c0da:	2b09      	cmp	r3, #9
 800c0dc:	d94e      	bls.n	800c17c <_vfiprintf_r+0x1c4>
 800c0de:	b1b0      	cbz	r0, 800c10e <_vfiprintf_r+0x156>
 800c0e0:	9207      	str	r2, [sp, #28]
 800c0e2:	e014      	b.n	800c10e <_vfiprintf_r+0x156>
 800c0e4:	eba0 0308 	sub.w	r3, r0, r8
 800c0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	46a2      	mov	sl, r4
 800c0f2:	e7d2      	b.n	800c09a <_vfiprintf_r+0xe2>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	1d19      	adds	r1, r3, #4
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	9103      	str	r1, [sp, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfbb      	ittet	lt
 800c100:	425b      	neglt	r3, r3
 800c102:	f042 0202 	orrlt.w	r2, r2, #2
 800c106:	9307      	strge	r3, [sp, #28]
 800c108:	9307      	strlt	r3, [sp, #28]
 800c10a:	bfb8      	it	lt
 800c10c:	9204      	strlt	r2, [sp, #16]
 800c10e:	7823      	ldrb	r3, [r4, #0]
 800c110:	2b2e      	cmp	r3, #46	; 0x2e
 800c112:	d10c      	bne.n	800c12e <_vfiprintf_r+0x176>
 800c114:	7863      	ldrb	r3, [r4, #1]
 800c116:	2b2a      	cmp	r3, #42	; 0x2a
 800c118:	d135      	bne.n	800c186 <_vfiprintf_r+0x1ce>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	1d1a      	adds	r2, r3, #4
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	9203      	str	r2, [sp, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfb8      	it	lt
 800c126:	f04f 33ff 	movlt.w	r3, #4294967295
 800c12a:	3402      	adds	r4, #2
 800c12c:	9305      	str	r3, [sp, #20]
 800c12e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c214 <_vfiprintf_r+0x25c>
 800c132:	7821      	ldrb	r1, [r4, #0]
 800c134:	2203      	movs	r2, #3
 800c136:	4650      	mov	r0, sl
 800c138:	f7f4 f852 	bl	80001e0 <memchr>
 800c13c:	b140      	cbz	r0, 800c150 <_vfiprintf_r+0x198>
 800c13e:	2340      	movs	r3, #64	; 0x40
 800c140:	eba0 000a 	sub.w	r0, r0, sl
 800c144:	fa03 f000 	lsl.w	r0, r3, r0
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	4303      	orrs	r3, r0
 800c14c:	3401      	adds	r4, #1
 800c14e:	9304      	str	r3, [sp, #16]
 800c150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c154:	482c      	ldr	r0, [pc, #176]	; (800c208 <_vfiprintf_r+0x250>)
 800c156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c15a:	2206      	movs	r2, #6
 800c15c:	f7f4 f840 	bl	80001e0 <memchr>
 800c160:	2800      	cmp	r0, #0
 800c162:	d03f      	beq.n	800c1e4 <_vfiprintf_r+0x22c>
 800c164:	4b29      	ldr	r3, [pc, #164]	; (800c20c <_vfiprintf_r+0x254>)
 800c166:	bb1b      	cbnz	r3, 800c1b0 <_vfiprintf_r+0x1f8>
 800c168:	9b03      	ldr	r3, [sp, #12]
 800c16a:	3307      	adds	r3, #7
 800c16c:	f023 0307 	bic.w	r3, r3, #7
 800c170:	3308      	adds	r3, #8
 800c172:	9303      	str	r3, [sp, #12]
 800c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c176:	443b      	add	r3, r7
 800c178:	9309      	str	r3, [sp, #36]	; 0x24
 800c17a:	e767      	b.n	800c04c <_vfiprintf_r+0x94>
 800c17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c180:	460c      	mov	r4, r1
 800c182:	2001      	movs	r0, #1
 800c184:	e7a5      	b.n	800c0d2 <_vfiprintf_r+0x11a>
 800c186:	2300      	movs	r3, #0
 800c188:	3401      	adds	r4, #1
 800c18a:	9305      	str	r3, [sp, #20]
 800c18c:	4619      	mov	r1, r3
 800c18e:	f04f 0c0a 	mov.w	ip, #10
 800c192:	4620      	mov	r0, r4
 800c194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c198:	3a30      	subs	r2, #48	; 0x30
 800c19a:	2a09      	cmp	r2, #9
 800c19c:	d903      	bls.n	800c1a6 <_vfiprintf_r+0x1ee>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0c5      	beq.n	800c12e <_vfiprintf_r+0x176>
 800c1a2:	9105      	str	r1, [sp, #20]
 800c1a4:	e7c3      	b.n	800c12e <_vfiprintf_r+0x176>
 800c1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e7f0      	b.n	800c192 <_vfiprintf_r+0x1da>
 800c1b0:	ab03      	add	r3, sp, #12
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	4b16      	ldr	r3, [pc, #88]	; (800c210 <_vfiprintf_r+0x258>)
 800c1b8:	a904      	add	r1, sp, #16
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f3af 8000 	nop.w
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	1c78      	adds	r0, r7, #1
 800c1c4:	d1d6      	bne.n	800c174 <_vfiprintf_r+0x1bc>
 800c1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1c8:	07d9      	lsls	r1, r3, #31
 800c1ca:	d405      	bmi.n	800c1d8 <_vfiprintf_r+0x220>
 800c1cc:	89ab      	ldrh	r3, [r5, #12]
 800c1ce:	059a      	lsls	r2, r3, #22
 800c1d0:	d402      	bmi.n	800c1d8 <_vfiprintf_r+0x220>
 800c1d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1d4:	f000 faa1 	bl	800c71a <__retarget_lock_release_recursive>
 800c1d8:	89ab      	ldrh	r3, [r5, #12]
 800c1da:	065b      	lsls	r3, r3, #25
 800c1dc:	f53f af12 	bmi.w	800c004 <_vfiprintf_r+0x4c>
 800c1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1e2:	e711      	b.n	800c008 <_vfiprintf_r+0x50>
 800c1e4:	ab03      	add	r3, sp, #12
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	4b09      	ldr	r3, [pc, #36]	; (800c210 <_vfiprintf_r+0x258>)
 800c1ec:	a904      	add	r1, sp, #16
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7ff fc7e 	bl	800baf0 <_printf_i>
 800c1f4:	e7e4      	b.n	800c1c0 <_vfiprintf_r+0x208>
 800c1f6:	bf00      	nop
 800c1f8:	0800ce6c 	.word	0x0800ce6c
 800c1fc:	0800ce8c 	.word	0x0800ce8c
 800c200:	0800ce4c 	.word	0x0800ce4c
 800c204:	0800ccdc 	.word	0x0800ccdc
 800c208:	0800cce6 	.word	0x0800cce6
 800c20c:	00000000 	.word	0x00000000
 800c210:	0800bf95 	.word	0x0800bf95
 800c214:	0800cce2 	.word	0x0800cce2

0800c218 <__swbuf_r>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	460e      	mov	r6, r1
 800c21c:	4614      	mov	r4, r2
 800c21e:	4605      	mov	r5, r0
 800c220:	b118      	cbz	r0, 800c22a <__swbuf_r+0x12>
 800c222:	6983      	ldr	r3, [r0, #24]
 800c224:	b90b      	cbnz	r3, 800c22a <__swbuf_r+0x12>
 800c226:	f000 f9d9 	bl	800c5dc <__sinit>
 800c22a:	4b21      	ldr	r3, [pc, #132]	; (800c2b0 <__swbuf_r+0x98>)
 800c22c:	429c      	cmp	r4, r3
 800c22e:	d12b      	bne.n	800c288 <__swbuf_r+0x70>
 800c230:	686c      	ldr	r4, [r5, #4]
 800c232:	69a3      	ldr	r3, [r4, #24]
 800c234:	60a3      	str	r3, [r4, #8]
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	071a      	lsls	r2, r3, #28
 800c23a:	d52f      	bpl.n	800c29c <__swbuf_r+0x84>
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	b36b      	cbz	r3, 800c29c <__swbuf_r+0x84>
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	6820      	ldr	r0, [r4, #0]
 800c244:	1ac0      	subs	r0, r0, r3
 800c246:	6963      	ldr	r3, [r4, #20]
 800c248:	b2f6      	uxtb	r6, r6
 800c24a:	4283      	cmp	r3, r0
 800c24c:	4637      	mov	r7, r6
 800c24e:	dc04      	bgt.n	800c25a <__swbuf_r+0x42>
 800c250:	4621      	mov	r1, r4
 800c252:	4628      	mov	r0, r5
 800c254:	f000 f92e 	bl	800c4b4 <_fflush_r>
 800c258:	bb30      	cbnz	r0, 800c2a8 <__swbuf_r+0x90>
 800c25a:	68a3      	ldr	r3, [r4, #8]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	60a3      	str	r3, [r4, #8]
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	6022      	str	r2, [r4, #0]
 800c266:	701e      	strb	r6, [r3, #0]
 800c268:	6963      	ldr	r3, [r4, #20]
 800c26a:	3001      	adds	r0, #1
 800c26c:	4283      	cmp	r3, r0
 800c26e:	d004      	beq.n	800c27a <__swbuf_r+0x62>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	07db      	lsls	r3, r3, #31
 800c274:	d506      	bpl.n	800c284 <__swbuf_r+0x6c>
 800c276:	2e0a      	cmp	r6, #10
 800c278:	d104      	bne.n	800c284 <__swbuf_r+0x6c>
 800c27a:	4621      	mov	r1, r4
 800c27c:	4628      	mov	r0, r5
 800c27e:	f000 f919 	bl	800c4b4 <_fflush_r>
 800c282:	b988      	cbnz	r0, 800c2a8 <__swbuf_r+0x90>
 800c284:	4638      	mov	r0, r7
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <__swbuf_r+0x9c>)
 800c28a:	429c      	cmp	r4, r3
 800c28c:	d101      	bne.n	800c292 <__swbuf_r+0x7a>
 800c28e:	68ac      	ldr	r4, [r5, #8]
 800c290:	e7cf      	b.n	800c232 <__swbuf_r+0x1a>
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <__swbuf_r+0xa0>)
 800c294:	429c      	cmp	r4, r3
 800c296:	bf08      	it	eq
 800c298:	68ec      	ldreq	r4, [r5, #12]
 800c29a:	e7ca      	b.n	800c232 <__swbuf_r+0x1a>
 800c29c:	4621      	mov	r1, r4
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f000 f80c 	bl	800c2bc <__swsetup_r>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d0cb      	beq.n	800c240 <__swbuf_r+0x28>
 800c2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ac:	e7ea      	b.n	800c284 <__swbuf_r+0x6c>
 800c2ae:	bf00      	nop
 800c2b0:	0800ce6c 	.word	0x0800ce6c
 800c2b4:	0800ce8c 	.word	0x0800ce8c
 800c2b8:	0800ce4c 	.word	0x0800ce4c

0800c2bc <__swsetup_r>:
 800c2bc:	4b32      	ldr	r3, [pc, #200]	; (800c388 <__swsetup_r+0xcc>)
 800c2be:	b570      	push	{r4, r5, r6, lr}
 800c2c0:	681d      	ldr	r5, [r3, #0]
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	b125      	cbz	r5, 800c2d2 <__swsetup_r+0x16>
 800c2c8:	69ab      	ldr	r3, [r5, #24]
 800c2ca:	b913      	cbnz	r3, 800c2d2 <__swsetup_r+0x16>
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 f985 	bl	800c5dc <__sinit>
 800c2d2:	4b2e      	ldr	r3, [pc, #184]	; (800c38c <__swsetup_r+0xd0>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	d10f      	bne.n	800c2f8 <__swsetup_r+0x3c>
 800c2d8:	686c      	ldr	r4, [r5, #4]
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2e0:	0719      	lsls	r1, r3, #28
 800c2e2:	d42c      	bmi.n	800c33e <__swsetup_r+0x82>
 800c2e4:	06dd      	lsls	r5, r3, #27
 800c2e6:	d411      	bmi.n	800c30c <__swsetup_r+0x50>
 800c2e8:	2309      	movs	r3, #9
 800c2ea:	6033      	str	r3, [r6, #0]
 800c2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f6:	e03e      	b.n	800c376 <__swsetup_r+0xba>
 800c2f8:	4b25      	ldr	r3, [pc, #148]	; (800c390 <__swsetup_r+0xd4>)
 800c2fa:	429c      	cmp	r4, r3
 800c2fc:	d101      	bne.n	800c302 <__swsetup_r+0x46>
 800c2fe:	68ac      	ldr	r4, [r5, #8]
 800c300:	e7eb      	b.n	800c2da <__swsetup_r+0x1e>
 800c302:	4b24      	ldr	r3, [pc, #144]	; (800c394 <__swsetup_r+0xd8>)
 800c304:	429c      	cmp	r4, r3
 800c306:	bf08      	it	eq
 800c308:	68ec      	ldreq	r4, [r5, #12]
 800c30a:	e7e6      	b.n	800c2da <__swsetup_r+0x1e>
 800c30c:	0758      	lsls	r0, r3, #29
 800c30e:	d512      	bpl.n	800c336 <__swsetup_r+0x7a>
 800c310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c312:	b141      	cbz	r1, 800c326 <__swsetup_r+0x6a>
 800c314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c318:	4299      	cmp	r1, r3
 800c31a:	d002      	beq.n	800c322 <__swsetup_r+0x66>
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff fda7 	bl	800be70 <_free_r>
 800c322:	2300      	movs	r3, #0
 800c324:	6363      	str	r3, [r4, #52]	; 0x34
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c32c:	81a3      	strh	r3, [r4, #12]
 800c32e:	2300      	movs	r3, #0
 800c330:	6063      	str	r3, [r4, #4]
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	f043 0308 	orr.w	r3, r3, #8
 800c33c:	81a3      	strh	r3, [r4, #12]
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	b94b      	cbnz	r3, 800c356 <__swsetup_r+0x9a>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c34c:	d003      	beq.n	800c356 <__swsetup_r+0x9a>
 800c34e:	4621      	mov	r1, r4
 800c350:	4630      	mov	r0, r6
 800c352:	f000 fa09 	bl	800c768 <__smakebuf_r>
 800c356:	89a0      	ldrh	r0, [r4, #12]
 800c358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c35c:	f010 0301 	ands.w	r3, r0, #1
 800c360:	d00a      	beq.n	800c378 <__swsetup_r+0xbc>
 800c362:	2300      	movs	r3, #0
 800c364:	60a3      	str	r3, [r4, #8]
 800c366:	6963      	ldr	r3, [r4, #20]
 800c368:	425b      	negs	r3, r3
 800c36a:	61a3      	str	r3, [r4, #24]
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	b943      	cbnz	r3, 800c382 <__swsetup_r+0xc6>
 800c370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c374:	d1ba      	bne.n	800c2ec <__swsetup_r+0x30>
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	0781      	lsls	r1, r0, #30
 800c37a:	bf58      	it	pl
 800c37c:	6963      	ldrpl	r3, [r4, #20]
 800c37e:	60a3      	str	r3, [r4, #8]
 800c380:	e7f4      	b.n	800c36c <__swsetup_r+0xb0>
 800c382:	2000      	movs	r0, #0
 800c384:	e7f7      	b.n	800c376 <__swsetup_r+0xba>
 800c386:	bf00      	nop
 800c388:	2000011c 	.word	0x2000011c
 800c38c:	0800ce6c 	.word	0x0800ce6c
 800c390:	0800ce8c 	.word	0x0800ce8c
 800c394:	0800ce4c 	.word	0x0800ce4c

0800c398 <abort>:
 800c398:	b508      	push	{r3, lr}
 800c39a:	2006      	movs	r0, #6
 800c39c:	f000 fa54 	bl	800c848 <raise>
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f7f5 fb67 	bl	8001a74 <_exit>
	...

0800c3a8 <__sflush_r>:
 800c3a8:	898a      	ldrh	r2, [r1, #12]
 800c3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	0710      	lsls	r0, r2, #28
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	d458      	bmi.n	800c468 <__sflush_r+0xc0>
 800c3b6:	684b      	ldr	r3, [r1, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	dc05      	bgt.n	800c3c8 <__sflush_r+0x20>
 800c3bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	dc02      	bgt.n	800c3c8 <__sflush_r+0x20>
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ca:	2e00      	cmp	r6, #0
 800c3cc:	d0f9      	beq.n	800c3c2 <__sflush_r+0x1a>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3d4:	682f      	ldr	r7, [r5, #0]
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	d032      	beq.n	800c440 <__sflush_r+0x98>
 800c3da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	075a      	lsls	r2, r3, #29
 800c3e0:	d505      	bpl.n	800c3ee <__sflush_r+0x46>
 800c3e2:	6863      	ldr	r3, [r4, #4]
 800c3e4:	1ac0      	subs	r0, r0, r3
 800c3e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3e8:	b10b      	cbz	r3, 800c3ee <__sflush_r+0x46>
 800c3ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3ec:	1ac0      	subs	r0, r0, r3
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3f4:	6a21      	ldr	r1, [r4, #32]
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	47b0      	blx	r6
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	d106      	bne.n	800c40e <__sflush_r+0x66>
 800c400:	6829      	ldr	r1, [r5, #0]
 800c402:	291d      	cmp	r1, #29
 800c404:	d82c      	bhi.n	800c460 <__sflush_r+0xb8>
 800c406:	4a2a      	ldr	r2, [pc, #168]	; (800c4b0 <__sflush_r+0x108>)
 800c408:	40ca      	lsrs	r2, r1
 800c40a:	07d6      	lsls	r6, r2, #31
 800c40c:	d528      	bpl.n	800c460 <__sflush_r+0xb8>
 800c40e:	2200      	movs	r2, #0
 800c410:	6062      	str	r2, [r4, #4]
 800c412:	04d9      	lsls	r1, r3, #19
 800c414:	6922      	ldr	r2, [r4, #16]
 800c416:	6022      	str	r2, [r4, #0]
 800c418:	d504      	bpl.n	800c424 <__sflush_r+0x7c>
 800c41a:	1c42      	adds	r2, r0, #1
 800c41c:	d101      	bne.n	800c422 <__sflush_r+0x7a>
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	b903      	cbnz	r3, 800c424 <__sflush_r+0x7c>
 800c422:	6560      	str	r0, [r4, #84]	; 0x54
 800c424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c426:	602f      	str	r7, [r5, #0]
 800c428:	2900      	cmp	r1, #0
 800c42a:	d0ca      	beq.n	800c3c2 <__sflush_r+0x1a>
 800c42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c430:	4299      	cmp	r1, r3
 800c432:	d002      	beq.n	800c43a <__sflush_r+0x92>
 800c434:	4628      	mov	r0, r5
 800c436:	f7ff fd1b 	bl	800be70 <_free_r>
 800c43a:	2000      	movs	r0, #0
 800c43c:	6360      	str	r0, [r4, #52]	; 0x34
 800c43e:	e7c1      	b.n	800c3c4 <__sflush_r+0x1c>
 800c440:	6a21      	ldr	r1, [r4, #32]
 800c442:	2301      	movs	r3, #1
 800c444:	4628      	mov	r0, r5
 800c446:	47b0      	blx	r6
 800c448:	1c41      	adds	r1, r0, #1
 800c44a:	d1c7      	bne.n	800c3dc <__sflush_r+0x34>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0c4      	beq.n	800c3dc <__sflush_r+0x34>
 800c452:	2b1d      	cmp	r3, #29
 800c454:	d001      	beq.n	800c45a <__sflush_r+0xb2>
 800c456:	2b16      	cmp	r3, #22
 800c458:	d101      	bne.n	800c45e <__sflush_r+0xb6>
 800c45a:	602f      	str	r7, [r5, #0]
 800c45c:	e7b1      	b.n	800c3c2 <__sflush_r+0x1a>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	e7ad      	b.n	800c3c4 <__sflush_r+0x1c>
 800c468:	690f      	ldr	r7, [r1, #16]
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	d0a9      	beq.n	800c3c2 <__sflush_r+0x1a>
 800c46e:	0793      	lsls	r3, r2, #30
 800c470:	680e      	ldr	r6, [r1, #0]
 800c472:	bf08      	it	eq
 800c474:	694b      	ldreq	r3, [r1, #20]
 800c476:	600f      	str	r7, [r1, #0]
 800c478:	bf18      	it	ne
 800c47a:	2300      	movne	r3, #0
 800c47c:	eba6 0807 	sub.w	r8, r6, r7
 800c480:	608b      	str	r3, [r1, #8]
 800c482:	f1b8 0f00 	cmp.w	r8, #0
 800c486:	dd9c      	ble.n	800c3c2 <__sflush_r+0x1a>
 800c488:	6a21      	ldr	r1, [r4, #32]
 800c48a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c48c:	4643      	mov	r3, r8
 800c48e:	463a      	mov	r2, r7
 800c490:	4628      	mov	r0, r5
 800c492:	47b0      	blx	r6
 800c494:	2800      	cmp	r0, #0
 800c496:	dc06      	bgt.n	800c4a6 <__sflush_r+0xfe>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c49e:	81a3      	strh	r3, [r4, #12]
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e78e      	b.n	800c3c4 <__sflush_r+0x1c>
 800c4a6:	4407      	add	r7, r0
 800c4a8:	eba8 0800 	sub.w	r8, r8, r0
 800c4ac:	e7e9      	b.n	800c482 <__sflush_r+0xda>
 800c4ae:	bf00      	nop
 800c4b0:	20400001 	.word	0x20400001

0800c4b4 <_fflush_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	690b      	ldr	r3, [r1, #16]
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	b913      	cbnz	r3, 800c4c4 <_fflush_r+0x10>
 800c4be:	2500      	movs	r5, #0
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	b118      	cbz	r0, 800c4ce <_fflush_r+0x1a>
 800c4c6:	6983      	ldr	r3, [r0, #24]
 800c4c8:	b90b      	cbnz	r3, 800c4ce <_fflush_r+0x1a>
 800c4ca:	f000 f887 	bl	800c5dc <__sinit>
 800c4ce:	4b14      	ldr	r3, [pc, #80]	; (800c520 <_fflush_r+0x6c>)
 800c4d0:	429c      	cmp	r4, r3
 800c4d2:	d11b      	bne.n	800c50c <_fflush_r+0x58>
 800c4d4:	686c      	ldr	r4, [r5, #4]
 800c4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0ef      	beq.n	800c4be <_fflush_r+0xa>
 800c4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4e0:	07d0      	lsls	r0, r2, #31
 800c4e2:	d404      	bmi.n	800c4ee <_fflush_r+0x3a>
 800c4e4:	0599      	lsls	r1, r3, #22
 800c4e6:	d402      	bmi.n	800c4ee <_fflush_r+0x3a>
 800c4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ea:	f000 f915 	bl	800c718 <__retarget_lock_acquire_recursive>
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	f7ff ff59 	bl	800c3a8 <__sflush_r>
 800c4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4f8:	07da      	lsls	r2, r3, #31
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	d4e0      	bmi.n	800c4c0 <_fflush_r+0xc>
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	059b      	lsls	r3, r3, #22
 800c502:	d4dd      	bmi.n	800c4c0 <_fflush_r+0xc>
 800c504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c506:	f000 f908 	bl	800c71a <__retarget_lock_release_recursive>
 800c50a:	e7d9      	b.n	800c4c0 <_fflush_r+0xc>
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <_fflush_r+0x70>)
 800c50e:	429c      	cmp	r4, r3
 800c510:	d101      	bne.n	800c516 <_fflush_r+0x62>
 800c512:	68ac      	ldr	r4, [r5, #8]
 800c514:	e7df      	b.n	800c4d6 <_fflush_r+0x22>
 800c516:	4b04      	ldr	r3, [pc, #16]	; (800c528 <_fflush_r+0x74>)
 800c518:	429c      	cmp	r4, r3
 800c51a:	bf08      	it	eq
 800c51c:	68ec      	ldreq	r4, [r5, #12]
 800c51e:	e7da      	b.n	800c4d6 <_fflush_r+0x22>
 800c520:	0800ce6c 	.word	0x0800ce6c
 800c524:	0800ce8c 	.word	0x0800ce8c
 800c528:	0800ce4c 	.word	0x0800ce4c

0800c52c <std>:
 800c52c:	2300      	movs	r3, #0
 800c52e:	b510      	push	{r4, lr}
 800c530:	4604      	mov	r4, r0
 800c532:	e9c0 3300 	strd	r3, r3, [r0]
 800c536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c53a:	6083      	str	r3, [r0, #8]
 800c53c:	8181      	strh	r1, [r0, #12]
 800c53e:	6643      	str	r3, [r0, #100]	; 0x64
 800c540:	81c2      	strh	r2, [r0, #14]
 800c542:	6183      	str	r3, [r0, #24]
 800c544:	4619      	mov	r1, r3
 800c546:	2208      	movs	r2, #8
 800c548:	305c      	adds	r0, #92	; 0x5c
 800c54a:	f7fd f99f 	bl	800988c <memset>
 800c54e:	4b05      	ldr	r3, [pc, #20]	; (800c564 <std+0x38>)
 800c550:	6263      	str	r3, [r4, #36]	; 0x24
 800c552:	4b05      	ldr	r3, [pc, #20]	; (800c568 <std+0x3c>)
 800c554:	62a3      	str	r3, [r4, #40]	; 0x28
 800c556:	4b05      	ldr	r3, [pc, #20]	; (800c56c <std+0x40>)
 800c558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c55a:	4b05      	ldr	r3, [pc, #20]	; (800c570 <std+0x44>)
 800c55c:	6224      	str	r4, [r4, #32]
 800c55e:	6323      	str	r3, [r4, #48]	; 0x30
 800c560:	bd10      	pop	{r4, pc}
 800c562:	bf00      	nop
 800c564:	0800c881 	.word	0x0800c881
 800c568:	0800c8a3 	.word	0x0800c8a3
 800c56c:	0800c8db 	.word	0x0800c8db
 800c570:	0800c8ff 	.word	0x0800c8ff

0800c574 <_cleanup_r>:
 800c574:	4901      	ldr	r1, [pc, #4]	; (800c57c <_cleanup_r+0x8>)
 800c576:	f000 b8af 	b.w	800c6d8 <_fwalk_reent>
 800c57a:	bf00      	nop
 800c57c:	0800c4b5 	.word	0x0800c4b5

0800c580 <__sfmoreglue>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	2268      	movs	r2, #104	; 0x68
 800c584:	1e4d      	subs	r5, r1, #1
 800c586:	4355      	muls	r5, r2
 800c588:	460e      	mov	r6, r1
 800c58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c58e:	f7ff f871 	bl	800b674 <_malloc_r>
 800c592:	4604      	mov	r4, r0
 800c594:	b140      	cbz	r0, 800c5a8 <__sfmoreglue+0x28>
 800c596:	2100      	movs	r1, #0
 800c598:	e9c0 1600 	strd	r1, r6, [r0]
 800c59c:	300c      	adds	r0, #12
 800c59e:	60a0      	str	r0, [r4, #8]
 800c5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5a4:	f7fd f972 	bl	800988c <memset>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}

0800c5ac <__sfp_lock_acquire>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__sfp_lock_acquire+0x8>)
 800c5ae:	f000 b8b3 	b.w	800c718 <__retarget_lock_acquire_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20002071 	.word	0x20002071

0800c5b8 <__sfp_lock_release>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	; (800c5c0 <__sfp_lock_release+0x8>)
 800c5ba:	f000 b8ae 	b.w	800c71a <__retarget_lock_release_recursive>
 800c5be:	bf00      	nop
 800c5c0:	20002071 	.word	0x20002071

0800c5c4 <__sinit_lock_acquire>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__sinit_lock_acquire+0x8>)
 800c5c6:	f000 b8a7 	b.w	800c718 <__retarget_lock_acquire_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20002072 	.word	0x20002072

0800c5d0 <__sinit_lock_release>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	; (800c5d8 <__sinit_lock_release+0x8>)
 800c5d2:	f000 b8a2 	b.w	800c71a <__retarget_lock_release_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	20002072 	.word	0x20002072

0800c5dc <__sinit>:
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	4604      	mov	r4, r0
 800c5e0:	f7ff fff0 	bl	800c5c4 <__sinit_lock_acquire>
 800c5e4:	69a3      	ldr	r3, [r4, #24]
 800c5e6:	b11b      	cbz	r3, 800c5f0 <__sinit+0x14>
 800c5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ec:	f7ff bff0 	b.w	800c5d0 <__sinit_lock_release>
 800c5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800c5f6:	4b13      	ldr	r3, [pc, #76]	; (800c644 <__sinit+0x68>)
 800c5f8:	4a13      	ldr	r2, [pc, #76]	; (800c648 <__sinit+0x6c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	bf04      	itt	eq
 800c602:	2301      	moveq	r3, #1
 800c604:	61a3      	streq	r3, [r4, #24]
 800c606:	4620      	mov	r0, r4
 800c608:	f000 f820 	bl	800c64c <__sfp>
 800c60c:	6060      	str	r0, [r4, #4]
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 f81c 	bl	800c64c <__sfp>
 800c614:	60a0      	str	r0, [r4, #8]
 800c616:	4620      	mov	r0, r4
 800c618:	f000 f818 	bl	800c64c <__sfp>
 800c61c:	2200      	movs	r2, #0
 800c61e:	60e0      	str	r0, [r4, #12]
 800c620:	2104      	movs	r1, #4
 800c622:	6860      	ldr	r0, [r4, #4]
 800c624:	f7ff ff82 	bl	800c52c <std>
 800c628:	68a0      	ldr	r0, [r4, #8]
 800c62a:	2201      	movs	r2, #1
 800c62c:	2109      	movs	r1, #9
 800c62e:	f7ff ff7d 	bl	800c52c <std>
 800c632:	68e0      	ldr	r0, [r4, #12]
 800c634:	2202      	movs	r2, #2
 800c636:	2112      	movs	r1, #18
 800c638:	f7ff ff78 	bl	800c52c <std>
 800c63c:	2301      	movs	r3, #1
 800c63e:	61a3      	str	r3, [r4, #24]
 800c640:	e7d2      	b.n	800c5e8 <__sinit+0xc>
 800c642:	bf00      	nop
 800c644:	0800ca7c 	.word	0x0800ca7c
 800c648:	0800c575 	.word	0x0800c575

0800c64c <__sfp>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	4607      	mov	r7, r0
 800c650:	f7ff ffac 	bl	800c5ac <__sfp_lock_acquire>
 800c654:	4b1e      	ldr	r3, [pc, #120]	; (800c6d0 <__sfp+0x84>)
 800c656:	681e      	ldr	r6, [r3, #0]
 800c658:	69b3      	ldr	r3, [r6, #24]
 800c65a:	b913      	cbnz	r3, 800c662 <__sfp+0x16>
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff ffbd 	bl	800c5dc <__sinit>
 800c662:	3648      	adds	r6, #72	; 0x48
 800c664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c668:	3b01      	subs	r3, #1
 800c66a:	d503      	bpl.n	800c674 <__sfp+0x28>
 800c66c:	6833      	ldr	r3, [r6, #0]
 800c66e:	b30b      	cbz	r3, 800c6b4 <__sfp+0x68>
 800c670:	6836      	ldr	r6, [r6, #0]
 800c672:	e7f7      	b.n	800c664 <__sfp+0x18>
 800c674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c678:	b9d5      	cbnz	r5, 800c6b0 <__sfp+0x64>
 800c67a:	4b16      	ldr	r3, [pc, #88]	; (800c6d4 <__sfp+0x88>)
 800c67c:	60e3      	str	r3, [r4, #12]
 800c67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c682:	6665      	str	r5, [r4, #100]	; 0x64
 800c684:	f000 f847 	bl	800c716 <__retarget_lock_init_recursive>
 800c688:	f7ff ff96 	bl	800c5b8 <__sfp_lock_release>
 800c68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c694:	6025      	str	r5, [r4, #0]
 800c696:	61a5      	str	r5, [r4, #24]
 800c698:	2208      	movs	r2, #8
 800c69a:	4629      	mov	r1, r5
 800c69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6a0:	f7fd f8f4 	bl	800988c <memset>
 800c6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b0:	3468      	adds	r4, #104	; 0x68
 800c6b2:	e7d9      	b.n	800c668 <__sfp+0x1c>
 800c6b4:	2104      	movs	r1, #4
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f7ff ff62 	bl	800c580 <__sfmoreglue>
 800c6bc:	4604      	mov	r4, r0
 800c6be:	6030      	str	r0, [r6, #0]
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d1d5      	bne.n	800c670 <__sfp+0x24>
 800c6c4:	f7ff ff78 	bl	800c5b8 <__sfp_lock_release>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	e7ee      	b.n	800c6ac <__sfp+0x60>
 800c6ce:	bf00      	nop
 800c6d0:	0800ca7c 	.word	0x0800ca7c
 800c6d4:	ffff0001 	.word	0xffff0001

0800c6d8 <_fwalk_reent>:
 800c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	4606      	mov	r6, r0
 800c6de:	4688      	mov	r8, r1
 800c6e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6e4:	2700      	movs	r7, #0
 800c6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ee:	d505      	bpl.n	800c6fc <_fwalk_reent+0x24>
 800c6f0:	6824      	ldr	r4, [r4, #0]
 800c6f2:	2c00      	cmp	r4, #0
 800c6f4:	d1f7      	bne.n	800c6e6 <_fwalk_reent+0xe>
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fc:	89ab      	ldrh	r3, [r5, #12]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d907      	bls.n	800c712 <_fwalk_reent+0x3a>
 800c702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c706:	3301      	adds	r3, #1
 800c708:	d003      	beq.n	800c712 <_fwalk_reent+0x3a>
 800c70a:	4629      	mov	r1, r5
 800c70c:	4630      	mov	r0, r6
 800c70e:	47c0      	blx	r8
 800c710:	4307      	orrs	r7, r0
 800c712:	3568      	adds	r5, #104	; 0x68
 800c714:	e7e9      	b.n	800c6ea <_fwalk_reent+0x12>

0800c716 <__retarget_lock_init_recursive>:
 800c716:	4770      	bx	lr

0800c718 <__retarget_lock_acquire_recursive>:
 800c718:	4770      	bx	lr

0800c71a <__retarget_lock_release_recursive>:
 800c71a:	4770      	bx	lr

0800c71c <__swhatbuf_r>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	460e      	mov	r6, r1
 800c720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c724:	2900      	cmp	r1, #0
 800c726:	b096      	sub	sp, #88	; 0x58
 800c728:	4614      	mov	r4, r2
 800c72a:	461d      	mov	r5, r3
 800c72c:	da08      	bge.n	800c740 <__swhatbuf_r+0x24>
 800c72e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	602a      	str	r2, [r5, #0]
 800c736:	061a      	lsls	r2, r3, #24
 800c738:	d410      	bmi.n	800c75c <__swhatbuf_r+0x40>
 800c73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c73e:	e00e      	b.n	800c75e <__swhatbuf_r+0x42>
 800c740:	466a      	mov	r2, sp
 800c742:	f000 f903 	bl	800c94c <_fstat_r>
 800c746:	2800      	cmp	r0, #0
 800c748:	dbf1      	blt.n	800c72e <__swhatbuf_r+0x12>
 800c74a:	9a01      	ldr	r2, [sp, #4]
 800c74c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c754:	425a      	negs	r2, r3
 800c756:	415a      	adcs	r2, r3
 800c758:	602a      	str	r2, [r5, #0]
 800c75a:	e7ee      	b.n	800c73a <__swhatbuf_r+0x1e>
 800c75c:	2340      	movs	r3, #64	; 0x40
 800c75e:	2000      	movs	r0, #0
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	b016      	add	sp, #88	; 0x58
 800c764:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c768 <__smakebuf_r>:
 800c768:	898b      	ldrh	r3, [r1, #12]
 800c76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c76c:	079d      	lsls	r5, r3, #30
 800c76e:	4606      	mov	r6, r0
 800c770:	460c      	mov	r4, r1
 800c772:	d507      	bpl.n	800c784 <__smakebuf_r+0x1c>
 800c774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	6123      	str	r3, [r4, #16]
 800c77c:	2301      	movs	r3, #1
 800c77e:	6163      	str	r3, [r4, #20]
 800c780:	b002      	add	sp, #8
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	ab01      	add	r3, sp, #4
 800c786:	466a      	mov	r2, sp
 800c788:	f7ff ffc8 	bl	800c71c <__swhatbuf_r>
 800c78c:	9900      	ldr	r1, [sp, #0]
 800c78e:	4605      	mov	r5, r0
 800c790:	4630      	mov	r0, r6
 800c792:	f7fe ff6f 	bl	800b674 <_malloc_r>
 800c796:	b948      	cbnz	r0, 800c7ac <__smakebuf_r+0x44>
 800c798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c79c:	059a      	lsls	r2, r3, #22
 800c79e:	d4ef      	bmi.n	800c780 <__smakebuf_r+0x18>
 800c7a0:	f023 0303 	bic.w	r3, r3, #3
 800c7a4:	f043 0302 	orr.w	r3, r3, #2
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	e7e3      	b.n	800c774 <__smakebuf_r+0xc>
 800c7ac:	4b0d      	ldr	r3, [pc, #52]	; (800c7e4 <__smakebuf_r+0x7c>)
 800c7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	6020      	str	r0, [r4, #0]
 800c7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	9b00      	ldr	r3, [sp, #0]
 800c7bc:	6163      	str	r3, [r4, #20]
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	6120      	str	r0, [r4, #16]
 800c7c2:	b15b      	cbz	r3, 800c7dc <__smakebuf_r+0x74>
 800c7c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f000 f8d1 	bl	800c970 <_isatty_r>
 800c7ce:	b128      	cbz	r0, 800c7dc <__smakebuf_r+0x74>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	f023 0303 	bic.w	r3, r3, #3
 800c7d6:	f043 0301 	orr.w	r3, r3, #1
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	89a0      	ldrh	r0, [r4, #12]
 800c7de:	4305      	orrs	r5, r0
 800c7e0:	81a5      	strh	r5, [r4, #12]
 800c7e2:	e7cd      	b.n	800c780 <__smakebuf_r+0x18>
 800c7e4:	0800c575 	.word	0x0800c575

0800c7e8 <_malloc_usable_size_r>:
 800c7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ec:	1f18      	subs	r0, r3, #4
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bfbc      	itt	lt
 800c7f2:	580b      	ldrlt	r3, [r1, r0]
 800c7f4:	18c0      	addlt	r0, r0, r3
 800c7f6:	4770      	bx	lr

0800c7f8 <_raise_r>:
 800c7f8:	291f      	cmp	r1, #31
 800c7fa:	b538      	push	{r3, r4, r5, lr}
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	d904      	bls.n	800c80c <_raise_r+0x14>
 800c802:	2316      	movs	r3, #22
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	f04f 30ff 	mov.w	r0, #4294967295
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c80e:	b112      	cbz	r2, 800c816 <_raise_r+0x1e>
 800c810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c814:	b94b      	cbnz	r3, 800c82a <_raise_r+0x32>
 800c816:	4620      	mov	r0, r4
 800c818:	f000 f830 	bl	800c87c <_getpid_r>
 800c81c:	462a      	mov	r2, r5
 800c81e:	4601      	mov	r1, r0
 800c820:	4620      	mov	r0, r4
 800c822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c826:	f000 b817 	b.w	800c858 <_kill_r>
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d00a      	beq.n	800c844 <_raise_r+0x4c>
 800c82e:	1c59      	adds	r1, r3, #1
 800c830:	d103      	bne.n	800c83a <_raise_r+0x42>
 800c832:	2316      	movs	r3, #22
 800c834:	6003      	str	r3, [r0, #0]
 800c836:	2001      	movs	r0, #1
 800c838:	e7e7      	b.n	800c80a <_raise_r+0x12>
 800c83a:	2400      	movs	r4, #0
 800c83c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c840:	4628      	mov	r0, r5
 800c842:	4798      	blx	r3
 800c844:	2000      	movs	r0, #0
 800c846:	e7e0      	b.n	800c80a <_raise_r+0x12>

0800c848 <raise>:
 800c848:	4b02      	ldr	r3, [pc, #8]	; (800c854 <raise+0xc>)
 800c84a:	4601      	mov	r1, r0
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	f7ff bfd3 	b.w	800c7f8 <_raise_r>
 800c852:	bf00      	nop
 800c854:	2000011c 	.word	0x2000011c

0800c858 <_kill_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d07      	ldr	r5, [pc, #28]	; (800c878 <_kill_r+0x20>)
 800c85c:	2300      	movs	r3, #0
 800c85e:	4604      	mov	r4, r0
 800c860:	4608      	mov	r0, r1
 800c862:	4611      	mov	r1, r2
 800c864:	602b      	str	r3, [r5, #0]
 800c866:	f7f5 f8f5 	bl	8001a54 <_kill>
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	d102      	bne.n	800c874 <_kill_r+0x1c>
 800c86e:	682b      	ldr	r3, [r5, #0]
 800c870:	b103      	cbz	r3, 800c874 <_kill_r+0x1c>
 800c872:	6023      	str	r3, [r4, #0]
 800c874:	bd38      	pop	{r3, r4, r5, pc}
 800c876:	bf00      	nop
 800c878:	2000206c 	.word	0x2000206c

0800c87c <_getpid_r>:
 800c87c:	f7f5 b8e2 	b.w	8001a44 <_getpid>

0800c880 <__sread>:
 800c880:	b510      	push	{r4, lr}
 800c882:	460c      	mov	r4, r1
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	f000 f894 	bl	800c9b4 <_read_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	bfab      	itete	ge
 800c890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c892:	89a3      	ldrhlt	r3, [r4, #12]
 800c894:	181b      	addge	r3, r3, r0
 800c896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c89a:	bfac      	ite	ge
 800c89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c89e:	81a3      	strhlt	r3, [r4, #12]
 800c8a0:	bd10      	pop	{r4, pc}

0800c8a2 <__swrite>:
 800c8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	461f      	mov	r7, r3
 800c8a8:	898b      	ldrh	r3, [r1, #12]
 800c8aa:	05db      	lsls	r3, r3, #23
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	4616      	mov	r6, r2
 800c8b2:	d505      	bpl.n	800c8c0 <__swrite+0x1e>
 800c8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f000 f868 	bl	800c990 <_lseek_r>
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d6:	f000 b817 	b.w	800c908 <_write_r>

0800c8da <__sseek>:
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	460c      	mov	r4, r1
 800c8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e2:	f000 f855 	bl	800c990 <_lseek_r>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	bf15      	itete	ne
 800c8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8f6:	81a3      	strheq	r3, [r4, #12]
 800c8f8:	bf18      	it	ne
 800c8fa:	81a3      	strhne	r3, [r4, #12]
 800c8fc:	bd10      	pop	{r4, pc}

0800c8fe <__sclose>:
 800c8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c902:	f000 b813 	b.w	800c92c <_close_r>
	...

0800c908 <_write_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	; (800c928 <_write_r+0x20>)
 800c90c:	4604      	mov	r4, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	2200      	movs	r2, #0
 800c914:	602a      	str	r2, [r5, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	f7f5 f8d3 	bl	8001ac2 <_write>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_write_r+0x1e>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_write_r+0x1e>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	2000206c 	.word	0x2000206c

0800c92c <_close_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4d06      	ldr	r5, [pc, #24]	; (800c948 <_close_r+0x1c>)
 800c930:	2300      	movs	r3, #0
 800c932:	4604      	mov	r4, r0
 800c934:	4608      	mov	r0, r1
 800c936:	602b      	str	r3, [r5, #0]
 800c938:	f7f5 f8df 	bl	8001afa <_close>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d102      	bne.n	800c946 <_close_r+0x1a>
 800c940:	682b      	ldr	r3, [r5, #0]
 800c942:	b103      	cbz	r3, 800c946 <_close_r+0x1a>
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	2000206c 	.word	0x2000206c

0800c94c <_fstat_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4d07      	ldr	r5, [pc, #28]	; (800c96c <_fstat_r+0x20>)
 800c950:	2300      	movs	r3, #0
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	4611      	mov	r1, r2
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	f7f5 f8da 	bl	8001b12 <_fstat>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d102      	bne.n	800c968 <_fstat_r+0x1c>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	b103      	cbz	r3, 800c968 <_fstat_r+0x1c>
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	2000206c 	.word	0x2000206c

0800c970 <_isatty_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d06      	ldr	r5, [pc, #24]	; (800c98c <_isatty_r+0x1c>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	602b      	str	r3, [r5, #0]
 800c97c:	f7f5 f8d9 	bl	8001b32 <_isatty>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	d102      	bne.n	800c98a <_isatty_r+0x1a>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	b103      	cbz	r3, 800c98a <_isatty_r+0x1a>
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	2000206c 	.word	0x2000206c

0800c990 <_lseek_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d07      	ldr	r5, [pc, #28]	; (800c9b0 <_lseek_r+0x20>)
 800c994:	4604      	mov	r4, r0
 800c996:	4608      	mov	r0, r1
 800c998:	4611      	mov	r1, r2
 800c99a:	2200      	movs	r2, #0
 800c99c:	602a      	str	r2, [r5, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f7f5 f8d2 	bl	8001b48 <_lseek>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_lseek_r+0x1e>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_lseek_r+0x1e>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	2000206c 	.word	0x2000206c

0800c9b4 <_read_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4d07      	ldr	r5, [pc, #28]	; (800c9d4 <_read_r+0x20>)
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	4608      	mov	r0, r1
 800c9bc:	4611      	mov	r1, r2
 800c9be:	2200      	movs	r2, #0
 800c9c0:	602a      	str	r2, [r5, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	f7f5 f860 	bl	8001a88 <_read>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_read_r+0x1e>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_read_r+0x1e>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	2000206c 	.word	0x2000206c

0800c9d8 <_init>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <_fini>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr
